{
    "pipes": [],
    "interfaces": [
        {
            "name": "AppInfo",
            "id": "interface-AppInfo-08b354d0b82832e35621f200410386a8f6b1adabc0e6e0a1232206fb190dfa642bc06979c15ea22bb22f5354b1a285c8324842d112a6a5ab9a2774a02cff2bf1",
            "file": "src/app/domains/shared/data-model/AppInfo.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface AppInfo {\n  branch: string;\n  buildDate: string;\n  buildNumber: 0;\n  commit: string;\n  startedAt: string;\n  upTime: string;\n  version: string;\n}\n",
            "properties": [
                {
                    "name": "branch",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "buildDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "buildNumber",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "commit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "startedAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "upTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "version",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Comment",
            "id": "interface-Comment-23f82bfa247a33d6e42dedece149f245892784120b79194d9423006f46dc13b4af7289335a8d7e7fe984d93ce92e061fa48eacb96efd89f215cfe37df104125d",
            "file": "src/app/domains/shared/data-model/Comment.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Comment {\n  id: number;\n  message: string;\n  authorEmail: string;\n  authorName: string;\n  updateDate: string;\n  state: string;\n  isEditing?: boolean; // used for UI\n}\n",
            "properties": [
                {
                    "name": "authorEmail",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "authorName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "isEditing",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "updateDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Config",
            "id": "interface-Config-bda62058633e3ecc3ca3c9bb872ac9daf79a73f38ecf18e61deb55d9252bf566c61039f1c24eade550a8246e12cab7fc1b9b8408b445812b1704200f8e9aa9e0",
            "file": "src/app/domains/shared/data-model/Config.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Config {\n  clientId: string;\n  issuer: string;\n  scope: string;\n  version: string;\n  budgetCalculationExcelUrl: string;\n  zepOrigin: string;\n}\n",
            "properties": [
                {
                    "name": "budgetCalculationExcelUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "clientId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "issuer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "scope",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "version",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "zepOrigin",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "CustomerProjectWithoutLeads",
            "id": "interface-CustomerProjectWithoutLeads-7d5cc17310439327ec2dc2cea22447b9497f244967f7ac2d9ed542397dbe31f78ea615a511f0a40c8f7a3ba7dbd1497d496a37ec12f37dccf18e60d294450fa9",
            "file": "src/app/domains/shared/data-model/CustomerProjectWithoutLeads.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface CustomerProjectWithoutLeads {\n  projectName: string;\n  comment: string;\n  fetchDate: string;\n  zepId: number;\n}\n",
            "properties": [
                {
                    "name": "comment",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "fetchDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "projectName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "zepId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "EmployeeCheckConfirmDialogAction",
            "id": "interface-EmployeeCheckConfirmDialogAction-1f77e0b7c6e21074bf425ce0829da72f65dfd802570bf47b145c879d5ee6ea00a0bb780cc35cf8b635a55c8d32304981f93ce492e211032f7f5fef3b0bf26756",
            "file": "src/app/domains/monthly-report/feature-monthly-report/employee-check-confirm-comment-dialog/model/EmployeeCheckConfirmDialogAction.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export enum EmployeeCheckConfirmDialogActionType {\n  SAVE,\n  CANCEL\n}\n\nexport interface EmployeeCheckConfirmDialogAction {\n  type: EmployeeCheckConfirmDialogActionType;\n  payload: string;\n}\n",
            "properties": [
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EmployeeCheckConfirmDialogActionType",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "EmployeeCheckConfirmDialogData",
            "id": "interface-EmployeeCheckConfirmDialogData-92838d050c6a3d8f658487f0e4b05c35f1eb4f454c49def39936522d91f2f060bc779792e8948d29c6d54fecc79855016515d4b6a57459287bcb54c45e30d878",
            "file": "src/app/domains/monthly-report/feature-monthly-report/employee-check-confirm-comment-dialog/model/EmployeeCheckConfirmDialogData.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface EmployeeCheckConfirmDialogData {\n  reason?: string\n}\n",
            "properties": [
                {
                    "name": "reason",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "GeneralInfoData",
            "id": "interface-GeneralInfoData-c98f48a6eb02b3edbfc9d6ee577702a93f660ac095127f101e8bfb655cbfcd1fb88dd23c60c8b7dc0acc93db70c291494738d6d60f488f5ce064ef04c9b0aa26",
            "file": "src/app/domains/monthly-report/data-model/GeneralInfoData.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface GeneralInfoData {\n  description: string;\n  value: number;\n  unit: string;\n}\n",
            "properties": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "unit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "JourneyWarning",
            "id": "interface-JourneyWarning-b57fc933d683963cca344ab7efc9c131338745021341cf214d3daaea0be64e325a3606f57928bfe8b00aa664ae47098be8618b6480c05792186f910d025327f2",
            "file": "src/app/domains/monthly-report/data-model/JourneyWarning.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface JourneyWarning {\n  date: string;\n  warnings: Array<string>;\n}\n",
            "properties": [
                {
                    "name": "date",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "warnings",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<string>",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Link",
            "id": "interface-Link-7386eede1b1dec336eaf85a59eb0ed39e217081b39c70282f4b006513127055915f307c631a658e0bf3a3daab49e9f81110cf1ab431ba9e426414e0db26edb6a",
            "file": "src/app/domains/shared/data-model/Link.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Link {\n  name: string;\n  path: string;\n}\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "path",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ManagementEntry",
            "id": "interface-ManagementEntry-d21005f8b880d41d25a626811d73947974d6d25895024cce47d01eef12e37518509e52eb75057c8e90d3484ddd23ba47662c0375e36d9ff489efa4e0ec21d59d",
            "file": "src/app/domains/shared/data-model/ManagementEntry.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Employee} from './Employee';\nimport {State} from './State';\nimport {PmProgress} from './PmProgress';\n\nexport interface ManagementEntry {\n\n  employee: Employee;\n  employeeCheckState: State;\n  employeeCheckStateReason?: string;\n  internalCheckState: State;\n  projectCheckState: State;\n  employeeProgresses: Array<PmProgress>;\n  totalComments: number;\n  finishedComments: number;\n  entryDate: string;\n  billableTime: string;\n  nonBillableTime: string;\n}\n",
            "properties": [
                {
                    "name": "billableTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "employee",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Employee",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "employeeCheckState",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "State",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "employeeCheckStateReason",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "employeeProgresses",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<PmProgress>",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "entryDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "finishedComments",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "internalCheckState",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "State",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "nonBillableTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "projectCheckState",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "State",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "totalComments",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ProjectManagementEntryViewModel",
            "id": "interface-ProjectManagementEntryViewModel-e0fa8f930ad9add3b538d31704a68da74d8a864e897a4256f6a03e8dbca900a630db0cd862ad5fd01bdf2e65a523ce8bb3b11eb831d95363f2e9c53b74c05819",
            "file": "src/app/domains/project-management/data-model/ProjectManagementEntryViewModel.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {ProjectManagementEntry} from './ProjectManagementEntry';\n\n/**\n * extends ProjectManagementEntry by props which are needed for the view\n */\nexport interface ProjectManagementEntryViewModel extends ProjectManagementEntry {\n  allProjectCheckStatesDone?: boolean;\n}\n",
            "properties": [
                {
                    "name": "allProjectCheckStatesDone",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "description": "<p>extends ProjectManagementEntry by props which are needed for the view</p>\n",
            "rawdescription": "\n\nextends ProjectManagementEntry by props which are needed for the view\n",
            "methods": [],
            "extends": [
                "ProjectManagementEntry"
            ]
        },
        {
            "name": "TimeWarning",
            "id": "interface-TimeWarning-2ad4996b2680a7b9d58578239e352a5d6303ac888c4cb9ca4be7c6f918636a3e398ccff6f525719ed1fb382b5ac46e9409b9599085464ac27210f9206e33a551",
            "file": "src/app/domains/monthly-report/data-model/TimeWarning.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface TimeWarning {\n  date: string;\n  description: Array<string>;\n}\n",
            "properties": [
                {
                    "name": "date",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<string>",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "UserInfo",
            "id": "interface-UserInfo-a722b205fc74777f7c2d5e5faa2c30c77cb6e488751276aa2681511bbcdbf0f1976ddcc3419f0a00a4e7027e4ad3188f08656b5286aba32eb6e7aec2b5e8f762",
            "file": "src/app/domains/shared/data-model/UserInfo.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface UserInfo {\n    at_hash: string;\n    aud: string;\n    azp: string;\n    email: string;\n    email_verified: boolean;\n    exp: number;\n    family_name: string;\n    given_name: string;\n    hd: string;\n    iat: number;\n    iss: string;\n    jti: string;\n    locale: string;\n    name: string;\n    nonce: string;\n    picture: string;\n    sub: string;\n}\n",
            "properties": [
                {
                    "name": "at_hash",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "aud",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "azp",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "email_verified",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "exp",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "family_name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "given_name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "hd",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "iat",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "iss",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "jti",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "locale",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "nonce",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "picture",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "sub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [
        {
            "name": "CommentService",
            "id": "injectable-CommentService-a53020ecf9ef45b11f399cf61e3bde7badc4de49728616afd43f6d38dcb19e97d5d07d10a3ea0404fad5e3f0b260e6c032c927c6a6cbbf70f03b2f6805d1c227",
            "file": "src/app/domains/shared/data-service/comment/comment.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "createNewComment",
                    "args": [
                        {
                            "name": "employee",
                            "type": "Employee",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "assigneeEmail",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "step",
                            "type": "Step",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "project",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "currentMonthYear",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "employee",
                            "type": "Employee",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "assigneeEmail",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "step",
                            "type": "Step",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "project",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "currentMonthYear",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteComment",
                    "args": [
                        {
                            "name": "comment",
                            "type": "Comment",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "comment",
                            "type": "Comment",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteViewModelProps",
                    "args": [
                        {
                            "name": "comment",
                            "type": "Comment",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nremove props which got added for ViewModel purposes, to avoid 'unrecognised field ...' exceptions from backend and to avoid unnecessary\ntraffic\n",
                    "description": "<p>remove props which got added for ViewModel purposes, to avoid &#39;unrecognised field ...&#39; exceptions from backend and to avoid unnecessary\ntraffic</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "comment",
                            "type": "Comment",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCommentsForEmployee",
                    "args": [
                        {
                            "name": "employeeEmail",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "montYear",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Array<Comment>>",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "employeeEmail",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "montYear",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDoneComments",
                    "args": [
                        {
                            "name": "comments",
                            "type": "Array<Comment>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Array<Comment>",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "comments",
                            "type": "Array<Comment>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDoneCommentsCount",
                    "args": [
                        {
                            "name": "comments",
                            "type": "Array<Comment>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "comments",
                            "type": "Array<Comment>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setStatusDone",
                    "args": [
                        {
                            "name": "comment",
                            "type": "Comment",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<number>",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "comment",
                            "type": "Comment",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateComment",
                    "args": [
                        {
                            "name": "comment",
                            "type": "Comment",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "comment",
                            "type": "Comment",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from '@angular/core';\nimport {Comment, Employee, NewCommentEntry, State, Step} from '@mega/shared/data-model';\nimport {HttpClient} from '@angular/common/http';\nimport {ConfigService} from '../config/config.service';\nimport {Observable} from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CommentService {\n\n  constructor(\n    private httpClient: HttpClient,\n    private config: ConfigService\n  ) {\n  }\n\n  getDoneCommentsCount(comments: Array<Comment>): number {\n    return this.getDoneComments(comments).length;\n  }\n\n  getDoneComments(comments: Array<Comment>): Array<Comment> {\n    return comments.filter(comment => comment.state === State.DONE);\n  }\n\n  setStatusDone(comment: Comment): Observable<number> {\n    this.deleteViewModelProps(comment);\n    return this.httpClient.put<number>(this.config.getBackendUrlWithContext('/comments/setdone'), comment);\n  }\n\n  getCommentsForEmployee(employeeEmail: string, montYear: string): Observable<Array<Comment>> {\n    return this.httpClient.get<Array<Comment>>(\n      this.config.getBackendUrlWithContext('/comments/getallcommentsforemployee'),\n      {\n        params: {\n          email: employeeEmail,\n          date: montYear\n        }\n      });\n  }\n\n  createNewComment(employee: Employee, message: string, assigneeEmail: string, step: Step, project: string, currentMonthYear: string): Observable<any> {\n    return this.httpClient.post(\n      this.config.getBackendUrlWithContext('/comments'),\n      new NewCommentEntry(step, employee, message, assigneeEmail, project, currentMonthYear)\n    );\n  }\n\n  updateComment(comment: Comment): Observable<any> {\n    this.deleteViewModelProps(comment);\n    return this.httpClient.put(\n      this.config.getBackendUrlWithContext('/comments'),\n      comment\n    );\n  }\n\n  deleteComment(comment: Comment): Observable<any> {\n    return this.httpClient.delete(this.config.getBackendUrlWithContext('/comments/' + comment.id));\n  }\n\n  /**\n   * remove props which got added for ViewModel purposes, to avoid 'unrecognised field ...' exceptions from backend and to avoid unnecessary\n   * traffic\n   */\n  private deleteViewModelProps(comment: Comment) {\n    delete comment.isEditing;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "config",
                        "type": "ConfigService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "config",
                        "type": "ConfigService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ConfigService",
            "id": "injectable-ConfigService-92d0a160de87fce295634592ee30bf07f65e350bc0203bfcc7a8709de554dee75b67042690c52de0b326aa9338763c585f4758a848c10fd39182b6991b1ad286",
            "file": "src/app/domains/shared/data-service/config/config.service.ts",
            "properties": [
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Config",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getBackendUrl",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getBackendUrlWithContext",
                    "args": [
                        {
                            "name": "context",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "context",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getConfig",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Config>",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from '@angular/core';\nimport {environment} from 'src/environments/environment';\nimport {Config} from '@mega/shared/data-model';\nimport {BehaviorSubject, Observable} from 'rxjs';\nimport {HttpClient} from '@angular/common/http';\nimport {tap} from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ConfigService {\n\n  private config: Config;\n\n  constructor(private httpClient: HttpClient) {\n  }\n\n  getConfig(): Observable<Config> {\n    if (this.config) {\n      return new BehaviorSubject(this.config);\n    } else {\n      return this.httpClient.get<Config>(this.getBackendUrlWithContext('/config'))\n        .pipe(tap(resultConfig => this.config = resultConfig));\n    }\n  }\n\n  getBackendUrl(): string {\n    return window.location.origin.replace(environment.frontendOriginSegment, environment.backendOriginSegment);\n  }\n\n  getBackendUrlWithContext(context: string): string {\n    return this.getBackendUrl() + context;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "EnterpriseEntriesService",
            "id": "injectable-EnterpriseEntriesService-7bdf74e793bb2ef6c7436e3410eef63c5ac9c3ea0cdc015f67249229f3475b8d67e9ede771045eb62b10b3edc3921134d6365602569a41ad5f09c728709db6f1",
            "file": "src/app/domains/office-management/data-service/enterprise-entries/enterprise-entries.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getEnterpriseEntry",
                    "args": [
                        {
                            "name": "year",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "month",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<EnterpriseEntry>",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "year",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "month",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateEnterpriseEntry",
                    "args": [
                        {
                            "name": "enterpriseEntry",
                            "type": "EnterpriseEntry",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "year",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "month",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "enterpriseEntry",
                            "type": "EnterpriseEntry",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "year",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "month",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {ConfigService} from '@mega/shared/data-service';\nimport {Observable} from 'rxjs';\nimport {EnterpriseEntry} from '@mega/office-management/data-model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EnterpriseEntriesService {\n\n  constructor(private httpClient: HttpClient,\n              private config: ConfigService) {\n  }\n\n  getEnterpriseEntry(year: number, month: number): Observable<EnterpriseEntry> {\n    return this.httpClient.get<EnterpriseEntry>(\n      this.config.getBackendUrlWithContext('/enterprise/entriesformonthyear/' + year + '/' + month));\n  }\n\n  updateEnterpriseEntry(enterpriseEntry: EnterpriseEntry, year: number, month: number): Observable<boolean> {\n    return this.httpClient.put<boolean>(this.config.getBackendUrlWithContext('/enterprise/entry/' + year + '/' + month), enterpriseEntry);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "config",
                        "type": "ConfigService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "config",
                        "type": "ConfigService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ErrorHandlerService",
            "id": "injectable-ErrorHandlerService-e0f9d8f89f434f415793ce007fda6a9244ddded977a3ca5ee3d8a44c66b5fed984c1b137ee285ab2880ce0e33a67c71f7ada461dc911ad9850160dbac7fdecfb",
            "file": "src/app/domains/shared/data-service/error/error-handler.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "handleError",
                    "args": [
                        {
                            "name": "error",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showErrorPage",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "logout",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "logout",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {ErrorHandler, Injectable, NgZone} from '@angular/core';\nimport {LoggingService} from '@mega/shared/data-service';\nimport {ErrorService} from './error.service';\nimport {configuration} from '@mega/shared/util-constant';\nimport {Router} from '@angular/router';\nimport {UserService} from '../user/user.service';\nimport {HttpStatusCode} from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ErrorHandlerService implements ErrorHandler {\n\n  constructor(\n    private errorService: ErrorService,\n    private router: Router,\n    private userService: UserService,\n    private loggingService: LoggingService,\n    private ngZone: NgZone\n  ) {\n  }\n\n  handleError(error: any): void {\n    const message = this.errorService.getErrorMessage(error);\n    this.loggingService.writeToLog(message, configuration.LogLevel.Debug);\n\n    const logout = error.status === HttpStatusCode.Unauthorized || error.status === HttpStatusCode.Forbidden;\n\n    this.showErrorPage(message, logout);\n  }\n\n  showErrorPage(message: string, logout: boolean) {\n    let redirectUrl;\n\n    if (logout) {\n      redirectUrl = configuration.PAGE_URLS.LOGIN;\n\n      this.userService.logoutWithoutRedirect();\n    } else {\n      redirectUrl = this.router.url;\n    }\n\n    this.errorService.storeLastErrorData(message, redirectUrl);\n\n    // TODO: use of zone is dangerous and should be avoided\n    //  as mentioned above we should move the router to error-service to solve cyclic dependency\n    this.ngZone.run(() => this.router.navigate([configuration.PAGE_URLS.ERROR]));\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "errorService",
                        "type": "ErrorService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "loggingService",
                        "type": "LoggingService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "ngZone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "errorService",
                        "type": "ErrorService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "loggingService",
                        "type": "LoggingService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "ngZone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ErrorService",
            "id": "injectable-ErrorService-f9b5a4600d69f0014c9bfe711397f9b2d34dbce7f3293face0117968286f2872a9315ab0466aa8d2a403104f8085cdd9e7527fdd42457c36f7af3658db433b4e",
            "file": "src/app/domains/shared/data-service/error/error.service.ts",
            "properties": [
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "redirectUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methods": [
                {
                    "name": "getClientMessage",
                    "args": [
                        {
                            "name": "error",
                            "type": "Error",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "Error",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getClientStack",
                    "args": [
                        {
                            "name": "error",
                            "type": "Error",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "Error",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getErrorMessage",
                    "args": [
                        {
                            "name": "error",
                            "type": "Error",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "Error",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getServerMessage",
                    "args": [
                        {
                            "name": "error",
                            "type": "HttpErrorResponse",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "HttpErrorResponse",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getServerStack",
                    "args": [
                        {
                            "name": "error",
                            "type": "HttpErrorResponse",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "HttpErrorResponse",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeLastErrorData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "storeLastErrorData",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "redirectPage",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "redirectPage",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from '@angular/core';\nimport {HttpErrorResponse} from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ErrorService {\n\n  message: string;\n  redirectUrl: string;\n\n  storeLastErrorData(message: string, redirectPage: string) {\n    this.message = message;\n    this.redirectUrl = redirectPage;\n  }\n\n  removeLastErrorData() {\n    delete this.message;\n  }\n\n  getErrorMessage(error: Error): string {\n    if (error instanceof HttpErrorResponse) {\n      // Server Error\n      return this.getServerMessage(error);\n    }\n    // Client Error\n    return this.getClientMessage(error);\n  }\n\n  getClientMessage(error: Error): string {\n    if (!navigator.onLine) {\n      return 'No Internet Connection';\n    }\n    return error.message ? error.message : error.toString();\n  }\n\n  getClientStack(error: Error): string {\n    return error.stack;\n  }\n\n  getServerMessage(error: HttpErrorResponse): string {\n    return error.message;\n  }\n\n  getServerStack(error: HttpErrorResponse): string {\n    // handle stack trace\n    return error.error;\n  }\n}\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "InfoService",
            "id": "injectable-InfoService-8644393c63a0271bbd8971a7775d33613e700bc7779693f9bc5bd06f4f4e9c668329be6cdbb174b21b3969d376741881891be0f9a11382c90451e08cb6e9fd10",
            "file": "src/app/domains/shared/data-service/info/info.service.ts",
            "properties": [
                {
                    "name": "megaInfo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AppInfo",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getInfo",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<AppInfo>",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from '@angular/core';\nimport {BehaviorSubject, Observable} from 'rxjs';\nimport {HttpClient} from '@angular/common/http';\nimport {ConfigService} from '../config/config.service';\nimport {AppInfo} from '@mega/shared/data-model';\nimport {tap} from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class InfoService {\n\n  private megaInfo: AppInfo;\n\n  constructor(private httpClient: HttpClient, private config: ConfigService) {\n  }\n\n  getInfo(): Observable<AppInfo> {\n    if (this.megaInfo) {\n      return new BehaviorSubject(this.megaInfo);\n    } else {\n      return this.httpClient.get<AppInfo>(this.config.getBackendUrlWithContext('/info'))\n        .pipe(tap(info => this.megaInfo = info));\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "config",
                        "type": "ConfigService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "config",
                        "type": "ConfigService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "LocalStorageService",
            "id": "injectable-LocalStorageService-bda9f67c756024b2be17c6cfedbb89825234401ce6bd443b21ac86676b99a79f3526ef0f570cc0372ed35741c9d63c4801ce17e8588dfe91de6586626eb4996c",
            "file": "src/app/domains/shared/data-service/local-storage/local-storage.service.ts",
            "properties": [
                {
                    "name": "megaUserStartPage",
                    "defaultValue": "'MEGA_USER_STARTPAGE'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getUserStartPage",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removeUserStartPage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "saveUserStartPage",
                    "args": [
                        {
                            "name": "userStartPage",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userStartPage",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LocalStorageService {\n\n  private megaUserStartPage = 'MEGA_USER_STARTPAGE';\n\n  getUserStartPage(): string {\n    return localStorage.getItem(this.megaUserStartPage);\n  }\n\n  saveUserStartPage(userStartPage: string): void {\n    localStorage.setItem(this.megaUserStartPage, userStartPage);\n  }\n\n  removeUserStartPage(): void {\n    localStorage.removeItem(this.megaUserStartPage);\n  }\n}\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "LoggingService",
            "id": "injectable-LoggingService-a8a64eb77e8e502180e246e2e3358e59fd2f3d4930d07909b8594b09e5cbe6ac0516f0e2053c85173e10c7dc4305dc2b4fb95743e5761af039c1ee7abfda11d3",
            "file": "src/app/domains/shared/data-service/logging/logging.service.ts",
            "properties": [
                {
                    "name": "level",
                    "defaultValue": "configuration.LogLevel.Debug",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "logWithDate",
                    "defaultValue": "configuration.logWithDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "shouldLog",
                    "args": [
                        {
                            "name": "level",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "level",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeToLog",
                    "args": [
                        {
                            "name": "msg",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "level",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "msg",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "level",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from '@angular/core';\nimport {configuration} from '@mega/shared/util-constant';\nimport {LogEntry} from '@mega/shared/data-model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoggingService {\n\n  private level: number = configuration.LogLevel.Debug;\n  private logWithDate: boolean = configuration.logWithDate;\n\n  public writeToLog(msg: string,\n                    level: number): void {\n    if (this.shouldLog(level)) {\n      const entry: LogEntry = new LogEntry();\n      entry.message = msg;\n      entry.level = level;\n      entry.logWithDate = this.logWithDate;\n\n      console.log(entry.buildLogString());\n    }\n  }\n\n  private shouldLog(level: number) {\n    let ret = false;\n    if ((level >= this.level &&\n        level !== configuration.LogLevel.Off) ||\n      this.level === configuration.LogLevel.All) {\n      ret = true;\n    }\n\n    return ret;\n  }\n}\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "MonthlyReportService",
            "id": "injectable-MonthlyReportService-8024845233da434aaaeffe6e69ba754685548a5db74f73ddd3ede3b7364d69b0c2fb61c200c5b4a37707843b27463bc1f61d5d2a73a117bf863ae8c6a742d51c",
            "file": "src/app/domains/monthly-report/data-service/monthly-report/monthly-report.service.ts",
            "properties": [
                {
                    "name": "billablePercentage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "billableTimeHours",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "monthlyReport",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MonthlyReport",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "selectedMonth",
                    "defaultValue": "new BehaviorSubject<number>(moment().month())",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "selectedYear",
                    "defaultValue": "new BehaviorSubject<number>(moment().year())",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "totalWorkingTimeHours",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methods": [
                {
                    "name": "getAll",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<MonthlyReport>",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getAllByDate",
                    "args": [
                        {
                            "name": "year",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "month",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<MonthlyReport>",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "year",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "month",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {MonthlyReport} from '@mega/monthly-report/data-model';\nimport {BehaviorSubject, Observable} from 'rxjs';\nimport {ConfigService} from '@mega/shared/data-service';\nimport * as _moment from 'moment';\n\nconst moment = _moment;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MonthlyReportService {\n\n  monthlyReport: MonthlyReport;\n\n  selectedYear = new BehaviorSubject<number>(moment().year());\n  selectedMonth = new BehaviorSubject<number>(moment().month());\n\n  billablePercentage: number;\n  totalWorkingTimeHours: number;\n  billableTimeHours: number;\n\n  constructor(\n    private httpClient: HttpClient,\n    private config: ConfigService) {\n  }\n\n  getAll(): Observable<MonthlyReport> {\n    return this.httpClient.get<MonthlyReport>(this.config.getBackendUrlWithContext('/worker/monthendreports'));\n  }\n\n  getAllByDate(year: number, month: number): Observable<MonthlyReport> {\n    return this.httpClient.get<MonthlyReport>(this.config.getBackendUrlWithContext(`/worker/monthendreports/${year}/${month}`));\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "config",
                        "type": "ConfigService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "config",
                        "type": "ConfigService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "NotificationService",
            "id": "injectable-NotificationService-78f0974f01447e4095ed9e781c36c08f445135b5bb943852ea8f379b8ab6032d771a2c4a25faa47f08314180dcd11ef1ebfa001a4bac8226c085210db059f59b",
            "file": "src/app/domains/shared/data-service/notification/notification.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "showError",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showSuccess",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from '@angular/core';\nimport {MatSnackBar} from '@angular/material/snack-bar';\nimport {NavigationEnd, Router} from '@angular/router';\nimport {filter} from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NotificationService {\n\n  constructor(private router: Router,\n              private snackbar: MatSnackBar) {\n    this.router.events.pipe(filter(event => event instanceof NavigationEnd)).subscribe(event => this.snackbar.dismiss());\n  }\n\n  showSuccess(message: string): void {\n    this.snackbar.open(message, 'OK', {duration: 3000});\n  }\n\n  showError(message: string): void {\n    this.snackbar.open(message, 'X', {panelClass: ['error']});\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "snackbar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackbar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "OfficeManagementService",
            "id": "injectable-OfficeManagementService-db07b65f93a31116e9c83973c06bb88fde337b534dcccf1e9d14fe03ff1639437f92700d4b4c54d4cdf5fc4f3385459e3e9eada35c33c1119d8bb855f5f56579",
            "file": "src/app/domains/office-management/data-service/office-management/office-management.service.ts",
            "properties": [
                {
                    "name": "selectedMonth",
                    "defaultValue": "new BehaviorSubject<number>(moment().subtract(1, 'month').month() + 1)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "selectedYear",
                    "defaultValue": "new BehaviorSubject<number>(moment().subtract(1, 'month').year())",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methods": [
                {
                    "name": "getEntries",
                    "args": [
                        {
                            "name": "year",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "month",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "projectStateLogicSingle",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Array<ManagementEntry>>",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "year",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "month",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "projectStateLogicSingle",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateEmployees",
                    "args": [
                        {
                            "name": "employees",
                            "type": "Array<Employee>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Response>",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "employees",
                            "type": "Array<Employee>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from '@angular/core';\nimport {ConfigService} from '@mega/shared/data-service';\nimport {Employee, ManagementEntry} from '@mega/shared/data-model';\nimport {HttpClient, HttpParams} from '@angular/common/http';\nimport {BehaviorSubject, Observable} from 'rxjs';\nimport * as _moment from 'moment';\n\nconst moment = _moment;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OfficeManagementService {\n\n  selectedYear = new BehaviorSubject<number>(moment().subtract(1, 'month').year());\n  selectedMonth = new BehaviorSubject<number>(moment().subtract(1, 'month').month() + 1);\n\n  constructor(private configService: ConfigService,\n              private httpClient: HttpClient) {\n  }\n\n  getEntries(year: number, month: number, projectStateLogicSingle: boolean): Observable<Array<ManagementEntry>> {\n    let params: HttpParams;\n    if (projectStateLogicSingle){\n      params = new HttpParams().append('projectStateLogicSingle', `${projectStateLogicSingle}`);\n    }\n\n\n    return this.httpClient.get<Array<ManagementEntry>>(\n      this.configService.getBackendUrlWithContext('/management/officemanagemententries/' + year + '/' + month),\n      {params}\n    );\n  }\n\n  updateEmployees(employees: Array<Employee>): Observable < Response > {\n    return this.httpClient.put<Response>(this.configService.getBackendUrlWithContext('/employees'), employees);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "configService",
                        "type": "ConfigService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "configService",
                        "type": "ConfigService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ProjectCommentService",
            "id": "injectable-ProjectCommentService-f55a2f2604d6d00c57cb0cfb6eff9c625c11ea26c6cb17a1dc3cd13bbdccbbf56f973e16f0ea9ece3c269589a33c87aee68a72de8305b7da99984ccd135043bb",
            "file": "src/app/domains/shared/data-service/project-comment/project-comment.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "create",
                    "args": [
                        {
                            "name": "comment",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "yearMonth",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "projectName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ProjectComment>",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "comment",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "yearMonth",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "projectName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "monthYear",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "projectName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ProjectComment>",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "monthYear",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "projectName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "projectComment",
                            "type": "ProjectComment",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "projectComment",
                            "type": "ProjectComment",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {ConfigService} from '../config/config.service';\nimport {Observable} from 'rxjs';\nimport {ProjectComment} from '@mega/shared/data-model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProjectCommentService {\n\n  constructor(private httpClient: HttpClient,\n              private configService: ConfigService) {\n  }\n\n  get(monthYear: string, projectName: string): Observable<ProjectComment> {\n    return this.httpClient.get<ProjectComment>(\n      this.configService.getBackendUrlWithContext('/projectcomments'), {\n        params: {\n          date: monthYear,\n          projectName: projectName\n        }\n      });\n  }\n\n  create(comment: string, yearMonth: string, projectName: string): Observable<ProjectComment> {\n    return this.httpClient.post<ProjectComment>(\n      this.configService.getBackendUrlWithContext('/projectcomments'),\n      new ProjectComment(comment, yearMonth, projectName));\n  }\n\n  update(projectComment: ProjectComment): Observable<boolean> {\n    return this.httpClient.put<boolean>(\n      this.configService.getBackendUrlWithContext('/projectcomments'),\n      projectComment\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "configService",
                        "type": "ConfigService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "configService",
                        "type": "ConfigService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ProjectEntriesService",
            "id": "injectable-ProjectEntriesService-4e7f17a9d44558618b53d97e92e41ccfb0d4f17befc1db94d17e37edb4036a8a63ebaa5924f033dbf970dc3ea8df74b1bb1c0bef72882333c4d89d79456c1075",
            "file": "src/app/domains/shared/data-service/project-entries/project-entries.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "updateProjectEntry",
                    "args": [
                        {
                            "name": "state",
                            "type": "ProjectState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "preset",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "projectName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "step",
                            "type": "ProjectStepQualifier",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "currentMonthYear",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "ProjectState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "preset",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "projectName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "step",
                            "type": "ProjectStepQualifier",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "currentMonthYear",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {ConfigService} from '../config/config.service';\nimport {Observable} from 'rxjs';\nimport {ProjectEntry, ProjectState, ProjectStepQualifier} from '@mega/shared/data-model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProjectEntriesService {\n\n  constructor(private httpClient: HttpClient,\n              private config: ConfigService) {\n  }\n\n  updateProjectEntry(state: ProjectState, preset: boolean, projectName: string, step: ProjectStepQualifier, currentMonthYear: string): Observable<boolean> {\n    return this.httpClient.put<boolean>(\n      this.config.getBackendUrlWithContext('/projectentry'),\n      new ProjectEntry(state, preset, projectName, step, currentMonthYear)\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "config",
                        "type": "ConfigService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "config",
                        "type": "ConfigService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ProjectManagementService",
            "id": "injectable-ProjectManagementService-3add65c34226611955dfac890eda623865b8357ed60a43a9edb9672a36af75c840fa9ef7b7406d42a16bed4cf6af8100a0512aab986148903db83d335e91d29d",
            "file": "src/app/domains/project-management/data-service/project-management/project-management.service.ts",
            "properties": [
                {
                    "name": "selectedMonth",
                    "defaultValue": "new BehaviorSubject<number>(moment().subtract(1, 'month').month() + 1)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "selectedYear",
                    "defaultValue": "new BehaviorSubject<number>(moment().subtract(1, 'month').year())",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methods": [
                {
                    "name": "getEntries",
                    "args": [
                        {
                            "name": "year",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "month",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "all",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Array<ProjectManagementEntry>>",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "year",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "month",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "all",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProjectsWithoutLeads",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from '@angular/core';\nimport {ConfigService} from '@mega/shared/data-service';\nimport {HttpClient, HttpParams} from '@angular/common/http';\nimport {BehaviorSubject, Observable} from 'rxjs';\nimport {ProjectManagementEntry} from '@mega/project-management/data-model';\nimport * as _moment from 'moment';\nimport {CustomerProjectWithoutLeads} from '@mega/shared/data-model';\n\nconst moment = _moment;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProjectManagementService {\n\n  selectedYear = new BehaviorSubject<number>(moment().subtract(1, 'month').year());\n  selectedMonth = new BehaviorSubject<number>(moment().subtract(1, 'month').month() + 1);\n\n  constructor(private configService: ConfigService, private httpClient: HttpClient) {\n  }\n\n  getEntries(year: number, month: number, all: boolean): Observable<Array<ProjectManagementEntry>> {\n    const params: HttpParams = new HttpParams().append('all', `${all}`);\n\n    return this.httpClient.get<Array<ProjectManagementEntry>>(\n      this.configService.getBackendUrlWithContext('/management/projectmanagemententries/' + year + '/' + month),\n      {\n        params: params\n      });\n  }\n\n  getProjectsWithoutLeads() {\n    return this.httpClient.get<CustomerProjectWithoutLeads[]>(\n      this.configService.getBackendUrlWithContext('/management/projectsWithoutLeads')\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "configService",
                        "type": "ConfigService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "configService",
                        "type": "ConfigService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "RolesService",
            "id": "injectable-RolesService-bea15772c2266edff79a6b6727850da1d18accc43f940cc86995f629c977172871a080cb71b556c45d69a904245668c9d11a3dbacbd0130826514928e5b29729",
            "file": "src/app/domains/shared/data-service/roles/roles.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "isAllowed",
                    "args": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from '@angular/core';\nimport {Route, Router} from '@angular/router';\nimport {UserService} from '../user/user.service';\nimport {User} from '@mega/shared/data-model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RolesService {\n\n  constructor(private router: Router,\n              private userService: UserService) {\n  }\n\n  isAllowed(path: string) {\n    const user: User = this.userService.user.value;\n\n    if (!user) {\n      return false;\n    }\n\n    const route: Route = this.router.config.find(r => r.path === path);\n\n    if (!route) {\n      return false;\n    }\n\n    if (route.data) {\n      return user.roles.indexOf(route.data.role) > -1;\n    } else {\n      return true;\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "SnackbarService",
            "id": "injectable-SnackbarService-ec9f3273b6fb8cba90be9c098706b656497565bc664a2c80c07ae4245cf86d0987d09c293e52d6e60a5a24eda54e9404e7d0dd133af002e24a3acb07135b31fe",
            "file": "src/app/domains/shared/data-service/snackbar/snackbar.service.ts",
            "properties": [
                {
                    "name": "action",
                    "defaultValue": "this.translate.instant('snackbar.confirm')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "config",
                    "defaultValue": "{\n    horizontalPosition: <MatSnackBarHorizontalPosition>configuration.snackbar.horizontalPosition,\n    verticalPosition: <MatSnackBarVerticalPosition>configuration.snackbar.verticalPosition,\n    duration: configuration.snackbar.duration\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SnackbarConfig",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "message",
                    "defaultValue": "this.translate.instant('snackbar.message')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "showDefaultSnackbar",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "showSnackbar",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "config",
                            "type": "SnackbarConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "config",
                            "type": "SnackbarConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showSnackbarWithMessage",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from '@angular/core';\nimport {MatSnackBar, MatSnackBarHorizontalPosition, MatSnackBarVerticalPosition} from '@angular/material/snack-bar';\nimport {TranslateService} from '@ngx-translate/core';\nimport {configuration} from '@mega/shared/util-constant';\n\nexport type SnackbarConfig = {\n  horizontalPosition: MatSnackBarHorizontalPosition,\n  verticalPosition: MatSnackBarVerticalPosition,\n  duration: number\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SnackbarService {\n\n  private message = this.translate.instant('snackbar.message');\n  private action = this.translate.instant('snackbar.confirm');\n  private config: SnackbarConfig = {\n    horizontalPosition: <MatSnackBarHorizontalPosition>configuration.snackbar.horizontalPosition,\n    verticalPosition: <MatSnackBarVerticalPosition>configuration.snackbar.verticalPosition,\n    duration: configuration.snackbar.duration\n  }\n\n  constructor(private _snackBar: MatSnackBar,\n              private translate: TranslateService) {\n  }\n\n  showDefaultSnackbar() {\n    this.showSnackbar(this.message, this.action, this.config);\n  }\n\n  showSnackbarWithMessage(message: string) {\n    this.showSnackbar(message, this.action, this.config);\n  }\n\n  showSnackbar(message: string, action: string, config?: SnackbarConfig) {\n    this._snackBar.open(message, action, config ? config : this.config);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "_snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "StepEntriesService",
            "id": "injectable-StepEntriesService-de159befee5ecc54d2ec00f2a122fb36b47857a1f753cf3e53e42532805483b5e8c67ca40c8ebb02a9b655babd090a3d295439ff8afb3b560584fa4b6e776d61",
            "file": "src/app/domains/shared/data-service/step-entries/step-entries.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "close",
                    "args": [
                        {
                            "name": "employee",
                            "type": "Employee",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "step",
                            "type": "Step",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "currentMonthYear",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "employee",
                            "type": "Employee",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "step",
                            "type": "Step",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "currentMonthYear",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateEmployeeStateForOffice",
                    "args": [
                        {
                            "name": "employee",
                            "type": "Employee",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "step",
                            "type": "Step",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "currentMonthYear",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "newState",
                            "type": "State",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "newStateReason",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n\n",
                    "description": "",
                    "jsdoctags": [
                        {
                            "name": "employee",
                            "type": "Employee",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "step",
                            "type": "Step",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "currentMonthYear",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "newState",
                            "type": "State",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "newStateReason",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "tagName": {
                                "pos": 740,
                                "end": 746,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "return"
                            },
                            "comment": "<p>true if the operation was successful</p>\n"
                        }
                    ]
                },
                {
                    "name": "updateEmployeeStateForProject",
                    "args": [
                        {
                            "name": "employee",
                            "type": "Employee",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "projectName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "currentMonthYear",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "newState",
                            "type": "State",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n\n",
                    "description": "",
                    "jsdoctags": [
                        {
                            "name": "employee",
                            "type": "Employee",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "projectName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "currentMonthYear",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "newState",
                            "type": "State",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "tagName": {
                                "pos": 1190,
                                "end": 1196,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "return"
                            },
                            "comment": "<p>true if the operation was successful</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from '@angular/core';\nimport {Employee, EmployeeStep, ProjectStep, State, Step, UpdateEmployeeStep} from '@mega/shared/data-model';\nimport {Observable} from 'rxjs';\nimport {HttpClient} from '@angular/common/http';\nimport {ConfigService} from '../config/config.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StepEntriesService {\n\n  constructor(\n    private httpClient: HttpClient,\n    private config: ConfigService\n  ) {\n  }\n\n  close(employee: Employee, step: Step, currentMonthYear: string): Observable<boolean> {\n    return this.httpClient.put<boolean>(\n      this.config.getBackendUrlWithContext('/stepentry/close'),\n      new EmployeeStep(step, employee, currentMonthYear)\n    );\n  }\n\n  /**\n   *\n   * @return true if the operation was successful\n   */\n  updateEmployeeStateForOffice(employee: Employee, step: Step, currentMonthYear: string, newState: State, newStateReason?: string): Observable<boolean> {\n    return this.httpClient.put<boolean>(\n      this.config.getBackendUrlWithContext('/stepentry/updateEmployeeStateForOffice'),\n      new UpdateEmployeeStep(step, employee, currentMonthYear, newState, newStateReason)\n    );\n  }\n\n  /**\n   *\n   * @return true if the operation was successful\n   */\n  updateEmployeeStateForProject(employee: Employee, projectName: string, currentMonthYear: string, newState: State): Observable<boolean> {\n    return this.httpClient.put<boolean>(\n      this.config.getBackendUrlWithContext('/stepentry/updateEmployeeStateForProject'),\n      new ProjectStep(Step.CONTROL_TIME_EVIDENCES, employee, projectName, currentMonthYear, newState)\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "config",
                        "type": "ConfigService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "config",
                        "type": "ConfigService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "UserService",
            "id": "injectable-UserService-6755a45e40511c62a4fe360cba39c76ccb767a4cc33b611ede8f54f4f1ad53140c0d72935774bb620d376f8678397f794700041cd7b3b33ea2c929247120ef2d",
            "file": "src/app/domains/shared/data-service/user/user.service.ts",
            "properties": [
                {
                    "name": "user",
                    "defaultValue": "new BehaviorSubject(undefined)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<User>",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methods": [
                {
                    "name": "getStartpageOverride",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "invalidateUser",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loggedInWithGoogle",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "loginUser",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "logoutWithoutRedirect",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "navigateToStartpage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "setStartpageOverride",
                    "args": [
                        {
                            "name": "startpage",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "startpage",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {ConfigService} from '../config/config.service';\nimport {OAuthService} from 'angular-oauth2-oidc';\nimport {User} from '@mega/shared/data-model';\nimport {configuration} from '@mega/shared/util-constant';\nimport {Router} from '@angular/router';\nimport {BehaviorSubject} from 'rxjs';\nimport {LocalStorageService} from '../local-storage/local-storage.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n\n  user: BehaviorSubject<User> = new BehaviorSubject(undefined);\n\n  constructor(private router: Router,\n              private httpClient: HttpClient,\n              private oAuthService: OAuthService,\n              private configService: ConfigService,\n              private localStorageService: LocalStorageService) {\n  }\n\n  public loginUser(): void {\n    this.httpClient.get<User>(this.configService.getBackendUrlWithContext('/user'))\n      .subscribe((result) => {\n        this.user.next(result);\n        this.navigateToStartpage();\n      });\n  }\n\n  public logout(): void {\n    this.invalidateUser();\n    this.router.navigate([configuration.PAGE_URLS.LOGIN]);\n  }\n\n  public logoutWithoutRedirect(): void {\n    this.invalidateUser();\n  }\n\n  invalidateUser() {\n    this.oAuthService.logOut();\n    this.user.next(undefined);\n  }\n\n  public loggedInWithGoogle(): boolean {\n    return this.oAuthService.hasValidAccessToken();\n  }\n\n  public setStartpageOverride(startpage: string): void {\n    !startpage ? this.localStorageService.removeUserStartPage() : this.localStorageService.saveUserStartPage(startpage);\n  }\n\n  public getStartpageOverride(): string {\n    return this.localStorageService.getUserStartPage();\n  }\n\n  private navigateToStartpage() {\n    const startpage = this.getStartpageOverride() ? this.getStartpageOverride() : configuration.PAGE_URLS.MONTHLY_REPORT;\n    this.setStartpageOverride(undefined);\n    this.router.navigate([startpage]);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "oAuthService",
                        "type": "OAuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "configService",
                        "type": "ConfigService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "localStorageService",
                        "type": "LocalStorageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "oAuthService",
                        "type": "OAuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "configService",
                        "type": "ConfigService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "localStorageService",
                        "type": "LocalStorageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [
        {
            "name": "DisplayedEmployees",
            "id": "class-DisplayedEmployees-3411df84f644ea23737fd3b658da02f248958c05ffcf61b82e1bfb43b261ca376573825fd1cdbd0d7db8e6dca9766b6d62da93fdb561ae59f11b9836eb1232e8",
            "file": "src/app/domains/shared/ui-common/pm-progress/pm-progress.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {Component, Inject, OnInit} from '@angular/core';\nimport {PmProgress, State} from '@mega/shared/data-model';\nimport {MAT_BOTTOM_SHEET_DATA} from '@angular/material/bottom-sheet';\nimport {TranslateModule, TranslateService} from '@ngx-translate/core';\nimport {StateIndicatorComponent} from '../state-indicator/state-indicator.component';\nimport {MatTableModule} from '@angular/material/table';\n\nclass DisplayedEmployees {\n  name: string;\n  state: State;\n\n  constructor(name: string, state: State) {\n    this.name = name;\n    this.state = state;\n  }\n}\n\n@Component({\n  selector: 'app-employee-progress',\n  templateUrl: './pm-progress.component.html',\n  styleUrls: ['./pm-progress.component.scss'],\n  standalone: true,\n  imports: [\n    MatTableModule,\n    StateIndicatorComponent,\n    TranslateModule\n  ]\n})\nexport class PmProgressComponent implements OnInit {\n\n  pmProgresses: Array<PmProgress>;\n  internalCheckState: State;\n  displayedEmployees: Array<DisplayedEmployees>;\n  displayedColumns = ['in-charge', 'checked'];\n\n  constructor(@Inject(MAT_BOTTOM_SHEET_DATA) public data: any, private translateService: TranslateService) {\n    this.pmProgresses = data.employeeProgresses;\n    this.internalCheckState = data.internalCheckState;\n  }\n\n  ngOnInit(): void {\n    this.buildDisplayedEmployees();\n  }\n\n  private buildDisplayedEmployees() {\n    this.displayedEmployees = new Array<DisplayedEmployees>();\n\n    this.translateService.get('monthly-report.pm-progress-bottom-sheet.office-management').subscribe(translation => {\n      this.displayedEmployees.push(new DisplayedEmployees(translation, this.internalCheckState));\n    });\n\n    const map: Map<string, Array<State>> = new Map<string, Array<State>>();\n    this.pmProgresses.forEach(pmProgress => {\n      const name = pmProgress.firstname + ' ' + pmProgress.lastname;\n      if (map.has(name)) {\n        map.get(name).push(pmProgress.state);\n      } else {\n        map.set(name, new Array<State>(pmProgress.state));\n      }\n    });\n\n    map.forEach(((value, key) => {\n      const allDone: boolean = value.every(state => state === State.DONE);\n      this.displayedEmployees.push(new DisplayedEmployees(\n        key,\n        allDone ? State.DONE : State.OPEN\n      ));\n    }));\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "state",
                        "type": "State",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "state",
                        "type": "State",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "State",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Employee",
            "id": "class-Employee-74aa616dd87a028221d8fac983048b99ff5d096f966c2bc457d16d6a26db75bd6b959f671ab55839e3a992c8bbfec13c960831e35bbff0e71114538fae4bff54",
            "file": "src/app/domains/shared/data-model/Employee.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class Employee {\n  userId: string;\n  firstname: string;\n  lastname: string;\n  email: string;\n  title: string;\n  releaseDate: string;\n  workDescription: string;\n  salutation: string;\n  active: boolean;\n}\n",
            "properties": [
                {
                    "name": "active",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "firstname",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "lastname",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "releaseDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "salutation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "userId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "workDescription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "EmployeeStep",
            "id": "class-EmployeeStep-ebb290b287260c97aa9aa1eb628a27abf4cdb12779209c3287ef87d8e24613a98b5ccf1d013a3991e7361d3f78528050c5d8162de8f53db077ada3e97923c2b1",
            "file": "src/app/domains/shared/data-model/EmployeeStep.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {Employee} from './Employee';\n\nexport class EmployeeStep {\n\n  stepId: number;\n  employee: Employee;\n  currentMonthYear: string;\n\n  constructor(stepId: number, employee: Employee, currentMonthYear: string) {\n    this.stepId = stepId;\n    this.employee = employee;\n    this.currentMonthYear = currentMonthYear;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "stepId",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "employee",
                        "type": "Employee",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "currentMonthYear",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "stepId",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "employee",
                        "type": "Employee",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "currentMonthYear",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "currentMonthYear",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "employee",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Employee",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "stepId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "EnterpriseEntry",
            "id": "class-EnterpriseEntry-195ea5955cb554d57e27a876e4e6645312e347846c4c302b17491c65dadb83c01e8ed87fe9b7c7d3e49f3c229aa3ee48b40d966a207a66dcc617878f70bde323",
            "file": "src/app/domains/office-management/data-model/EnterpriseEntry.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {ProjectState} from '@mega/shared/data-model';\n\nexport class EnterpriseEntry {\n  zepTimesReleased: ProjectState;\n  chargeabilityExternalEmployeesRecorded: ProjectState;\n  payrollAccountingSent: ProjectState;\n  currentMonthYear: string;\n\n  constructor(zepTimesReleased: ProjectState, chargeabilityExternalEmployeesRecorded: ProjectState, payrollAccountingSent: ProjectState, currentMonthYear: string) {\n    this.zepTimesReleased = zepTimesReleased;\n    this.chargeabilityExternalEmployeesRecorded = chargeabilityExternalEmployeesRecorded;\n    this.payrollAccountingSent = payrollAccountingSent;\n    this.currentMonthYear = currentMonthYear;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "zepTimesReleased",
                        "type": "ProjectState",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "chargeabilityExternalEmployeesRecorded",
                        "type": "ProjectState",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "payrollAccountingSent",
                        "type": "ProjectState",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "currentMonthYear",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "zepTimesReleased",
                        "type": "ProjectState",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "chargeabilityExternalEmployeesRecorded",
                        "type": "ProjectState",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "payrollAccountingSent",
                        "type": "ProjectState",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "currentMonthYear",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "chargeabilityExternalEmployeesRecorded",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ProjectState",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "currentMonthYear",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "payrollAccountingSent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ProjectState",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "zepTimesReleased",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ProjectState",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "LogEntry",
            "id": "class-LogEntry-f320ec7ba3a3882f45e84111019ad360ba9128d27fa53a2f434c22d3c2ec4f2a13f49453a26f2373270b355738949e285b170af073edfc2c8aae18c9a30b79fa",
            "file": "src/app/domains/shared/data-model/LogEntry.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {configuration} from '@mega/shared/util-constant';\n\nexport class LogEntry {\n  message = '';\n  level = configuration.LogLevel.Debug;\n  logWithDate: boolean = configuration.logWithDate;\n\n  buildLogString(): string {\n    let ret = '';\n\n    if (this.logWithDate) {\n      ret = new Date() + ' - ';\n    }\n    ret += 'Type: ' + this.level;\n    ret += ' - Message: ' + this.message;\n\n    return ret;\n  }\n}\n",
            "properties": [
                {
                    "name": "level",
                    "defaultValue": "configuration.LogLevel.Debug",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "logWithDate",
                    "defaultValue": "configuration.logWithDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "message",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "methods": [
                {
                    "name": "buildLogString",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "extends": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "MonthlyReport",
            "id": "class-MonthlyReport-b87e1de7bc3a32b970ba620f8b8d995fd8d1ab32a00531803593d167ed2659e13889136292a5b86ac76057a15da8fa940d101857881f5fa82775f953b3c38c82",
            "file": "src/app/domains/monthly-report/data-model/MonthlyReport.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {TimeWarning} from './TimeWarning';\nimport {JourneyWarning} from './JourneyWarning';\nimport {Comment, Employee, PmProgress, State} from '@mega/shared/data-model';\n\nexport class MonthlyReport {\n  comments: Array<Comment>;\n  timeWarnings: Array<TimeWarning>;\n  journeyWarnings: Array<JourneyWarning>;\n  employeeCheckState: string;\n  employeeCheckStateReason?: string;\n  internalCheckState: State;\n  otherChecksDone: boolean;\n  assigned: boolean;\n  employee: Employee;\n  initialDate: string;\n  employeeProgresses: Array<PmProgress>;\n  vacationDays: number;\n  homeofficeDays: number;\n  compensatoryDays: number;\n  billableTime: string;\n  totalWorkingTime: string;\n  paidSickLeave: number;\n  vacationDayBalance: number;\n}\n",
            "properties": [
                {
                    "name": "assigned",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "billableTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "comments",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<Comment>",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "compensatoryDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "employee",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Employee",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "employeeCheckState",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "employeeCheckStateReason",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "employeeProgresses",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<PmProgress>",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "homeofficeDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "initialDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "internalCheckState",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "State",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "journeyWarnings",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<JourneyWarning>",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "otherChecksDone",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "paidSickLeave",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "timeWarnings",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<TimeWarning>",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "totalWorkingTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "vacationDayBalance",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "vacationDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "NewCommentEntry",
            "id": "class-NewCommentEntry-154706cc638d494f2cf34f619570a3da9504f375fb23c1085b140e7cdb967d5d2f652be024047b8b5bf6194546ae9ddc7e3a0b873f05597afe627f5729b849df",
            "file": "src/app/domains/shared/data-model/NewCommentEntry.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {Employee} from './Employee';\n\nexport class NewCommentEntry {\n  stepId: number;\n  employee: Employee;\n  comment: string;\n  assigneeEmail: string;\n  project: string;\n  currentMonthYear: string;\n\n  constructor(stepId: number, employee: Employee, comment: string, assigneEmail: string, project: string, currentMonthYear: string) {\n    this.stepId = stepId;\n    this.employee = employee;\n    this.comment = comment;\n    this.assigneeEmail = assigneEmail;\n    this.project = project;\n    this.currentMonthYear = currentMonthYear;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "stepId",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "employee",
                        "type": "Employee",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "comment",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "assigneEmail",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "project",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "currentMonthYear",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "stepId",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "employee",
                        "type": "Employee",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "comment",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "assigneEmail",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "project",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "currentMonthYear",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "assigneeEmail",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "comment",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "currentMonthYear",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "employee",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Employee",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "project",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "stepId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PmProgress",
            "id": "class-PmProgress-c9964f8f3a2223f99e30111f3cefc1c9a28c30af21662145d33fee0347e012f89278f95b396cacf7727008af1aa584e75df99aabc0272a764462412c1b405e50",
            "file": "src/app/domains/shared/data-model/PmProgress.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {State} from './State';\n\nexport class PmProgress {\n  firstname: string;\n  lastname: string;\n  state: State;\n  project: string;\n  stepId: number;\n  assigneeEmail: string;\n}\n",
            "properties": [
                {
                    "name": "assigneeEmail",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "firstname",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "lastname",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "project",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "State",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "stepId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ProjectComment",
            "id": "class-ProjectComment-a652079e0538240a3c30f66fe209a644401a8d1b5f85bf036c502841fbaeccd3d78a502ffac8b8d1ce0d2a0d9e1705ac05868ca4f8126a4ef0b0ed668e873d12",
            "file": "src/app/domains/shared/data-model/ProjectComment.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class ProjectComment {\n\n  id: number\n  comment: string\n  date: string\n  projectName: string\n\n  constructor(comment: string, yearMonth: string, projectName: string) {\n    this.comment = comment;\n    this.date = yearMonth;\n    this.projectName = projectName;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "comment",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "yearMonth",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "projectName",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "comment",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "yearMonth",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "projectName",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "comment",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "date",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "projectName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ProjectEntry",
            "id": "class-ProjectEntry-d465e6806d7cf71a673751a5e788813cd74e9bc8be88c856469aa574280c24e685e3be6cc9820fc5685ed543049ff8bf9a84fb205d25c200bea8165cf934f543",
            "file": "src/app/domains/shared/data-model/ProjectEntry.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {ProjectState} from './ProjectState';\n\nexport type ProjectStepQualifier = 'CONTROL_PROJECT' | 'CONTROL_BILLING' | 'CREATE_COMPANY_CONTROLLING';\n\nexport class ProjectEntry {\n\n  state: ProjectState;\n  preset: boolean;\n  projectName: string;\n  step: ProjectStepQualifier;\n  currentMonthYear: string;\n\n  constructor(state: ProjectState, preset: boolean, projectName: string, step: ProjectStepQualifier, currentMonthYear: string) {\n    this.state = state;\n    this.preset = preset;\n    this.projectName = projectName;\n    this.step = step;\n    this.currentMonthYear = currentMonthYear;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "state",
                        "type": "ProjectState",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "preset",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "projectName",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "step",
                        "type": "ProjectStepQualifier",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "currentMonthYear",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "state",
                        "type": "ProjectState",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "preset",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "projectName",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "step",
                        "type": "ProjectStepQualifier",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "currentMonthYear",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "currentMonthYear",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "preset",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "projectName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ProjectState",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "step",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ProjectStepQualifier",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ProjectManagementEntry",
            "id": "class-ProjectManagementEntry-6feb41e748dc377adfa0eb7814be6e3fce4b48b6dce5fde4af3dae2735ebd262462cfec62b30ca129ce1214d21e57c76942d338c19d656b09dedc7fe44d2ff76",
            "file": "src/app/domains/project-management/data-model/ProjectManagementEntry.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {ManagementEntry, ProjectComment, ProjectState} from '@mega/shared/data-model';\n\n\nexport class ProjectManagementEntry {\n  zepId?: number;\n  projectName: string;\n  entries: Array<ManagementEntry>;\n  controlProjectState: ProjectState;\n  controlBillingState: ProjectState;\n  presetControlProjectState: boolean;\n  presetControlBillingState: boolean;\n  projectComment: ProjectComment;\n  aggregatedBillableWorkTimeInSeconds: number;\n  aggregatedNonBillableWorkTimeInSeconds: number;\n}\n",
            "properties": [
                {
                    "name": "aggregatedBillableWorkTimeInSeconds",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "aggregatedNonBillableWorkTimeInSeconds",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "controlBillingState",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ProjectState",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "controlProjectState",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ProjectState",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "entries",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<ManagementEntry>",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "presetControlBillingState",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "presetControlProjectState",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "projectComment",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ProjectComment",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "projectName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "zepId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ProjectStep",
            "id": "class-ProjectStep-0fc2b5f45a8db393d010c6489c239ee9d512f888caa653203f26a7dc83ddeb70fc92c03eb8274e38b9930485bdbc8709b238e2223115a60bde6010a62951b2bc",
            "file": "src/app/domains/shared/data-model/ProjectStep.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {Employee} from './Employee';\nimport {State} from './State';\n\nexport class ProjectStep {\n\n  stepId: number;\n  employee: Employee;\n  projectName: string;\n  currentMonthYear: string;\n  newState: State;\n\n  constructor(stepId: number, employee: Employee, projectName: string, currentMonthYear: string, newState: State) {\n    this.stepId = stepId;\n    this.employee = employee;\n    this.projectName = projectName;\n    this.currentMonthYear = currentMonthYear;\n    this.newState = newState;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "stepId",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "employee",
                        "type": "Employee",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "projectName",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "currentMonthYear",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "newState",
                        "type": "State",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "stepId",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "employee",
                        "type": "Employee",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "projectName",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "currentMonthYear",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "newState",
                        "type": "State",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "currentMonthYear",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "employee",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Employee",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "newState",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "State",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "projectName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "stepId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "UpdateEmployeeStep",
            "id": "class-UpdateEmployeeStep-c547d7e60f03aeaebc25118739290ebee498e25dda7b7a5570e1847e78006aa737beee259ef5eb3af5188d6d0f1d0cb9432f3fbd24bb7adda50320a89e69bb8d",
            "file": "src/app/domains/shared/data-model/UpdateEmployeeStep.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {Employee} from './Employee';\nimport {State} from './State';\n\nexport class UpdateEmployeeStep {\n\n  stepId: number;\n  employee: Employee;\n  currentMonthYear: string;\n  newState: State;\n  newStateReason?: string;\n\n  constructor(stepId: number, employee: Employee, currentMonthYear: string, newState: State, newStateReason?: string) {\n    this.stepId = stepId;\n    this.employee = employee;\n    this.currentMonthYear = currentMonthYear;\n    this.newState = newState;\n    this.newStateReason = newStateReason;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "stepId",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "employee",
                        "type": "Employee",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "currentMonthYear",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "newState",
                        "type": "State",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "newStateReason",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "stepId",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "employee",
                        "type": "Employee",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "currentMonthYear",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "newState",
                        "type": "State",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "newStateReason",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "currentMonthYear",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "employee",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Employee",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "newState",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "State",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "newStateReason",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "stepId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "User",
            "id": "class-User-2a78e9b891424e23e7d14abd882930345bf9af8eacf7728bf1b6bff09e2af5cca590f25306b25a19bd514b1b02fe5c9f5fd7f59e3640fa06bb3c327b19fce3ea",
            "file": "src/app/domains/shared/data-model/User.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {Role} from './Role';\n\nexport class User {\n  userId: string;\n  email: string;\n  firstname: string;\n  lastname: string;\n  roles: Role[];\n}\n",
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "firstname",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "lastname",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "roles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Role[]",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "userId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-ef226339baf2432c7cca9bf5012da1106e6f70e047e70a2aeddc0396817dfcfc0d1080022ffb52b7e3712e94363ed38b5c664f7c2626bd812fbd7ebac84edcfb",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "configServiceSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "HeaderComponent",
                    "type": "component"
                },
                {
                    "name": "InfoComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, OnDestroy, OnInit} from '@angular/core';\nimport {OAuthService} from 'angular-oauth2-oidc';\nimport {authConfig, cypressAuthConfig} from '@mega/shared/util-auth';\nimport {Router} from '@angular/router';\nimport {ConfigService, UserService} from '@mega/shared/data-service';\nimport {firstValueFrom, Subscription} from 'rxjs';\nimport {TranslateService} from '@ngx-translate/core';\nimport { InfoComponent } from './domains/shared/ui-common/info/info.component';\nimport { HeaderComponent } from './domains/shared/ui-common/header/header.component';\n\n@Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.scss'],\n    standalone: true,\n    imports: [HeaderComponent, InfoComponent]\n})\n\nexport class AppComponent implements OnInit, OnDestroy {\n\n  configServiceSubscription: Subscription;\n\n  constructor(private router: Router,\n              private oAuthService: OAuthService,\n              private configService: ConfigService,\n              private userService: UserService,\n              private translate: TranslateService) {\n    translate.addLangs(['de']);\n    translate.setDefaultLang('de');\n  }\n\n  async ngOnInit(): Promise<void> {\n    const config = await firstValueFrom(this.configService.getConfig());\n\n    this.oAuthService.configure({\n      clientId: config.clientId,\n      issuer: config.issuer,\n      scope: config.scope,\n      // @ts-ignore\n      ...(window.Cypress ? cypressAuthConfig : authConfig)\n    });\n\n    await this.oAuthService.loadDiscoveryDocumentAndTryLogin();\n    this.oAuthService.setupAutomaticSilentRefresh();\n\n    if (this.userService.loggedInWithGoogle()) {\n      this.userService.loginUser();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.configServiceSubscription?.unsubscribe();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "oAuthService",
                        "type": "OAuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "configService",
                        "type": "ConfigService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "oAuthService",
                        "type": "OAuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "configService",
                        "type": "ConfigService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<app-header></app-header>\n<app-info></app-info>\n"
        },
        {
            "name": "BillableTimesComponent",
            "id": "component-BillableTimesComponent-fb06e57b9f04c32c4580b68b5e7404dbadc98ca689f918a5da16e7b8c0b4509d303f93d3ab9df906850b2acf8a8ade374c91c18d9012e3d0f79404187a44f51a",
            "file": "src/app/domains/project-management/ui-common/billable-times/billable-times.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-billable-times",
            "styleUrls": [
                "./billable-times.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./billable-times.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "billableTimes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "nonBillableTimes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "transformTimeToFractionNumber",
                    "args": [
                        {
                            "name": "workingTime",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "workingTime",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "MatTooltipModule",
                    "type": "module"
                },
                {
                    "name": "NgIf"
                },
                {
                    "name": "DecimalPipe",
                    "type": "pipe"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input} from '@angular/core';\nimport {DecimalPipe, NgIf} from '@angular/common';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatIconModule} from '@angular/material/icon';\n\n@Component({\n  selector: 'app-billable-times',\n  templateUrl: './billable-times.component.html',\n  styleUrls: ['./billable-times.component.scss'],\n  standalone: true,\n  imports: [\n    MatIconModule,\n    MatTooltipModule,\n    NgIf,\n    DecimalPipe\n  ]\n})\nexport class BillableTimesComponent {\n\n  @Input() billableTimes: string;\n  @Input() nonBillableTimes: string;\n\n  transformTimeToFractionNumber(workingTime: string): number {\n    if (!workingTime) {\n      return undefined;\n    }\n\n    const spWorkingTime: string[] = workingTime.split(':');\n\n    if (spWorkingTime.length < 1) {\n      return 0;\n    }\n\n    return +(spWorkingTime[0]) + (+(spWorkingTime[1]) / 60);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'styles/colors';\n\ntable {\n  width: 100%;\n}\n\nth, td {\n  font-size: 17px;\n}\n\ntd.times-col-left {\n  text-align: right;\n  min-width: 50px;\n  white-space: nowrap;\n}\n\ntd.times-col-center {\n  text-align: right;\n  min-width: 10px;\n}\n\ntd.times-col-right {\n  text-align: right;\n  min-width: 40px;\n  width: 1%;\n  white-space: nowrap;\n}\n\na {\n  color: inherit;\n  text-decoration: none;\n}\n\na:hover {\n  color: $mega-success-green;\n}\n\n.headers-align .mat-expansion-panel-header-title,\n.headers-align .mat-expansion-panel-header-description {\n  flex-basis: 0;\n}\n\nmat-panel-title {\n  flex-grow: 0.5;\n}\n\nmat-panel-description {\n  flex-grow: 0.4;\n}\n\n.headers-align mat-expansion-panel-header {\n  margin-left: 10px;\n}\n\n.headers-align .mat-expansion-panel-header-description,\n.headers-align .mat-expansion-panel-header-title {\n  align-items: center;\n}\n\nmat-icon.billable {\n  color: $gepardec-yellow;\n}\n",
                    "styleUrl": "./billable-times.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<table>\n  <tr>\n    <td>\n      <mat-icon class=\"billable\"\n                matTooltip=\"Fakturierbar\"\n                matTooltipShowDelay=\"500\">monetization_on\n      </mat-icon>\n    </td>\n    <td *ngIf=\"billableTimes !== '00:00'\"\n        class=\"times-col-left\">{{transformTimeToFractionNumber(billableTimes) | number: '1.2-2' : 'de-AT'}}</td>\n    <td *ngIf=\"billableTimes === '00:00'\" class=\"times-col-left\">\n      <mat-icon>horizontal_rule</mat-icon>\n    </td>\n    <td class=\"times-col-center\">&nbsp;/&nbsp;</td>\n    <td *ngIf=\"nonBillableTimes !== '00:00'\"\n        class=\"times-col-right\">{{transformTimeToFractionNumber(nonBillableTimes) | number: '1.2-2' : 'de-AT'}}</td>\n    <td *ngIf=\"nonBillableTimes === '00:00'\" class=\"times-col-right\">\n      <mat-icon>horizontal_rule</mat-icon>\n    </td>\n  </tr>\n</table>\n"
        },
        {
            "name": "BillableTimesFractionComponent",
            "id": "component-BillableTimesFractionComponent-315818c0cb707c183de4d2060937cbae2298c4c063612bf30eb95fb73d9c0b87204412d8d8d7d7e95c9141d22f3a1b9fcd6932e6f8645a0f6f79452b2ab64052",
            "file": "src/app/domains/project-management/ui-common/billable-times-fraction/billable-times-fraction.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-billable-times-fraction",
            "styleUrls": [
                "./billable-times-fraction.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./billable-times-fraction.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "billableTimes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "nonBillableTimes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "MatTooltipModule",
                    "type": "module"
                },
                {
                    "name": "NgIf"
                },
                {
                    "name": "DecimalPipe",
                    "type": "pipe"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input} from '@angular/core';\nimport {DecimalPipe, NgIf} from '@angular/common';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatIconModule} from '@angular/material/icon';\n\n@Component({\n  selector: 'app-billable-times-fraction',\n  templateUrl: './billable-times-fraction.component.html',\n  styleUrls: ['./billable-times-fraction.component.scss'],\n  standalone: true,\n  imports: [\n    MatIconModule,\n    MatTooltipModule,\n    NgIf,\n    DecimalPipe\n  ]\n})\nexport class BillableTimesFractionComponent {\n\n  @Input() billableTimes: number;\n  @Input() nonBillableTimes: number;\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'styles/colors';\n\ntable {\n  width: 100%;\n}\n\nth, td {\n  font-size: 17px;\n}\n\ntd.times-col-left {\n  text-align: right;\n  min-width: 50px;\n  white-space: nowrap;\n}\n\ntd.times-col-center {\n  text-align: right;\n  min-width: 10px;\n}\n\ntd.times-col-right {\n  text-align: right;\n  min-width: 40px;\n  width: 1%;\n  white-space: nowrap;\n}\n\na {\n  color: inherit;\n  text-decoration: none;\n}\n\na:hover {\n  color: $mega-success-green;\n}\n\n.headers-align .mat-expansion-panel-header-title,\n.headers-align .mat-expansion-panel-header-description {\n  flex-basis: 0;\n}\n\nmat-panel-title {\n  flex-grow: 0.5;\n}\n\nmat-panel-description {\n  flex-grow: 0.4;\n}\n\n.headers-align mat-expansion-panel-header {\n  margin-left: 10px;\n}\n\n.headers-align .mat-expansion-panel-header-description,\n.headers-align .mat-expansion-panel-header-title {\n  align-items: center;\n}\n\nmat-icon.billable {\n  color: $gepardec-yellow;\n}\n",
                    "styleUrl": "./billable-times-fraction.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<table>\n  <tr>\n    <td>\n      <mat-icon class=\"billable\"\n                matTooltip=\"Fakturierbar\"\n                matTooltipShowDelay=\"500\">monetization_on\n      </mat-icon>\n    </td>\n    <td *ngIf=\"billableTimes !== 0\" class=\"times-col-left\">{{billableTimes | number: '1.2-2' : 'de-AT'}}</td>\n    <td *ngIf=\"billableTimes === 0\" class=\"times-col-left\">\n      <mat-icon>horizontal_rule</mat-icon>\n    </td>\n    <td class=\"times-col-center\">&nbsp;/&nbsp;</td>\n    <td *ngIf=\"nonBillableTimes !== 0\" class=\"times-col-right\">{{nonBillableTimes | number: '1.2-2' : 'de-AT'}}</td>\n    <td *ngIf=\"nonBillableTimes === 0\" class=\"times-col-right\">\n      <mat-icon>horizontal_rule</mat-icon>\n    </td>\n  </tr>\n</table>\n"
        },
        {
            "name": "CommentsForEmployeeComponent",
            "id": "component-CommentsForEmployeeComponent-fa2690dfeb3c566c5444470e184bbed3ac4a1611126e33d88f1398a824628379dc0f270fc1eabffe0fbf224901bec798a7e42b1d0e5af7593c65048da188e332",
            "file": "src/app/domains/shared/ui-common/comments-for-employee/comments-for-employee.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-comments-for-employee",
            "styleUrls": [
                "./comments-for-employee.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./comments-for-employee.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "commentHasChanged",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "EventEmitter<void>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "comments",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<Comment>",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "currentMonthYear",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 55,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<CommentsForEmployeeComponent>",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "employee",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Employee",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "MAXIMUM_LETTERS",
                    "defaultValue": "500",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "newCommentTextarea",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'newMessage'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "project",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "State",
                    "defaultValue": "State",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "step",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Step",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User",
                    "optional": false,
                    "description": "",
                    "line": 46
                }
            ],
            "methodsClass": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 121,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "createCommentForEmployee",
                    "args": [
                        {
                            "name": "comment",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "comment",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteCommentOfEmployee",
                    "args": [
                        {
                            "name": "commentToRemove",
                            "type": "Comment",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "commentToRemove",
                            "type": "Comment",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "editCommentBtnVisible",
                    "args": [
                        {
                            "name": "comment",
                            "type": "Comment",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "comment",
                            "type": "Comment",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isReleased",
                    "args": [
                        {
                            "name": "date",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "monthDiff",
                    "args": [
                        {
                            "name": "d1",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "d2",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 135,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "d1",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "d2",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "parseAnchorTags",
                    "args": [
                        {
                            "name": "plainText",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "plainText",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleIsEditing",
                    "args": [
                        {
                            "name": "comment",
                            "type": "Comment",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "comment",
                            "type": "Comment",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateCommentForEmployee",
                    "args": [
                        {
                            "name": "comment",
                            "type": "Comment",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "comment",
                            "type": "Comment",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "NgIf"
                },
                {
                    "name": "MatDialogModule",
                    "type": "module"
                },
                {
                    "name": "MatFormFieldModule",
                    "type": "module"
                },
                {
                    "name": "TextFieldModule",
                    "type": "module"
                },
                {
                    "name": "MatInputModule",
                    "type": "module"
                },
                {
                    "name": "MatTooltipModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "NgFor"
                },
                {
                    "name": "StateIndicatorComponent",
                    "type": "component"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "DatePipe",
                    "type": "pipe"
                },
                {
                    "name": "TranslateModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, OnInit, Output, ViewChild} from '@angular/core';\nimport {Comment, Employee, State, Step, User} from '@mega/shared/data-model';\nimport {CommentService, UserService} from '@mega/shared/data-service';\nimport {MatDialog, MatDialogModule, MatDialogRef} from '@angular/material/dialog';\nimport {ConfirmDialogComponent} from '../confirm-dialog/confirm-dialog.component';\nimport {TranslateModule} from '@ngx-translate/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {StateIndicatorComponent} from '../state-indicator/state-indicator.component';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatInputModule} from '@angular/material/input';\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {DatePipe, NgFor, NgIf} from '@angular/common';\n\n@Component({\n  selector: 'app-comments-for-employee',\n  templateUrl: './comments-for-employee.component.html',\n  styleUrls: ['./comments-for-employee.component.scss'],\n  standalone: true,\n  imports: [\n    NgIf,\n    MatDialogModule,\n    MatFormFieldModule,\n    TextFieldModule,\n    MatInputModule,\n    MatTooltipModule,\n    MatButtonModule,\n    NgFor,\n    StateIndicatorComponent,\n    MatIconModule,\n    DatePipe,\n    TranslateModule\n  ]\n})\nexport class CommentsForEmployeeComponent implements OnInit {\n\n  @Output() commentHasChanged: EventEmitter<void> = new EventEmitter<void>();\n  @ViewChild('newMessage') newCommentTextarea;\n\n  State = State;\n\n  MAXIMUM_LETTERS: number = 500;\n\n  employee: Employee;\n  user: User;\n  comments: Array<Comment>;\n  step: Step;\n  project: string = '';\n  currentMonthYear: string;\n\n  constructor(private commentService: CommentService,\n              private userService: UserService,\n              public dialogRef: MatDialogRef<CommentsForEmployeeComponent>,\n              public dialog: MatDialog) {\n  }\n\n  ngOnInit(): void {\n    this.comments = JSON.parse(JSON.stringify(this.comments || null));\n    if (this.comments) {\n      this.comments.forEach(comment => comment.isEditing = false);\n    }\n\n    this.userService.user.subscribe((user) => {\n      this.user = user;\n    });\n  }\n\n  toggleIsEditing(comment: Comment): void {\n    comment.isEditing = !comment.isEditing;\n  }\n\n  editCommentBtnVisible(comment: Comment): boolean {\n    return !comment.isEditing && this.user.email === comment.authorEmail && comment.state !== State.DONE;\n  }\n\n  isReleased(date: string): boolean {\n    const today = new Date();\n    const releaseDate = new Date(date);\n    const monthDiff = this.monthDiff(releaseDate, today);\n    return (monthDiff === 1 || monthDiff === 0 || releaseDate > today);\n  }\n\n  parseAnchorTags(plainText): string {\n    let startingWithHttpHttpsOrFtpPattern = /(\\b(https?|ftp):\\/\\/[-A-Z0-9+&@#\\/%?=~_|!:,.;]*[-A-Z0-9+&@#\\/%=~_|])/gim;\n    let replacedText = plainText.replace(startingWithHttpHttpsOrFtpPattern, '<a href=\"$1\" target=\"_blank\">$1</a>');\n\n    let startingWithWwwPattern = /(^|[^\\/])(www\\.[\\S]+(\\b|$))/gim;\n    replacedText = replacedText.replace(startingWithWwwPattern, '$1<a href=\"http://$2\" target=\"_blank\">$2</a>');\n\n    let emailAddressPattern = /(([a-zA-Z0-9\\-\\_\\.])+@[a-zA-Z\\_]+?(\\.[a-zA-Z]{2,6})+)/gim;\n    replacedText = replacedText.replace(emailAddressPattern, '<a href=\"mailto:$1\">$1</a>');\n\n    return replacedText;\n  }\n\n  createCommentForEmployee(comment: string): void {\n    this.commentService\n      .createNewComment(this.employee, comment, this.user.email, this.step, this.project, this.currentMonthYear)\n      .subscribe(() => {\n        this.commentHasChanged.emit();\n        this.commentService.getCommentsForEmployee(this.employee.email, this.currentMonthYear).subscribe((comments: Array<Comment>) => {\n          this.comments = comments;\n        });\n      });\n  }\n\n  updateCommentForEmployee(comment: Comment): void {\n    this.commentService.updateComment(comment).subscribe(() => {\n      this.commentHasChanged.emit();\n    });\n  }\n\n  deleteCommentOfEmployee(commentToRemove: Comment): void {\n    this.commentService.deleteComment(commentToRemove).subscribe(() => {\n      this.comments = this.comments.filter(item => item.id !== commentToRemove.id);\n    });\n    this.commentHasChanged.emit();\n  }\n\n  close(): void {\n    if (this.newCommentTextarea?.nativeElement.value !== '') {\n      const dialogRef = this.dialog.open(ConfirmDialogComponent, {});\n\n      dialogRef.afterClosed().subscribe(dialogResult => {\n        if (dialogResult === true) {\n          this.dialogRef.close(dialogResult);\n        }\n      });\n    } else {\n      this.dialogRef.close(true);\n    }\n  }\n\n  private monthDiff(d1: Date, d2: Date) {\n    let months = (d2.getFullYear() - d1.getFullYear()) * 12;\n    months -= d1.getMonth();\n    months += d2.getMonth();\n    return Math.abs(months);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'styles/colors';\n\nmat-form-field {\n  width: 100%;\n}\n\n.saveBtn {\n  background-color: $mega-success-green;\n  color: white;\n}\n\npre {\n  font-family: inherit;\n  margin-top: 15px;\n}\n\nth, td {\n  font-size: 17px;\n}\n\ntable {\n  width: 100%;\n}\n\n.dialog_content {\n  padding-top: 10px;\n}\n\ntr.mat-mdc-header-row {\n  height: 56px;\n}\n",
                    "styleUrl": "./comments-for-employee.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "commentService",
                        "type": "CommentService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<CommentsForEmployeeComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 50,
                "jsdoctags": [
                    {
                        "name": "commentService",
                        "type": "CommentService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<CommentsForEmployeeComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-container *ngIf=\"comments && employee\">\n  <h2 mat-dialog-title>{{'comments-for-employee.commentsFor' | translate:{'firstAndSureName': employee.firstname + \" \" + employee.lastname} }}</h2>\n\n\n  <mat-dialog-content class=\"dialog_content\">\n    <div>\n      <mat-form-field appearance=\"outline\">\n        <mat-label>{{'comments-for-employee.writeCommentLabel'|translate}}</mat-label>\n        <textarea\n          #newMessage\n          [maxLength]=\"MAXIMUM_LETTERS\"\n          cdkAutosizeMaxRows=\"10\"\n          cdkAutosizeMinRows=\"5\"\n          cdkTextareaAutosize\n          matInput></textarea>\n        <mat-hint align=\"end\">{{newMessage.value.length}} / {{MAXIMUM_LETTERS}}</mat-hint>\n      </mat-form-field>\n\n      <span [matTooltipDisabled]=\"!(newMessage?.value?.length === 0 || newMessage?.value?.length > MAXIMUM_LETTERS)\"\n            [matTooltipPosition]=\"'right'\"\n            matTooltip=\"{{'comments-for-employee.characterRangeTooltip' | translate}}\">\n        <button\n          (click)=\"createCommentForEmployee(newMessage.value);newMessage.value = ''\"\n          [disabled]=\"newMessage?.value?.length === 0 || newMessage?.value?.length > MAXIMUM_LETTERS\"\n          data-cy=\"add-comment\"\n          mat-raised-button>\n          {{'comments-for-employee.addCommentBtn' | translate}}\n        </button>\n      </span>\n    </div>\n    <table *ngIf=\"comments.length > 0; else noCommentsFound\" class=\"mat-table mt-10\" data-cy=\"employee-comments\">\n\n      <tr class=\"mat-mdc-header-row\">\n        <th class=\"mat-mdc-header-cell mdc-data-table__header-cell text-center\"\n            scope=\"col\">{{'comments-for-employee.table.lastChanged' | translate}}</th>\n        <th class=\"mat-mdc-header-cell mdc-data-table__header-cell text-center\"\n            scope=\"col\">{{'comments-for-employee.table.author' | translate}}</th>\n        <th class=\"mat-mdc-header-cell mdc-data-table__header-cell text-center\"\n            scope=\"col\">{{'comments-for-employee.table.done' | translate}}</th>\n        <th class=\"mat-mdc-header-cell mdc-data-table__header-cell text-center\"\n            scope=\"col\">{{'comments-for-employee.table.comment' | translate}}</th>\n        <th class=\"mat-mdc-header-cell mdc-data-table__header-cell text-center\"\n            scope=\"col\">{{'comments-for-employee.table.edit' | translate}}</th>\n        <th class=\"mat-mdc-header-cell mdc-data-table__header-cell text-center\"\n            scope=\"col\">{{'comments-for-employee.table.delete' | translate}}</th>\n      </tr>\n\n      <tr *ngFor=\"let comment of comments\" class=\"mat-row\">\n        <td class=\"mdc-data-table__cell text-center\">\n          <p>{{comment.updateDate | date:'dd.LL.yyyy, HH:mm'}}</p>\n        </td>\n\n        <td class=\"mdc-data-table__cell text-center\">\n          <p>{{comment.authorName}}</p>\n        </td>\n\n        <td class=\"mdc-data-table__cell text-center\">\n          <app-state-indicator [state]=\"comment.state\"></app-state-indicator>\n        </td>\n\n        <td class=\"mdc-data-table__cell text-center\">\n          <pre [hidden]=\"comment.isEditing\" [innerHTML]=\"parseAnchorTags(comment.message)\"\n               style=\"white-space: pre-wrap\">{{comment.message}}</pre>\n          <div [hidden]=\"!comment.isEditing\">\n            <mat-form-field>\n              <textarea\n                #editMessageInput\n                [maxLength]=\"MAXIMUM_LETTERS\"\n                [placeholder]=\"'comments-for-employee.editCommentLabel' | translate\"\n                [value]=\"comment.message\"\n                cdkAutosizeMaxRows=\"15\"\n                cdkAutosizeMinRows=\"5\"\n                cdkTextareaAutosize\n                matInput></textarea>\n              <mat-hint *ngIf=\"comment.isEditing\" align=\"end\">{{editMessageInput.value.length}}\n                / {{MAXIMUM_LETTERS}}</mat-hint>\n            </mat-form-field>\n          </div>\n        </td>\n\n        <td class=\"mdc-data-table__cell text-center\">\n          <ng-container *ngIf=\"comment.isEditing\">\n            <button\n              (click)=\"comment.message = editMessageInput.value; toggleIsEditing(comment); updateCommentForEmployee(comment);\"\n              [disabled]=\"editMessageInput.value.length === 0 || editMessageInput.value.length > MAXIMUM_LETTERS\"\n              aria-label=\"done\"\n              mat-icon-button>\n              <mat-icon>done</mat-icon>\n            </button>\n            <button (click)=\"editMessageInput.value = comment.message; toggleIsEditing(comment);\" aria-label=\"clear\"\n                    mat-icon-button>\n              <mat-icon>clear</mat-icon>\n            </button>\n          </ng-container>\n          <button (click)=\"toggleIsEditing(comment)\" *ngIf=\"editCommentBtnVisible(comment)\" aria-label=\"edit\"\n                  mat-icon-button>\n            <mat-icon>edit</mat-icon>\n          </button>\n        </td>\n\n        <td class=\"mdc-data-table__cell text-center\">\n          <button (click)=\"deleteCommentOfEmployee(comment)\" *ngIf=\"editCommentBtnVisible(comment)\" aria-label=\"delete\"\n                  mat-icon-button>\n            <mat-icon>delete</mat-icon>\n          </button>\n        </td>\n      </tr>\n    </table>\n\n    <ng-template #noCommentsFound>\n      <p class=\"mt-10\">{{'comments-for-employee.noCommentsYet' | translate}}</p>\n    </ng-template>\n  </mat-dialog-content>\n\n  <mat-dialog-actions align=\"end\">\n    <button (click)=\"close()\" data-cy=\"close\" mat-raised-button>{{'comments-for-employee.close' | translate}}</button>\n  </mat-dialog-actions>\n</ng-container>\n"
        },
        {
            "name": "ConfirmDialogComponent",
            "id": "component-ConfirmDialogComponent-5e394d49bd8c3111a1fe062f2f8cc3aef06aefdd49cc9551b9f80d0119821170467bd25b75fa2b2c7324c29cf3452a9be635bcc09e3944c2063a996fde0d9258",
            "file": "src/app/domains/shared/ui-common/confirm-dialog/confirm-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-confirm-dialog",
            "styleUrls": [
                "./confirm-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./confirm-dialog.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<ConfirmDialogComponent>",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "onConfirm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onDismiss",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "MatDialogModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "TranslateModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {MatDialogModule, MatDialogRef} from '@angular/material/dialog';\nimport {Component} from '@angular/core';\nimport {TranslateModule} from '@ngx-translate/core';\nimport {MatButtonModule} from '@angular/material/button';\n\n@Component({\n  selector: 'app-confirm-dialog',\n  templateUrl: './confirm-dialog.component.html',\n  styleUrls: ['./confirm-dialog.component.scss'],\n  standalone: true,\n  imports: [\n    MatDialogModule,\n    MatButtonModule,\n    TranslateModule\n  ]\n})\nexport class ConfirmDialogComponent {\n\n  constructor(public dialogRef: MatDialogRef<ConfirmDialogComponent>) {\n  }\n\n  onConfirm(): void {\n    this.dialogRef.close(true);\n  }\n\n  onDismiss(): void {\n    this.dialogRef.close(false);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./confirm-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<ConfirmDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<ConfirmDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<h1 mat-dialog-title>{{'confirm-dialog.title' | translate}}</h1>\n\n<div mat-dialog-content>\n  <p>{{'confirm-dialog.message' | translate}}</p>\n</div>\n\n<div mat-dialog-actions>\n  <button (click)=\"onDismiss()\" mat-button>{{'confirm-dialog.dismiss' | translate}}</button>\n  <button (click)=\"onConfirm()\" color=\"primary\" mat-raised-button>{{'confirm-dialog.confirm' | translate}}</button>\n</div>\n"
        },
        {
            "name": "DatepickerComponent",
            "id": "component-DatepickerComponent-5580bde83b83e76ebd93f1bec02ce6cb74bd975afd74020ae13e3c9bb0171c299d4c57f8a45dedc18fbc5d3a7c3c658198b5dd72adabfdee3eaa7492690099f5",
            "file": "src/app/domains/shared/ui-common/datepicker/datepicker.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-datepicker",
            "styleUrls": [
                "./datepicker.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./datepicker.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "selectedDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "dateEmitter",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "EventEmitter<string>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "datePicker",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDatepicker<Date>",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'picker'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "today",
                    "defaultValue": "new Date()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 28
                }
            ],
            "methodsClass": [
                {
                    "name": "emitEvent",
                    "args": [
                        {
                            "name": "date",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDateAndEmitEvent",
                    "args": [
                        {
                            "name": "event",
                            "type": "MatDatepickerInputEvent<Date>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MatDatepickerInputEvent<Date>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "MatFormFieldModule",
                    "type": "module"
                },
                {
                    "name": "MatInputModule",
                    "type": "module"
                },
                {
                    "name": "MatDatepickerModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, Output, ViewChild} from '@angular/core';\nimport {MatDatepicker, MatDatepickerInputEvent, MatDatepickerModule} from '@angular/material/datepicker';\nimport {configuration} from '@mega/shared/util-constant';\n\nimport * as _moment from 'moment';\nimport {MatInputModule} from '@angular/material/input';\nimport {MatFormFieldModule} from '@angular/material/form-field';\n\nconst moment = _moment;\n\n@Component({\n  selector: 'app-datepicker',\n  templateUrl: './datepicker.component.html',\n  styleUrls: ['./datepicker.component.scss'],\n  standalone: true,\n  imports: [\n    MatFormFieldModule,\n    MatInputModule,\n    MatDatepickerModule\n  ]\n})\nexport class DatepickerComponent {\n\n  @Input() selectedDate: string;\n  @Output() dateEmitter: EventEmitter<string> = new EventEmitter<string>();\n  @ViewChild('picker') datePicker: MatDatepicker<Date>;\n\n  today: Date = new Date();\n\n  emitEvent(date: string): void {\n    this.dateEmitter.emit(date);\n  }\n\n  getDateAndEmitEvent(event: MatDatepickerInputEvent<Date>) {\n    const date: string = moment(event.value).format(configuration.dateFormat);\n    this.emitEvent(date);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./datepicker.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<mat-form-field subscriptSizing=\"dynamic\">\n  <input (dateChange)=\"getDateAndEmitEvent($event)\" [matDatepicker]=\"picker\" [max]=\"today\" [value]=\"selectedDate\"\n         disabled\n         matInput>\n  <mat-datepicker-toggle [for]=\"picker\" matSuffix></mat-datepicker-toggle>\n  <mat-datepicker #picker disabled=\"false\"></mat-datepicker>\n</mat-form-field>\n"
        },
        {
            "name": "DatepickerMonthYearComponent",
            "id": "component-DatepickerMonthYearComponent-36ac92b36f1f57a3bd2b894d7b58f01f49b2cbdcb59b792b51af76b32450e6597229d2d6421969a33fa7e43ab406846dc35d4ddc2581ecb3744b8aae962e716d",
            "file": "src/app/domains/shared/ui-common/datepicker-month-year/datepicker-month-year.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: DateAdapter, useClass: MomentDateAdapter, deps: [MAT_DATE_LOCALE, MAT_MOMENT_DATE_ADAPTER_OPTIONS]\n}"
                },
                {
                    "name": "{ provide: MAT_DATE_FORMATS, useValue: MY_FORMATS }"
                },
                {
                    "name": "{ provide: MAT_DATE_LOCALE, useValue:  }"
                }
            ],
            "selector": "app-datepicker-month-year",
            "styleUrls": [
                "./datepicker-month-year.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./datepicker-month-year.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "date",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 52,
                    "type": "Moment",
                    "decorators": []
                },
                {
                    "name": "maxMonth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 53,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "dateChanged",
                    "defaultValue": "new EventEmitter<Moment>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 54,
                    "type": "EventEmitter<Moment>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "dateControl",
                    "defaultValue": "new FormControl(moment().subtract(1, 'month'))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "datePicker",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDatepicker<any>",
                    "optional": false,
                    "description": "",
                    "line": 55,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'dp'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "maxDate",
                    "defaultValue": "moment().format(configuration.dateFormat)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 58
                }
            ],
            "methodsClass": [
                {
                    "name": "chosenMonthHandler",
                    "args": [
                        {
                            "name": "normalizedMonth",
                            "type": "Moment",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "datepicker",
                            "type": "MatDatepicker<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "normalizedMonth",
                            "type": "Moment",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "datepicker",
                            "type": "MatDatepicker<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "chosenYearHandler",
                    "args": [
                        {
                            "name": "normalizedYear",
                            "type": "Moment",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "normalizedYear",
                            "type": "Moment",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "MatFormFieldModule",
                    "type": "module"
                },
                {
                    "name": "MatInputModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "MatDatepickerModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges, ViewChild} from '@angular/core';\n\nimport {FormControl, FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {MAT_MOMENT_DATE_ADAPTER_OPTIONS, MomentDateAdapter} from '@angular/material-moment-adapter';\nimport {DateAdapter, MAT_DATE_FORMATS, MAT_DATE_LOCALE} from '@angular/material/core';\nimport {MatDatepicker, MatDatepickerModule} from '@angular/material/datepicker';\n\nimport * as _moment from 'moment';\nimport {Moment} from 'moment';\nimport {configuration} from '@mega/shared/util-constant';\nimport {MatInputModule} from '@angular/material/input';\nimport {MatFormFieldModule} from '@angular/material/form-field';\n\nconst moment = _moment;\n\nexport const MY_FORMATS = {\n  parse: {\n    dateInput: 'YYYY-MM',\n  },\n  display: {\n    dateInput: 'MMMM YYYY',\n    monthYearLabel: 'MMM YYYY',\n    dateA11yLabel: 'LL',\n    monthYearA11yLabel: 'MMMM YYYY',\n  },\n};\n\n@Component({\n  selector: 'app-datepicker-month-year',\n  templateUrl: './datepicker-month-year.component.html',\n  styleUrls: ['./datepicker-month-year.component.scss'],\n  providers: [\n    {\n      provide: DateAdapter,\n      useClass: MomentDateAdapter,\n      deps: [MAT_DATE_LOCALE, MAT_MOMENT_DATE_ADAPTER_OPTIONS]\n    },\n    {provide: MAT_DATE_FORMATS, useValue: MY_FORMATS},\n    {provide: MAT_DATE_LOCALE, useValue: 'de-AT'}\n  ],\n  standalone: true,\n  imports: [\n    MatFormFieldModule,\n    MatInputModule,\n    FormsModule,\n    MatDatepickerModule,\n    ReactiveFormsModule\n  ]\n})\nexport class DatepickerMonthYearComponent implements OnChanges, OnInit {\n\n  @Input() date: Moment;\n  @Input() maxMonth: number;\n  @Output() dateChanged: EventEmitter<Moment> = new EventEmitter<Moment>();\n  @ViewChild('dp') datePicker: MatDatepicker<any>;\n\n  dateControl = new FormControl(moment().subtract(1, 'month'));\n  maxDate = moment().format(configuration.dateFormat);\n\n  ngOnInit() {\n    this.maxDate = moment().subtract(this.maxMonth, 'month').format(configuration.dateFormat);\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.dateControl.setValue(this.date.subtract(1, 'month'));\n  }\n\n  chosenYearHandler(normalizedYear: Moment) {\n    const ctrlValue = this.dateControl.value;\n    ctrlValue.year(normalizedYear.year());\n    this.dateControl.setValue(ctrlValue);\n  }\n\n  chosenMonthHandler(normalizedMonth: Moment, datepicker: MatDatepicker<any>) {\n    const ctrlValue = this.dateControl.value;\n    ctrlValue.year(normalizedMonth.year());\n    ctrlValue.month(normalizedMonth.month());\n    this.dateControl.setValue(ctrlValue);\n    datepicker.close();\n\n    const changedDate = moment(this.dateControl.value);\n    this.dateChanged.emit(changedDate);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./datepicker-month-year.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnChanges",
                "OnInit"
            ],
            "templateData": "<mat-form-field subscriptSizing=\"dynamic\">\n  <input [formControl]=\"dateControl\" [matDatepicker]=\"dp\" [max]=\"maxDate\" matInput>\n  <mat-datepicker-toggle [for]=\"dp\" matSuffix></mat-datepicker-toggle>\n  <mat-datepicker #dp\n                  (monthSelected)=\"chosenMonthHandler($event, dp)\"\n                  (yearSelected)=\"chosenYearHandler($event)\"\n                  panelClass=\"example-month-picker\"\n                  startView=\"year\">\n  </mat-datepicker>\n</mat-form-field>\n"
        },
        {
            "name": "DoneCommentsIndicatorComponent",
            "id": "component-DoneCommentsIndicatorComponent-ef89188991f034fa1abbbd05b047cd2dd79ace60093e88829571ab6bc0f1bf559c005659ef4982c41a9fb8037de027dca6bd70760af858ae122e3e5fb67b98f1",
            "file": "src/app/domains/shared/ui-common/done-comments-indicator/done-comments-indicator.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-done-comments-indicator",
            "styleUrls": [
                "./done-comments-indicator.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./done-comments-indicator.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "finishedComments",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "totalComments",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "NgIf"
                },
                {
                    "name": "NgClass"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input} from '@angular/core';\nimport {NgClass, NgIf} from '@angular/common';\n\n@Component({\n  selector: 'app-done-comments-indicator',\n  templateUrl: './done-comments-indicator.component.html',\n  styleUrls: ['./done-comments-indicator.component.scss'],\n  standalone: true,\n  imports: [\n    NgIf,\n    NgClass\n  ]\n})\nexport class DoneCommentsIndicatorComponent {\n\n  @Input() totalComments: number;\n  @Input() finishedComments: number;\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./done-comments-indicator.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<span\n  *ngIf=\"totalComments > 0; else noCommentsYet\"\n  [ngClass]=\"{'red': finishedComments < totalComments, 'green': finishedComments === totalComments}\">\n  {{finishedComments}} / {{totalComments}}\n</span>\n<ng-template #noCommentsYet>\n  <span> &minus; / &minus;</span>\n</ng-template>\n"
        },
        {
            "name": "EmployeeCardComponent",
            "id": "component-EmployeeCardComponent-3a6c001afc0d9b39b930b6819ff555e5c388efac2ea0ec053c5dd6bca5c8a76ced33d2e0c7f307e51cf3aa695794fdeb0e1aac26ef45e2aa42d52e1a3c0c018b",
            "file": "src/app/domains/office-management/feature-office-management/employee-card/employee-card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-employee-card",
            "styleUrls": [
                "./employee-card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./employee-card.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "configuration",
                    "defaultValue": "configuration",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 85
                },
                {
                    "name": "dateSelectionSub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 88
                },
                {
                    "name": "dayOfMonthForWarning",
                    "defaultValue": "5",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 84
                },
                {
                    "name": "displayedColumns",
                    "defaultValue": "[\n    'select',\n    'name',\n    'internalCheckState',\n    'employeeCheckState',\n    'projectCheckState',\n    'actions',\n    'releaseDate'\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 69
                },
                {
                    "name": "employeeProgressRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatBottomSheetRef",
                    "optional": false,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "filteredOmEntries",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<ManagementEntry>",
                    "optional": false,
                    "description": "",
                    "line": 81
                },
                {
                    "name": "officeManagementUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 79
                },
                {
                    "name": "omEntries",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<ManagementEntry>",
                    "optional": false,
                    "description": "",
                    "line": 80
                },
                {
                    "name": "omSelectionModel",
                    "defaultValue": "new SelectionModel<ManagementEntry>(true, [])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 82
                },
                {
                    "name": "selectedDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 83
                },
                {
                    "name": "selectedMonth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 87
                },
                {
                    "name": "selectedYear",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 86
                },
                {
                    "name": "State",
                    "defaultValue": "State",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 65
                }
            ],
            "methodsClass": [
                {
                    "name": "areAllSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 132,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "changeDate",
                    "args": [
                        {
                            "name": "emittedDate",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 169,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "emittedDate",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "closeEmployeeProgress",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 238,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "dateChanged",
                    "args": [
                        {
                            "name": "date",
                            "type": "Moment",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 126,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Moment",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "filterOmEntriesByEmployeeName",
                    "args": [
                        {
                            "name": "filterString",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 173,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "filterString",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFilteredAndSortedOmEntries",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 261,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getFormattedDate",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 242,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getOmEntries",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 246,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getReleaseDateCssClass",
                    "args": [
                        {
                            "name": "date",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 185,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleGetOmEntriesResult",
                    "args": [
                        {
                            "name": "omEntries",
                            "type": "Array<ManagementEntry>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 216,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "omEntries",
                            "type": "Array<ManagementEntry>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "masterToggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 136,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "monthDiff",
                    "args": [
                        {
                            "name": "d1",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "d2",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 254,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "d1",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "d2",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openDialog",
                    "args": [
                        {
                            "name": "omEntry",
                            "type": "ManagementEntry",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 140,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "omEntry",
                            "type": "ManagementEntry",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openEmployeeProgress",
                    "args": [
                        {
                            "name": "omEntry",
                            "type": "ManagementEntry",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 230,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "omEntry",
                            "type": "ManagementEntry",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "releaseEmployees",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 198,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "updateInternalCheck",
                    "args": [
                        {
                            "name": "$event",
                            "type": "MatSelectChange",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "omEntry",
                            "type": "ManagementEntry",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 221,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "MatSelectChange",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "omEntry",
                            "type": "ManagementEntry",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "MatCardModule",
                    "type": "module"
                },
                {
                    "name": "NgIf"
                },
                {
                    "name": "NgxSkeletonLoaderModule",
                    "type": "module"
                },
                {
                    "name": "MatToolbarModule",
                    "type": "module"
                },
                {
                    "name": "MatFormFieldModule",
                    "type": "module"
                },
                {
                    "name": "MatInputModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "DatepickerComponent",
                    "type": "component"
                },
                {
                    "name": "MatTableModule",
                    "type": "module"
                },
                {
                    "name": "MatCheckboxModule",
                    "type": "module"
                },
                {
                    "name": "StateSelectComponent",
                    "type": "component"
                },
                {
                    "name": "MatTooltipModule",
                    "type": "module"
                },
                {
                    "name": "StateIndicatorComponent",
                    "type": "component"
                },
                {
                    "name": "DoneCommentsIndicatorComponent",
                    "type": "component"
                },
                {
                    "name": "NgClass"
                },
                {
                    "name": "DatePipe",
                    "type": "pipe"
                },
                {
                    "name": "TranslateModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, OnDestroy, OnInit} from '@angular/core';\nimport {Config, ManagementEntry, State, Step} from '@mega/shared/data-model';\nimport {MatDialog} from '@angular/material/dialog';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {configuration} from '@mega/shared/util-constant';\nimport {OfficeManagementService} from '@mega/office-management/data-service';\nimport {CommentService, ConfigService, NotificationService, StepEntriesService} from '@mega/shared/data-service';\nimport {TranslateModule, TranslateService} from '@ngx-translate/core';\nimport {\n  CommentsForEmployeeComponent,\n  DatepickerComponent,\n  DoneCommentsIndicatorComponent,\n  PmProgressComponent,\n  StateIndicatorComponent,\n  StateSelectComponent\n} from '@mega/shared/ui-common';\n\nimport * as _moment from 'moment';\nimport {Moment} from 'moment';\nimport {MatBottomSheet, MatBottomSheetRef} from '@angular/material/bottom-sheet';\nimport {finalize, firstValueFrom, mergeMap, Subscription, switchMap, zip} from 'rxjs';\nimport {tap} from 'rxjs/operators';\nimport {MatSelectChange} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatCheckboxModule} from '@angular/material/checkbox';\nimport {MatTableModule} from '@angular/material/table';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatInputModule} from '@angular/material/input';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatToolbarModule} from '@angular/material/toolbar';\nimport {NgxSkeletonLoaderModule} from 'ngx-skeleton-loader';\nimport {DatePipe, NgClass, NgIf} from '@angular/common';\nimport {MatCardModule} from '@angular/material/card';\n\nconst moment = _moment;\n\n@Component({\n  selector: 'app-employee-card',\n  templateUrl: './employee-card.component.html',\n  styleUrls: ['./employee-card.component.scss'],\n  standalone: true,\n  imports: [\n    MatCardModule,\n    NgIf,\n    NgxSkeletonLoaderModule,\n    MatToolbarModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatButtonModule,\n    MatIconModule,\n    DatepickerComponent,\n    MatTableModule,\n    MatCheckboxModule,\n    StateSelectComponent,\n    MatTooltipModule,\n    StateIndicatorComponent,\n    DoneCommentsIndicatorComponent,\n    NgClass,\n    DatePipe,\n    TranslateModule\n  ]\n})\nexport class EmployeeCardComponent implements OnInit, OnDestroy {\n  State = State;\n\n  employeeProgressRef: MatBottomSheetRef;\n\n  displayedColumns = [\n    'select',\n    'name',\n    'internalCheckState',\n    'employeeCheckState',\n    'projectCheckState',\n    'actions',\n    'releaseDate'\n  ];\n\n  officeManagementUrl: string;\n  omEntries: Array<ManagementEntry>;\n  filteredOmEntries: Array<ManagementEntry>;\n  omSelectionModel = new SelectionModel<ManagementEntry>(true, []);\n  selectedDate: string;\n  dayOfMonthForWarning = 5;\n  configuration = configuration;\n  selectedYear: number;\n  selectedMonth: number;\n  dateSelectionSub: Subscription;\n\n  constructor(\n    private dialog: MatDialog,\n    private omService: OfficeManagementService,\n    private notificationService: NotificationService,\n    private translateService: TranslateService,\n    private commentService: CommentService,\n    private stepEntryService: StepEntriesService,\n    private _bottomSheet: MatBottomSheet,\n    private configService: ConfigService) {\n  }\n\n  ngOnInit(): void {\n    this.configService.getConfig().subscribe((config: Config) => {\n      this.officeManagementUrl = config.zepOrigin + '/' + configuration.OFFICE_MANAGEMENT_SEGMENT;\n    });\n\n    this.dateSelectionSub = zip(this.omService.selectedYear, this.omService.selectedMonth)\n      .pipe(\n        tap(value => {\n          this.selectedYear = value[0];\n          this.selectedMonth = value[1];\n        }),\n        tap(() => {\n          this.omEntries = null;\n          this.filteredOmEntries = null;\n        }),\n        switchMap(() => this.getOmEntries())\n      ).subscribe(omEntries => {\n        this.handleGetOmEntriesResult(omEntries);\n      });\n  }\n\n  ngOnDestroy(): void {\n    this.dateSelectionSub?.unsubscribe();\n  }\n\n  dateChanged(date: Moment) {\n    this.selectedYear = moment(date).year();\n    this.selectedMonth = moment(date).month() + 1;\n    this.getOmEntries();\n  }\n\n  areAllSelected() {\n    return this.omEntries && this.omSelectionModel.selected.length === this.omEntries.length;\n  }\n\n  masterToggle() {\n    this.areAllSelected() ? this.omSelectionModel.clear() : this.omEntries.forEach(row => this.omSelectionModel.select(row));\n  }\n\n  async openDialog(omEntry: ManagementEntry): Promise<void> {\n    const comments = await firstValueFrom(this.commentService.getCommentsForEmployee(omEntry.employee.email, this.getFormattedDate()));\n\n    const dialogRef = this.dialog.open(CommentsForEmployeeComponent,\n      {\n        width: '100%',\n        autoFocus: false\n      });\n\n    dialogRef.componentInstance.employee = omEntry.employee;\n    dialogRef.componentInstance.comments = comments;\n    dialogRef.componentInstance.step = Step.CONTROL_INTERNAL_TIMES;\n    dialogRef.componentInstance.currentMonthYear = this.getFormattedDate();\n\n    dialogRef.disableClose = true;\n    dialogRef.componentInstance.commentHasChanged.pipe(\n      tap(() => {\n        this.omEntries = null;\n        this.filteredOmEntries = null;\n      }),\n      mergeMap(() => {\n        return this.getOmEntries();\n      })\n    ).subscribe(omEntries => {\n      this.omEntries = omEntries;\n      this.filteredOmEntries = this.getFilteredAndSortedOmEntries();\n    });\n  }\n\n  changeDate(emittedDate: string): void {\n    this.selectedDate = emittedDate;\n  }\n\n  filterOmEntriesByEmployeeName(filterString: string): void {\n    if (!filterString) {\n      this.filteredOmEntries = this.omEntries.slice();\n      return;\n    }\n    filterString = filterString.toLowerCase();\n    this.filteredOmEntries = this.omEntries.filter(omEntry => {\n      return omEntry.employee.firstname.toLowerCase().includes(filterString) ||\n        omEntry.employee.lastname.toLowerCase().includes(filterString);\n    });\n  }\n\n  getReleaseDateCssClass(date: string): string {\n    const today = new Date();\n    const releaseDate = new Date(date);\n    const monthDiff = this.monthDiff(releaseDate, today);\n    if (monthDiff === 1 || monthDiff === 0 || releaseDate > today) {\n      return 'done';\n    }\n    if (monthDiff === 2 && today.getDate() <= this.dayOfMonthForWarning) {\n      return 'wip';\n    }\n    return 'open';\n  }\n\n  async releaseEmployees(): Promise<void> {\n    const employees = this.omSelectionModel.selected.map(omEntry => {\n      omEntry.employee.releaseDate = this.selectedDate;\n      return omEntry.employee;\n    });\n\n    await firstValueFrom(this.omService.updateEmployees(employees));\n\n    this.filteredOmEntries = null;\n\n    this.getOmEntries().subscribe(omEntries => {\n      this.handleGetOmEntriesResult(omEntries);\n    });\n\n    const successMessage = await firstValueFrom(this.translateService.get('notifications.employeesUpdatedSuccess'));\n    this.notificationService.showSuccess(successMessage);\n  }\n\n  private handleGetOmEntriesResult(omEntries: Array<ManagementEntry>) {\n    this.omEntries = omEntries;\n    this.filteredOmEntries = this.getFilteredAndSortedOmEntries();\n  }\n\n  updateInternalCheck($event: MatSelectChange, omEntry: ManagementEntry) {\n    const newState: State = $event.value;\n    this.stepEntryService\n      .updateEmployeeStateForOffice(omEntry.employee, Step.CONTROL_INTERNAL_TIMES, this.getFormattedDate(), newState)\n      .subscribe(() => {\n        omEntry.internalCheckState = newState;\n      });\n  }\n\n  openEmployeeProgress(omEntry: ManagementEntry) {\n    this.employeeProgressRef = this._bottomSheet.open(PmProgressComponent, {\n      data: {employeeProgresses: omEntry.employeeProgresses},\n      autoFocus: false,\n      hasBackdrop: false\n    });\n  }\n\n  closeEmployeeProgress() {\n    this.employeeProgressRef.dismiss();\n  }\n\n  private getFormattedDate() {\n    return moment().year(this.selectedYear).month(this.selectedMonth - 1).date(1).format(configuration.dateFormat);\n  }\n\n  private getOmEntries() {\n    // Clear selection after reloading\n    return this.omService.getEntries(this.selectedYear, this.selectedMonth, true)\n      .pipe(\n        finalize(() => this.omSelectionModel.clear())\n      );\n  }\n\n  private monthDiff(d1: Date, d2: Date) {\n    let months = (d2.getFullYear() - d1.getFullYear()) * 12;\n    months -= d1.getMonth();\n    months += d2.getMonth();\n    return Math.abs(months);\n  }\n\n  getFilteredAndSortedOmEntries() {\n    return this.omEntries\n      .filter(val => val.internalCheckState === State.OPEN)\n      .concat(this.omEntries.filter(val => val.internalCheckState === State.DONE))\n      .sort((a, b) => a.employee.lastname.concat(a.employee.firstname)\n        .localeCompare(b.employee.lastname.concat(b.employee.firstname)));\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'styles/colors';\n\n.employee-card__card_content {\n  height: 100%;\n  min-height: 100%;\n  min-width: 100%;\n  width: 100%;\n  align-self: center;\n  flex-direction: column;\n  box-sizing: border-box;\n  display: flex;\n  gap: 10px;\n}\n\n.employee_actions_container {\n  flex-direction: row;\n  box-sizing: border-box;\n  display: flex;\n  place-content: center space-between;\n  align-items: center;\n  min-height: 80px;\n}\n\ndiv.employee_actions_container {\n  gap: 10px;\n}\n\n.release {\n  color: black !important;\n  border-radius: 5px;\n  padding: 5px;\n  width: fit-content;\n  margin-top: 8px;\n}\n\n.done {\n  background-color: $mega-success-green-transparent;\n}\n\n.open {\n  background-color: $mega-danger-red-transparent;\n}\n\n.wip {\n  background-color: $mega-warning-yellow-transparent;\n}\n\na {\n  color: inherit;\n  text-decoration: none;\n}\n\na:hover {\n  color: $mega-success-green;\n}\n\nth, td {\n  font-size: 17px;\n}\n\ntable {\n  margin-bottom: 30px;\n}\n",
                    "styleUrl": "./employee-card.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "omService",
                        "type": "OfficeManagementService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "notificationService",
                        "type": "NotificationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "translateService",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "commentService",
                        "type": "CommentService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "stepEntryService",
                        "type": "StepEntriesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_bottomSheet",
                        "type": "MatBottomSheet",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "configService",
                        "type": "ConfigService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 88,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "omService",
                        "type": "OfficeManagementService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "notificationService",
                        "type": "NotificationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "translateService",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "commentService",
                        "type": "CommentService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "stepEntryService",
                        "type": "StepEntriesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_bottomSheet",
                        "type": "MatBottomSheet",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "configService",
                        "type": "ConfigService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<mat-card class=\"mat-elevation-z6 mt-10\" data-cy=\"employee-card\">\n  <mat-card-header>\n    <mat-card-title>{{'office-management.table.name' | translate}}</mat-card-title>\n  </mat-card-header>\n  <mat-card-content class=\"employee-card__card_content\">\n    <ng-container *ngIf=\"!omEntries || !filteredOmEntries; else datatable\">\n      <ngx-skeleton-loader [theme]=\"{ height: '64px' }\"\n                           appearance=\"line\"></ngx-skeleton-loader>\n      <ngx-skeleton-loader [theme]=\"{ height: '56px' }\"\n                           appearance=\"line\"></ngx-skeleton-loader>\n      <ngx-skeleton-loader [theme]=\"{ height: '56px' }\"\n                           appearance=\"line\"></ngx-skeleton-loader>\n    </ng-container>\n    <ng-template #datatable>\n      <div>\n        <mat-toolbar class=\"mat-elevation-z8\" color=\"accent\">\n          <mat-toolbar-row class=\"employee_actions_container\">\n            <mat-form-field subscriptSizing=\"dynamic\">\n              <input\n                [placeholder]=\"'office-management.filterPlaceholder' | translate\"\n                #employeeNameInput\n                (keyup)=\"filterOmEntriesByEmployeeName(employeeNameInput.value)\"\n                matInput>\n              <button (click)=\"employeeNameInput.value=''; filterOmEntriesByEmployeeName(employeeNameInput.value)\"\n                      *ngIf=\"employeeNameInput.value\"\n                      aria-label=\"Close Employee Card\"\n                      mat-button\n                      matSuffix>\n                <mat-icon>close</mat-icon>\n              </button>\n            </mat-form-field>\n            <div class=\"employee_actions_container\">\n              <small\n                *ngIf=\"omSelectionModel.selected.length > 0\">\n                {{omSelectionModel.selected.length}} {{'office-management.selectedCount' | translate}}\n              </small>\n\n              <app-datepicker\n                (dateEmitter)=\"changeDate($event)\"\n                *ngIf=\"filteredOmEntries && omSelectionModel.selected.length > 0\"\n                [selectedDate]=\"selectedDate\">\n              </app-datepicker>\n\n              <button (click)=\"releaseEmployees()\"\n                      *ngIf=\"omSelectionModel.selected.length > 0 && selectedDate\"\n                      mat-raised-button>\n                {{'office-management.releaseBtnText' | translate}}\n              </button>\n            </div>\n          </mat-toolbar-row>\n        </mat-toolbar>\n      </div>\n      <div class=\"mat-elevation-z10 table-container\">\n        <mat-table *ngIf=\"filteredOmEntries.length > 0; else noOmEntriesFound\"\n                   [dataSource]=\"filteredOmEntries\"\n                   style=\"width: 100%;\"\n                   data-cy=\"employee-table\">\n          <ng-container matColumnDef=\"select\">\n            <mat-header-cell *matHeaderCellDef>\n              <mat-checkbox (change)=\"$event ? masterToggle() : null\"\n                            [checked]=\"omSelectionModel.hasValue() && areAllSelected()\"\n                            [indeterminate]=\"omSelectionModel.hasValue() && !areAllSelected()\">\n              </mat-checkbox>\n            </mat-header-cell>\n            <mat-cell *matCellDef=\"let row\">\n              <mat-checkbox (change)=\"$event ? omSelectionModel.toggle(row) : null\"\n                            (click)=\"$event.stopPropagation()\"\n                            [checked]=\"omSelectionModel.isSelected(row)\">\n              </mat-checkbox>\n            </mat-cell>\n          </ng-container>\n\n          <ng-container matColumnDef=\"name\">\n            <mat-header-cell *matHeaderCellDef>{{'office-management.table.name' | translate}}</mat-header-cell>\n            <mat-cell *matCellDef=\"let omEntry\" class=\"font-weight-bold\">\n              <span class=\"mobile-label\">{{'office-management.table.name' | translate}}</span>\n              <a [href]=\"officeManagementUrl + omEntry.employee.userId\"\n                 target=\"_blank\">\n                <strong>{{omEntry.employee.firstname}} {{omEntry.employee.lastname}}</strong>\n              </a>\n            </mat-cell>\n          </ng-container>\n\n          <ng-container matColumnDef=\"internalCheckState\">\n            <mat-header-cell\n              *matHeaderCellDef>{{'office-management.table.internalCheckState' | translate}}</mat-header-cell>\n            <mat-cell *matCellDef=\"let omEntry\">\n              <span class=\"mobile-label\">{{'office-management.table.internalCheckState' | translate}}</span>\n              <app-state-select (selectionChange)=\"updateInternalCheck($event, omEntry)\"\n                                [value]=\"omEntry.internalCheckState\"\n                                data-cy=\"internal-check\"></app-state-select>\n            </mat-cell>\n          </ng-container>\n\n          <ng-container matColumnDef=\"employeeCheckState\">\n            <mat-header-cell *matHeaderCellDef\n                             class=\"text-center\">{{'office-management.table.employeeCheckState' | translate}}</mat-header-cell>\n            <mat-cell *matCellDef=\"let omEntry\" class=\"text-center\">\n              <span class=\"mobile-label\">{{'office-management.table.employeeCheckState' | translate}}</span>\n\n              <div\n                matTooltipPosition=\"above\"\n                [matTooltipShowDelay]=\"100\"\n                [matTooltip]=\"omEntry.employeeCheckStateReason\"\n                matTooltipClass=\"mega-custom-tooltip\">\n                <app-state-indicator [state]=\"omEntry.employeeCheckState\"\n                                     data-cy=\"employee-check\"></app-state-indicator>\n              </div>\n            </mat-cell>\n          </ng-container>\n\n          <ng-container matColumnDef=\"projectCheckState\">\n            <mat-header-cell *matHeaderCellDef class=\"text-center\">\n              {{'office-management.table.projectCheckState' | translate}}</mat-header-cell>\n            <mat-cell *matCellDef=\"let omEntry\" class=\"text-center\">\n              <span class=\"mobile-label\">{{'office-management.table.projectCheckState' | translate}}</span>\n              <app-state-indicator (mouseenter)=\"openEmployeeProgress(omEntry)\"\n                                   (mouseleave)=\"closeEmployeeProgress()\"\n                                   [state]=\"omEntry.projectCheckState\"\n                                   data-cy=\"project-check\"></app-state-indicator>\n            </mat-cell>\n          </ng-container>\n\n          <ng-container matColumnDef=\"actions\">\n            <mat-header-cell *matHeaderCellDef>{{'office-management.table.comments' | translate}}</mat-header-cell>\n            <mat-cell *matCellDef=\"let omEntry\">\n              <span class=\"mobile-label\">{{'office-management.table.comments' | translate}}</span>\n              <button (click)=\"openDialog(omEntry)\"\n                      data-cy=\"open-comments\"\n                      aria-label=\"comment\"\n                      mat-button>\n                <mat-icon class=\"done-comments-indicator-icon\">comment</mat-icon>\n                <app-done-comments-indicator [finishedComments]=\"omEntry.finishedComments\"\n                                             [totalComments]=\"omEntry.totalComments\"\n                                             data-cy=\"comment-indicator\"></app-done-comments-indicator>\n              </button>\n            </mat-cell>\n          </ng-container>\n\n          <ng-container matColumnDef=\"releaseDate\">\n            <mat-header-cell *matHeaderCellDef>{{'office-management.table.releaseDate' | translate}}</mat-header-cell>\n            <mat-cell *matCellDef=\"let omEntry\">\n              <span class=\"mobile-label\">{{'office-management.table.releaseDate' | translate}}</span>\n              <p [ngClass]=\"getReleaseDateCssClass(omEntry.employee.releaseDate)\" class=\"release\">\n                {{omEntry.employee.releaseDate !== 'NULL' ? (omEntry.employee.releaseDate | date: configuration.dateFormatNg) : 'Nicht verfügbar'}}\n              </p>\n            </mat-cell>\n          </ng-container>\n\n          <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\n          <mat-row *matRowDef=\"let row; columns: displayedColumns;\"></mat-row>\n        </mat-table>\n      </div>\n    </ng-template>\n\n    <ng-template #noOmEntriesFound>\n      <mat-card>{{'office-management.noOmEntriesFound' | translate}}</mat-card>\n    </ng-template>\n  </mat-card-content>\n</mat-card>\n"
        },
        {
            "name": "EmployeeCheckComponent",
            "id": "component-EmployeeCheckComponent-69964035046773aee0a337c2453311ca129e9fbb698e2ac02df7c4debe7f884a2ed7db81d6fa8b06970b8d8e32d3c82c6a17a69664330796eefad0c6d0563b76",
            "file": "src/app/domains/monthly-report/feature-monthly-report/employee-check/employee-check.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-employee-check",
            "styleUrls": [
                "./employee-check.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./employee-check.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "monthlyReport",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 62,
                    "type": "MonthlyReport",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "refreshMonthlyReport",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 63,
                    "type": "EventEmitter<void>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "commentService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CommentService",
                    "optional": false,
                    "description": "",
                    "line": 74,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "dateSelectionSub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 68,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "employeeCheckIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 69
                },
                {
                    "name": "employeeCheckText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 70
                },
                {
                    "name": "employeeProgressRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatBottomSheetRef",
                    "optional": false,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "noTimesCurrentMonth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 71
                },
                {
                    "name": "overlaysButton",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "selectedDateStr",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "State",
                    "defaultValue": "State",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "stepEntriesService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StepEntriesService",
                    "optional": false,
                    "description": "",
                    "line": 76,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "closeEmployeeProgress",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 203,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "emitRefreshMonthlyReport",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 177,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getSelectedDate",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 169,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openEmployeeProgress",
                    "args": [
                        {
                            "name": "$event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 181,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openStateInProgressReasonDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 214,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "parseBody",
                    "args": [
                        {
                            "name": "body",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 209,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "body",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resetState",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 242,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "selectionChange",
                    "args": [
                        {
                            "name": "change",
                            "type": "MatSelectionListChange",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 145,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "change",
                            "type": "MatSelectionListChange",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setGuiElements",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "setOpenAndUnassignedStepEntriesDone",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 159,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "MatCardModule",
                    "type": "module"
                },
                {
                    "name": "NgIf"
                },
                {
                    "name": "NgxSkeletonLoaderModule",
                    "type": "module"
                },
                {
                    "name": "StateIndicatorComponent",
                    "type": "component"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatListModule",
                    "type": "module"
                },
                {
                    "name": "NgFor"
                },
                {
                    "name": "NgClass"
                },
                {
                    "name": "DatePipe",
                    "type": "pipe"
                },
                {
                    "name": "TranslateModule",
                    "type": "module"
                },
                {
                    "name": "PmProgressComponent",
                    "type": "component"
                },
                {
                    "name": "MatBottomSheetModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  LOCALE_ID,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n  SimpleChanges\n} from '@angular/core';\nimport {MonthlyReport} from '@mega/monthly-report/data-model';\nimport {CommentService, StepEntriesService} from '@mega/shared/data-service';\nimport {State, Step} from '@mega/shared/data-model';\nimport {MatListModule, MatSelectionListChange} from '@angular/material/list';\nimport {MatBottomSheet, MatBottomSheetModule, MatBottomSheetRef} from '@angular/material/bottom-sheet';\nimport {PmProgressComponent, StateIndicatorComponent} from '@mega/shared/ui-common';\nimport {MonthlyReportService} from '@mega/monthly-report/data-service';\nimport * as moment from 'moment';\nimport {convertMomentToString, toMonthYearString} from '@mega/shared/util-common';\nimport {Subscription, zip} from 'rxjs';\nimport {tap} from 'rxjs/operators';\nimport {MatDialog} from '@angular/material/dialog';\nimport {\n  EmployeeCheckConfirmCommentDialogComponent\n} from '../employee-check-confirm-comment-dialog/employee-check-confirm-comment-dialog.component';\nimport {\n  EmployeeCheckConfirmDialogAction,\n  EmployeeCheckConfirmDialogActionType\n} from '../employee-check-confirm-comment-dialog/model/EmployeeCheckConfirmDialogAction';\nimport {TranslateModule} from '@ngx-translate/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {NgxSkeletonLoaderModule} from 'ngx-skeleton-loader';\nimport {DatePipe, NgClass, NgFor, NgIf} from '@angular/common';\nimport {MatCardModule} from '@angular/material/card';\n\n@Component({\n  selector: 'app-employee-check',\n  templateUrl: './employee-check.component.html',\n  styleUrls: ['./employee-check.component.scss'],\n  standalone: true,\n  imports: [\n    MatCardModule,\n    NgIf,\n    NgxSkeletonLoaderModule,\n    StateIndicatorComponent,\n    MatButtonModule,\n    MatListModule,\n    NgFor,\n    NgClass,\n    DatePipe,\n    TranslateModule,\n    PmProgressComponent,\n    MatBottomSheetModule\n  ]\n})\nexport class EmployeeCheckComponent implements OnInit, OnChanges, OnDestroy {\n\n  State = State;\n\n  @Input() monthlyReport: MonthlyReport;\n  @Output() refreshMonthlyReport: EventEmitter<void> = new EventEmitter<void>();\n\n  employeeProgressRef: MatBottomSheetRef;\n  overlaysButton: boolean;\n  selectedDateStr;\n  private dateSelectionSub: Subscription;\n  employeeCheckIcon: string;\n  employeeCheckText: string;\n  noTimesCurrentMonth: boolean;\n\n  constructor(\n    public commentService: CommentService,\n    private monthlyReportService: MonthlyReportService,\n    public stepEntriesService: StepEntriesService,\n    private bottomSheet: MatBottomSheet,\n    @Inject(LOCALE_ID) private locale: string,\n    private dialog: MatDialog) {\n  }\n\n  ngOnInit(): void {\n    this.dateSelectionSub = zip(this.monthlyReportService.selectedYear, this.monthlyReportService.selectedMonth)\n      .pipe(\n        tap(value => {\n          this.selectedDateStr = toMonthYearString(value[0], value[1] - 1, this.locale);\n        })\n      ).subscribe();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.monthlyReport) {\n      this.setGuiElements();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.dateSelectionSub?.unsubscribe();\n    this.employeeProgressRef?.dismiss();\n  }\n\n  private setGuiElements() {\n    if (!this.monthlyReport) {\n      this.employeeCheckIcon = undefined;\n      this.employeeCheckText = '';\n\n      return;\n    }\n\n    let stateIndicatorState = this.monthlyReport.employeeCheckState;\n    let stateIndicatorText = '';\n    let noTimesCurrentMonth = false;\n\n    // In besonderen Fällen will man ein anderes Icon als das, was der employeeCheckState eigentlich ist, anzeigen:\n    if (this.monthlyReport.employeeCheckState === State.OPEN || this.monthlyReport.employeeCheckState === State.IN_PROGRESS) {\n\n      if (this.monthlyReport.assigned) {\n        // Texte\n        if (this.monthlyReport.employeeCheckState === State.OPEN) {\n          stateIndicatorText = 'monthly-report.pleaseCheckPrompt';\n        } else if (this.monthlyReport.employeeCheckState === State.IN_PROGRESS) {\n          stateIndicatorText = 'monthly-report.inProgressDescription';\n        }\n      } else {\n        // Show default State Indicator\n        stateIndicatorText = 'monthly-report.noTimesCurrentMonth';\n        stateIndicatorState = undefined;\n        noTimesCurrentMonth = true;\n      }\n    } else if (this.monthlyReport.employeeCheckState === State.DONE) {\n      if (this.monthlyReport.otherChecksDone) {\n        // Show default State Indicator\n        stateIndicatorText = 'monthly-report.checkSuccess';\n      } else {\n        stateIndicatorState = undefined;\n        stateIndicatorText = 'monthly-report.checkWip';\n      }\n    }\n\n    this.employeeCheckIcon = stateIndicatorState;\n    this.employeeCheckText = stateIndicatorText;\n    this.noTimesCurrentMonth = noTimesCurrentMonth;\n  }\n\n  selectionChange(change: MatSelectionListChange): void {\n    const comment = change.options[0].value;\n\n    this.commentService.setStatusDone(comment).subscribe(() => {\n      const updatedComment = this.monthlyReport.comments.find(value => value.id === comment.id);\n      updatedComment.state = State.DONE;\n\n      const allCommentDone: boolean = this.monthlyReport.comments.every(c => c.state === State.DONE);\n      if (allCommentDone) {\n        this.emitRefreshMonthlyReport();\n      }\n    });\n  }\n\n  setOpenAndUnassignedStepEntriesDone(): void {\n    const closeDate = this.getSelectedDate();\n\n    this.stepEntriesService\n      .close(this.monthlyReport.employee, Step.CONTROL_TIMES, convertMomentToString(closeDate))\n      .subscribe(() => {\n        this.emitRefreshMonthlyReport();\n      });\n  }\n\n  private getSelectedDate() {\n    return moment()\n      .year(this.monthlyReportService.selectedYear.value)\n      .month(this.monthlyReportService.selectedMonth.value - 1)\n      .date(1)\n      .startOf('day');\n  }\n\n  emitRefreshMonthlyReport(): void {\n    this.refreshMonthlyReport.emit();\n  }\n\n  openEmployeeProgress($event?: MouseEvent): void {\n    this.employeeProgressRef = this.bottomSheet.open(PmProgressComponent, {\n      data: {\n        employeeProgresses: this.monthlyReport.employeeProgresses,\n        internalCheckState: this.monthlyReport.internalCheckState\n      },\n      autoFocus: false,\n      hasBackdrop: false\n    });\n    const bottomSheetContainer = document.querySelector('mat-bottom-sheet-container');\n    const bottomSheetY = window.innerHeight - bottomSheetContainer?.getBoundingClientRect()?.height || 0;\n\n    const eventY = $event?.y || 0;\n\n    this.overlaysButton = bottomSheetY < (eventY + 10); // inaccuracy correction\n\n    bottomSheetContainer?.addEventListener('mouseleave', () => {\n      this.employeeProgressRef.dismiss();\n      this.overlaysButton = false;\n    });\n  }\n\n  closeEmployeeProgress(): void {\n    if (!this.overlaysButton) {\n      this.employeeProgressRef.dismiss();\n    }\n  }\n\n  parseBody(body: string): string {\n    const urlPattern = /https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,4}\\b([-a-zA-Z0-9@:%_\\+.~#?&//=]*)/igm;\n    return body.replace(urlPattern, '<a href=\\$& target=\"_blank\"\\>$&</a>');\n  }\n\n  openStateInProgressReasonDialog() {\n    const dialogRef = this.dialog.open(EmployeeCheckConfirmCommentDialogComponent,\n      {\n        data: {\n          reason: this.monthlyReport?.employeeCheckStateReason\n        },\n        width: '100%',\n        autoFocus: false,\n        restoreFocus: false\n      }\n    );\n\n    dialogRef.afterClosed().subscribe((result: EmployeeCheckConfirmDialogAction) => {\n      if (result?.type === EmployeeCheckConfirmDialogActionType.SAVE) {\n        const input = result.payload as string;\n\n        const date = this.getSelectedDate();\n\n        this.stepEntriesService\n          .updateEmployeeStateForOffice(\n            this.monthlyReport.employee, Step.CONTROL_TIMES, convertMomentToString(date), State.IN_PROGRESS, input)\n          .subscribe(() => {\n            this.emitRefreshMonthlyReport();\n          });\n      }\n    });\n  }\n\n  resetState() {\n    const date = this.getSelectedDate();\n\n    this.stepEntriesService\n      .updateEmployeeStateForOffice(this.monthlyReport.employee, Step.CONTROL_TIMES, convertMomentToString(date), State.OPEN, null)\n      .subscribe(() => {\n        this.emitRefreshMonthlyReport();\n      });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".done {\n  text-decoration: line-through;\n}\n\n\n.comments_container > p {\n  padding-inline: 16px;\n}\n\n.comments_container mat-list-option {\n  height: auto !important;\n  margin-bottom: 5px;\n  margin-top: 5px;\n  border-bottom: 1px solid #d8d8d8\n}\n\n.my-mat-bottom-sheet {\n  padding: 16px;\n}\n\n.state_container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n\n.employee-check-text {\n  text-align: center;\n  max-width: 550px;\n}\n\n.employee-check__actionsContainer {\n  margin-top: 30px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n\n.employee-check__primary_button {\n  width: 250px;\n  height: 50px;\n}\n\n.setInProgressBtn {\n  color: #727272;\n  font-style: italic;\n  text-decoration: underline;\n}\n\n.card_content {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n.mobile__state-indicator {\n  display: none;\n}\n\n.state-reason-container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  max-width: 85%;\n  min-width: 85%;\n}\n\n.state-reason-text-and-actions-container {\n  margin-top: 5px;\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n}\n\n// Show dots after 3 lines, if text too long (overflow)\n.state-reason-text {\n  text-align: center;\n  display: -webkit-box;\n  -webkit-line-clamp: 3;\n  -webkit-box-orient: vertical;\n  overflow: hidden;\n  flex-basis: 100%;\n}\n\n\n// Buttons center on desktop\n.state-reason-actions {\n  display: flex;\n  justify-content: center;\n  gap: 10px;\n}\n\n// für alignment mit Text darüber (sonst kleines offset nach innen)\n.state-reason-actions button {\n  padding: 0;\n  min-width: 0;\n}\n\n.state-reason-header {\n  margin-top: 15px;\n}\n\n.state-indicator_container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n\n// state indicator mit size=medium statt large\n.app-state-indicator_mobile {\n  display: none;\n}\n\n@media screen and (max-width: 500px) {\n\n  .state-reason-container {\n    max-width: unset;\n    min-width: unset;\n  }\n\n\n  .state-indicator_container {\n    margin-top: 10px;\n    flex-direction: row;\n\n    text-align: left;\n    gap: 20px;\n  }\n\n  .employee-check-text {\n    text-align: left;\n  }\n\n  // show Medium size icon\n  .app-state-indicator_mobile {\n    display: block;\n  }\n\n  // hide Large icon\n  .app-state-indicator_default {\n    display: none;\n  }\n\n  .mobile__font-size {\n    font-size: 16px;\n  }\n\n  // am desktop wo alles größer ist und viel platz da ist,\n  // sind die elemente mittig platziert\n  // mobile soll platz aber ausnutzen\n  .state_container {\n    align-items: stretch;\n  }\n}\n",
                    "styleUrl": "./employee-check.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "commentService",
                        "type": "CommentService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "monthlyReportService",
                        "type": "MonthlyReportService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "stepEntriesService",
                        "type": "StepEntriesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "bottomSheet",
                        "type": "MatBottomSheet",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "locale",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 71,
                "jsdoctags": [
                    {
                        "name": "commentService",
                        "type": "CommentService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "monthlyReportService",
                        "type": "MonthlyReportService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "stepEntriesService",
                        "type": "StepEntriesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "bottomSheet",
                        "type": "MatBottomSheet",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "locale",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "OnChanges",
                "OnDestroy"
            ],
            "templateData": "<mat-card appearance=\"raised\" class=\"fill-parent\">\n  <mat-card-header>\n    <mat-card-subtitle>\n      {{selectedDateStr}}\n    </mat-card-subtitle>\n    <mat-card-title>{{'monthly-report.title.emc' | translate}}</mat-card-title>\n  </mat-card-header>\n  <mat-card-content class=\"card_content\">\n    <ng-container *ngIf=\"!monthlyReport else employeeCheck\">\n      <ngx-skeleton-loader [theme]=\"{ height: '80px', width: '80px' }\"\n                           appearance=\"circle\"></ngx-skeleton-loader>\n      <ngx-skeleton-loader [theme]=\"{ width: '700px', 'margin-top': '20px' }\"\n                           appearance=\"line\"></ngx-skeleton-loader>\n      <ngx-skeleton-loader [theme]=\"{ width: '300px' }\"\n                           appearance=\"line\"></ngx-skeleton-loader>\n      <ngx-skeleton-loader [theme]=\"{ height: '40px', width: '200px', 'margin-top': '15px' }\"\n                           appearance=\"line\"></ngx-skeleton-loader>\n      <ngx-skeleton-loader [theme]=\"{ height: '20px', width: '160px', 'margin-top': '5px' }\"\n                           appearance=\"line\"></ngx-skeleton-loader>\n    </ng-container>\n\n    <ng-template #employeeCheck>\n      <div class=\"state_container\">\n\n        <div class=\"state-indicator_container mobile__font-size\">\n          <!-- Mobile - Medium Icon -->\n          <app-state-indicator\n            (mouseenter)=\"openEmployeeProgress($event)\" (mouseleave)=\"closeEmployeeProgress()\"\n            class=\"app-state-indicator_mobile\" [state]=\"employeeCheckIcon\" size=\"medium\"></app-state-indicator>\n\n          <!-- Desktop - Large Icon -->\n          <app-state-indicator\n            (mouseenter)=\"openEmployeeProgress($event)\" (mouseleave)=\"closeEmployeeProgress()\"\n            class=\"app-state-indicator_default\" [state]=\"employeeCheckIcon\" size=\"large\"></app-state-indicator>\n\n          <!-- Text -->\n          <div class=\"employee-check-text\">\n            <p>{{employeeCheckText | translate}}</p>\n          </div>\n        </div>\n\n        <ng-container *ngIf=\"!noTimesCurrentMonth\">\n          <div class=\"state-reason-container\" *ngIf=\"monthlyReport.employeeCheckState === State.IN_PROGRESS\">\n            <div class=\"mobile__font-size state-reason-header\">\n              <strong>{{'monthly-report.reason' | translate}}</strong>\n            </div>\n\n            <div class=\"state-reason-text-and-actions-container\">\n              <div class=\"mobile__font-size state-reason-text\" >\n                {{monthlyReport.employeeCheckStateReason}}\n              </div>\n\n              <div class=\"state-reason-actions\">\n                <button mat-button color=\"warn\" (click)=\"resetState()\">{{'global.actions.delete' | translate}}</button>\n                <button mat-button (click)=\"openStateInProgressReasonDialog()\">{{'global.actions.edit' | translate}}</button>\n              </div>\n            </div>\n          </div>\n\n          <div class=\"employee-check__actionsContainer mb-10\"\n               *ngIf=\"monthlyReport.employeeCheckState === State.OPEN || monthlyReport.employeeCheckState === State.IN_PROGRESS\">\n\n            <button\n              data-cy=\"buchungen_bestaetigen_btn\"\n              (click)=\"setOpenAndUnassignedStepEntriesDone()\" class=\"employee-check__primary_button mt-10\"\n              mat-raised-button\n              color=\"primary\">{{'monthly-report.confirmBtnText' | translate}}</button>\n            <button *ngIf=\"monthlyReport.employeeCheckState !== State.IN_PROGRESS\"\n                    (click)=\"openStateInProgressReasonDialog()\" class=\"setInProgressBtn\"\n                    mat-button color=\"secondary\">\n              {{'monthly-report.setStateInProgressButtonText' | translate}}\n            </button>\n          </div>\n        </ng-container>\n      </div>\n\n      <!-- COMMENTS -->\n\n      <!--\n      div auf min-height-0 damit vertical scroll richtig funktioniert.\n      sonst dann wird sibling div nach oben außerhalb gedrückt, sobald dieses div element riesig wird. Z.B. bei sehr vielen Kommentaren\n      Grund dafür ist irgendwie, dass sich der parent (display: flex) innerhalb einer grid row befindet, deren höhe\n      prozentual beschränkt ist und flexbox probleme hat, die elemente & scrolling richtig zu kalkulieren.\n      -->\n      <div class=\"comments_container mt-10 min-height-0\" *ngIf=\"monthlyReport?.comments?.length > 0\">\n        <p><strong>{{'monthly-report.commentsToDo' | translate}}</strong></p>\n        <mat-selection-list (selectionChange)=\"selectionChange($event)\">\n          <mat-list-option\n            #option\n            *ngFor=\"let comment of monthlyReport.comments\"\n            [disabled]=\"option.selected\"\n            [ngClass]=\"{'done': option.selected}\"\n            [selected]=\"comment.state === State.DONE\"\n            [value]=\"comment\">\n            <div>\n              {{comment.updateDate | date: 'dd.MM.yyyy'}}\n              {{comment?.authorName}}:\n            </div>\n            <div (click)=\"$event.stopPropagation()\" [innerHTML]=\"parseBody(comment.message)\"\n                 style=\"white-space: pre-line\"></div>\n          </mat-list-option>\n        </mat-selection-list>\n      </div>\n    </ng-template>\n  </mat-card-content>\n</mat-card>\n"
        },
        {
            "name": "EmployeeCheckConfirmCommentDialogComponent",
            "id": "component-EmployeeCheckConfirmCommentDialogComponent-6282e956eba1a9981ee79f756ce0b8e49ce26be7a1b38f53ce8040307bce8533c019cbde00117184ee008664fe703cf0934c6d5b7766c819c1e919b9f8b1c247",
            "file": "src/app/domains/monthly-report/feature-monthly-report/employee-check-confirm-comment-dialog/employee-check-confirm-comment-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-employee-check-confirm-comment-dialog",
            "styleUrls": [
                "./employee-check-confirm-comment-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./employee-check-confirm-comment-dialog.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EmployeeCheckConfirmDialogData",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                },
                {
                    "name": "isEdit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "MAX_LENGTH",
                    "defaultValue": "500",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "textAreaInp",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                }
            ],
            "methodsClass": [
                {
                    "name": "cancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "save",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "MatDialogModule",
                    "type": "module"
                },
                {
                    "name": "NgIf"
                },
                {
                    "name": "MatFormFieldModule",
                    "type": "module"
                },
                {
                    "name": "TextFieldModule",
                    "type": "module"
                },
                {
                    "name": "MatInputModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "TranslateModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Inject, OnInit} from '@angular/core';\nimport {MAT_DIALOG_DATA, MatDialogModule, MatDialogRef} from '@angular/material/dialog';\nimport {\n  EmployeeCheckConfirmDialogAction,\n  EmployeeCheckConfirmDialogActionType\n} from './model/EmployeeCheckConfirmDialogAction';\nimport {EmployeeCheckConfirmDialogData} from './model/EmployeeCheckConfirmDialogData';\nimport {TranslateModule} from '@ngx-translate/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {FormsModule} from '@angular/forms';\nimport {MatInputModule} from '@angular/material/input';\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {NgIf} from '@angular/common';\n\n@Component({\n  selector: 'app-employee-check-confirm-comment-dialog',\n  templateUrl: './employee-check-confirm-comment-dialog.component.html',\n  styleUrls: ['./employee-check-confirm-comment-dialog.component.scss'],\n  standalone: true,\n  imports: [\n    MatDialogModule,\n    NgIf,\n    MatFormFieldModule,\n    TextFieldModule,\n    MatInputModule,\n    FormsModule,\n    MatButtonModule,\n    TranslateModule\n  ]\n})\nexport class EmployeeCheckConfirmCommentDialogComponent implements OnInit {\n  textAreaInp;\n\n  isEdit;\n  MAX_LENGTH = 500;\n\n  constructor(private dialogRef: MatDialogRef<EmployeeCheckConfirmCommentDialogComponent>,\n              @Inject(MAT_DIALOG_DATA) public data: EmployeeCheckConfirmDialogData) {\n  }\n\n  ngOnInit(): void {\n    this.textAreaInp = this.data?.reason || '';\n\n    // if reason not empty -> isEdit true\n    this.isEdit = !!this.data?.reason;\n  }\n\n  save() {\n    const result: EmployeeCheckConfirmDialogAction = {\n      type: EmployeeCheckConfirmDialogActionType.SAVE,\n      payload: this.textAreaInp\n    }\n\n    this.dialogRef.close(result);\n  }\n\n  cancel() {\n    const result: EmployeeCheckConfirmDialogAction = {\n      type: EmployeeCheckConfirmDialogActionType.CANCEL,\n      payload: null\n    }\n\n    this.dialogRef.close(result);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".info-box {\n  font-size: 14px;\n  text-align: justify;\n}\n",
                    "styleUrl": "./employee-check-confirm-comment-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<EmployeeCheckConfirmCommentDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "EmployeeCheckConfirmDialogData",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 36,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<EmployeeCheckConfirmCommentDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "EmployeeCheckConfirmDialogData",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<h2 mat-dialog-title>\n  <ng-container *ngIf=\"isEdit else newReason\">{{'monthly-report.employeeCheckConfirmCommentDialogComponent.titleEdit' | translate}}</ng-container>\n  <ng-template #newReason>{{'monthly-report.employeeCheckConfirmCommentDialogComponent.titleAdd' | translate}}</ng-template>\n</h2>\n\n<div mat-dialog-content class=\"dialog-content\">\n  <div class=\"info-box\">\n    <span>\n      {{'monthly-report.employeeCheckConfirmCommentDialogComponent.description' | translate}}\n    </span>\n    <br />\n    <br />\n    <strong>\n      {{'monthly-report.employeeCheckConfirmCommentDialogComponent.subDescription' | translate}}\n    </strong>\n  </div>\n\n  <div class=\"mt-20\">\n    <mat-form-field appearance=\"outline\" class=\"full-width\">\n      <mat-label>{{'monthly-report.employeeCheckConfirmCommentDialogComponent.textareaPlaceholder' | translate}}</mat-label>\n      <textarea\n        #textareaCtrl=\"ngModel\"\n        required\n        [(ngModel)]=\"textAreaInp\"\n        [maxLength]=\"MAX_LENGTH\"\n        cdkAutosizeMaxRows=\"10\"\n        cdkAutosizeMinRows=\"8\"\n        cdkTextareaAutosize\n        matInput></textarea>\n      <mat-hint align=\"end\">{{textareaCtrl?.value?.length}} / {{MAX_LENGTH}}</mat-hint>\n      <!-- MaxLength Error kann nicht auftreten, weil: Datenbank-Limit ist 500 Zeichen und falls da was schiefgegangen ist,\n       die Textarea schneidet den Rest ab -->\n      <mat-error *ngIf=\"textareaCtrl?.errors?.required && (textareaCtrl?.touched || textareaCtrl?.dirty)\">\n        {{'monthly-report.employeeCheckConfirmCommentDialogComponent.textareaRequiredError' | translate}}\n      </mat-error>\n    </mat-form-field>\n  </div>\n</div>\n\n<mat-dialog-actions align=\"end\">\n  <button (click)=\"cancel()\" mat-button>\n    {{ 'global.actions.cancel' | translate }}\n  </button>\n  <button [disabled]=\"textareaCtrl.invalid\" (click)=\"save()\" mat-raised-button color=\"primary\">\n    {{ 'global.actions.save' | translate }}\n  </button>\n</mat-dialog-actions>\n"
        },
        {
            "name": "EnterpriseCardComponent",
            "id": "component-EnterpriseCardComponent-e46f2e7a743cbde0790cf4789bb88b8406a52021c2a824c14b783ada7a29f81d03615b5046473d29e7fcbd2187874d01853800af1b165e5808ba1a25277fbba2",
            "file": "src/app/domains/office-management/feature-office-management/enterprise-card/enterprise-card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-enterprise-card",
            "styleUrls": [
                "./enterprise-card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./enterprise-card.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dateSelectionSub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "enterpriseEntry",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EnterpriseEntry",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "EnterpriseStep",
                    "defaultValue": "EnterpriseStep",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "fetchingData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "officeManagementUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "selectedMonth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "selectedYear",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "tooltipPosition",
                    "defaultValue": "'above' as TooltipPosition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "tooltipShowDelay",
                    "defaultValue": "500",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 48
                }
            ],
            "methodsClass": [
                {
                    "name": "dateChanged",
                    "args": [
                        {
                            "name": "date",
                            "type": "Moment",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Moment",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getEnterpriseEntry",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onChangeEnterpriseState",
                    "args": [
                        {
                            "name": "$event",
                            "type": "MatSelectChange",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "step",
                            "type": "EnterpriseStep",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "projectStateSelect",
                            "type": "ProjectStateSelectComponent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "MatSelectChange",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "step",
                            "type": "EnterpriseStep",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "projectStateSelect",
                            "type": "ProjectStateSelectComponent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showErrorSnackbar",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "MatCardModule",
                    "type": "module"
                },
                {
                    "name": "NgIf"
                },
                {
                    "name": "NgxSkeletonLoaderModule",
                    "type": "module"
                },
                {
                    "name": "MatTooltipModule",
                    "type": "module"
                },
                {
                    "name": "ProjectStateSelectComponent",
                    "type": "component"
                },
                {
                    "name": "TranslateModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, OnDestroy, OnInit} from '@angular/core';\nimport * as _moment from 'moment';\nimport {Moment} from 'moment';\nimport {Subscription, switchMap, zip} from 'rxjs';\nimport {EnterpriseEntriesService, OfficeManagementService} from '@mega/office-management/data-service';\nimport {tap} from 'rxjs/operators';\nimport {MatSelectChange} from '@angular/material/select';\nimport {Config} from '@mega/shared/data-model';\nimport {configuration} from '@mega/shared/util-constant';\nimport {ConfigService} from '@mega/shared/data-service';\nimport {EnterpriseEntry, EnterpriseStep} from '@mega/office-management/data-model';\nimport {MatSnackBar, MatSnackBarHorizontalPosition, MatSnackBarVerticalPosition} from '@angular/material/snack-bar';\nimport {TranslateModule, TranslateService} from '@ngx-translate/core';\nimport {ProjectStateSelectComponent} from '@mega/shared/ui-common';\nimport {MatTooltipModule, TooltipPosition} from '@angular/material/tooltip';\nimport {NgxSkeletonLoaderModule} from 'ngx-skeleton-loader';\nimport {NgIf} from '@angular/common';\nimport {MatCardModule} from '@angular/material/card';\n\nconst moment = _moment;\n\n@Component({\n  selector: 'app-enterprise-card',\n  templateUrl: './enterprise-card.component.html',\n  styleUrls: ['./enterprise-card.component.scss'],\n  standalone: true,\n  imports: [\n    MatCardModule,\n    NgIf,\n    NgxSkeletonLoaderModule,\n    MatTooltipModule,\n    ProjectStateSelectComponent,\n    TranslateModule\n  ]\n})\nexport class EnterpriseCardComponent implements OnInit, OnDestroy {\n\n  EnterpriseStep = EnterpriseStep;\n\n  selectedYear: number;\n  selectedMonth: number;\n\n  dateSelectionSub: Subscription;\n  officeManagementUrl: string;\n  enterpriseEntry: EnterpriseEntry;\n  fetchingData: boolean;\n\n  tooltipShowDelay = 500;\n  tooltipPosition = 'above' as TooltipPosition;\n\n  constructor(private configService: ConfigService,\n              private omService: OfficeManagementService,\n              private eeService: EnterpriseEntriesService,\n              private _snackBar: MatSnackBar,\n              private translate: TranslateService) {\n  }\n\n  get date() {\n    return moment()\n      .year(this.selectedYear)\n      .month(this.selectedMonth)\n      .date(1)\n      .startOf('day');\n  }\n\n  ngOnInit(): void {\n    this.configService.getConfig().subscribe((config: Config) => {\n      this.officeManagementUrl = config.zepOrigin + '/' + configuration.OFFICE_MANAGEMENT_SEGMENT;\n    });\n    this.dateSelectionSub = zip(this.omService.selectedYear, this.omService.selectedMonth)\n      .pipe(\n        tap(value => {\n          this.selectedYear = value[0];\n          this.selectedMonth = value[1];\n        }),\n        tap(() => {\n          this.enterpriseEntry = null;\n          this.fetchingData = true;\n        }),\n        switchMap(() => this.getEnterpriseEntry())\n      ).subscribe(enterpriseEntry => {\n        this.enterpriseEntry = enterpriseEntry;\n        this.fetchingData = false;\n      });\n  }\n\n  ngOnDestroy(): void {\n    this.dateSelectionSub?.unsubscribe();\n  }\n\n  dateChanged(date: Moment) {\n    this.omService.selectedYear.next(moment(date).year());\n    this.omService.selectedMonth.next(moment(date).month() + 1);\n  }\n\n  onChangeEnterpriseState($event: MatSelectChange, step: EnterpriseStep, projectStateSelect: ProjectStateSelectComponent) {\n    let oldValue = this.enterpriseEntry[step];\n\n    this.enterpriseEntry[step] = $event.value;\n    this.eeService.updateEnterpriseEntry(this.enterpriseEntry, this.selectedYear, this.selectedMonth)\n      .subscribe((success) => {\n        if (!success) {\n          this.showErrorSnackbar();\n          this.enterpriseEntry[step] = oldValue;\n          projectStateSelect.value = this.enterpriseEntry[step];\n        }\n      });\n  }\n\n  private getEnterpriseEntry() {\n    return this.eeService.getEnterpriseEntry(this.selectedYear, this.selectedMonth);\n  }\n\n  private showErrorSnackbar() {\n    this._snackBar.open(\n      this.translate.instant('snackbar.message'),\n      this.translate.instant('snackbar.confirm'),\n      {\n        horizontalPosition: <MatSnackBarHorizontalPosition>configuration.snackbar.horizontalPosition,\n        verticalPosition: <MatSnackBarVerticalPosition>configuration.snackbar.verticalPosition,\n        duration: configuration.snackbar.duration\n      });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".enterprise-card__content_container {\n  flex-direction: column;\n  box-sizing: border-box;\n  display: flex;\n  gap: 10px;\n}\n\n.controls-container {\n  flex-direction: row;\n  box-sizing: border-box;\n  display: flex;\n  place-content: center space-between;\n  align-items: center;\n\n  min-height: 100px !important;\n  flex-wrap: wrap;\n}\n\n.controls-container > div {\n  padding-left: 16px;\n  padding-right: 16px;\n}\n\n.controls-container > div > strong {\n  margin-right: 15px;\n  font-size: 14px;\n}\n\n.controls-container > div > app-project-state-select > mat-select {\n  min-height: 100px !important;\n}\n",
                    "styleUrl": "./enterprise-card.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "configService",
                        "type": "ConfigService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "omService",
                        "type": "OfficeManagementService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "eeService",
                        "type": "EnterpriseEntriesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 49,
                "jsdoctags": [
                    {
                        "name": "configService",
                        "type": "ConfigService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "omService",
                        "type": "OfficeManagementService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "eeService",
                        "type": "EnterpriseEntriesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "date": {
                    "name": "date",
                    "getSignature": {
                        "name": "date",
                        "type": "",
                        "returnType": "",
                        "line": 58
                    }
                }
            },
            "templateData": "<mat-card class=\"mat-elevation-z6 mt-10\">\n  <mat-card-header>\n    <mat-card-title>{{'office-management.enterprise' | translate}}</mat-card-title>\n  </mat-card-header>\n  <mat-card-content class=\"enterprise-card__content_container\">\n    <ngx-skeleton-loader *ngIf=\"!enterpriseEntry && fetchingData; else datatable\"\n                         [theme]=\"{ height: '100px' }\"\n                         appearance=\"line\"></ngx-skeleton-loader>\n\n    <ng-template #datatable>\n      <div class=\"mat-elevation-z10\">\n        <div *ngIf=\"enterpriseEntry; else noEnterpriseEntriesFound\" class=\"controls-container\">\n          <div>\n            <strong [matTooltipPosition]=\"tooltipPosition\"\n                    [matTooltipShowDelay]=\"tooltipShowDelay\"\n                    matTooltip=\"{{'office-management.global-check.tooltips.zepTimesReleased' | translate}}\"\n                    matTooltipClass=\"mega-custom-tooltip\">{{ 'office-management.global-check.labels.zepTimesReleased' | translate }}</strong>\n            <app-project-state-select #zepTimesReleasedSelect\n                                      (selectionChange)=\"onChangeEnterpriseState($event, EnterpriseStep.ZEP_TIMES_RELEASED, zepTimesReleasedSelect)\"\n                                      [value]=\"enterpriseEntry?.zepTimesReleased\"\n                                      data-cy=\"zep-times-released\"></app-project-state-select>\n          </div>\n          <div>\n            <strong\n              [matTooltipPosition]=\"tooltipPosition\"\n              [matTooltipShowDelay]=\"tooltipShowDelay\"\n              matTooltip=\"{{'office-management.global-check.tooltips.chargeabilityExternalEmployeesRecorded' | translate}}\"\n              matTooltipClass=\"mega-custom-tooltip\">{{ 'office-management.global-check.labels.chargeabilityExternalEmployeesRecorded' | translate }}</strong>\n            <app-project-state-select #chargeabilityExternalEmployeesRecordedSelect\n                                      (selectionChange)=\"onChangeEnterpriseState($event, EnterpriseStep.CHARGEABILITY_EXTERNAL_EMPLOYEES_RECORDED, chargeabilityExternalEmployeesRecordedSelect)\"\n                                      [value]=\"enterpriseEntry?.chargeabilityExternalEmployeesRecorded\"\n                                      data-cy=\"chargeability-external-employees\"></app-project-state-select>\n          </div>\n          <div>\n            <strong [matTooltipPosition]=\"tooltipPosition\"\n                    [matTooltipShowDelay]=\"tooltipShowDelay\"\n                    matTooltip=\"{{'office-management.global-check.tooltips.payrollAccountingSent' | translate}}\"\n                    matTooltipClass=\"mega-custom-tooltip\">{{ 'office-management.global-check.labels.payrollAccountingSent' | translate }}</strong>\n            <app-project-state-select #payrollAccountingSentSelect\n                                      (selectionChange)=\"onChangeEnterpriseState($event, EnterpriseStep.PAYROLL_ACCOUNTING_SENT, payrollAccountingSentSelect)\"\n                                      [value]=\"enterpriseEntry?.payrollAccountingSent\"\n                                      data-cy=\"payroll-accounting-sent\"></app-project-state-select>\n          </div>\n        </div>\n      </div>\n    </ng-template>\n\n    <ng-template #noEnterpriseEntriesFound>\n      <mat-card>{{'office-management.noOmEntriesFound' | translate}}</mat-card>\n    </ng-template>\n  </mat-card-content>\n</mat-card>\n"
        },
        {
            "name": "ErrorComponent",
            "id": "component-ErrorComponent-58fa4b40d6f6bdb792c43ea1376fdc18b06faa0385c5565a158855c4a021592513cfd1e0ecba442dce4ca087c7fe93202ca0222d75d027753c1789e4cf5d1a5d",
            "file": "src/app/domains/shared/ui-common/error/error.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-error",
            "styleUrls": [
                "./error.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./error.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "errorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "redirectUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "navigatePreviousPage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "TranslateModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, OnInit} from '@angular/core';\nimport {Router} from '@angular/router';\nimport {ErrorService} from '@mega/shared/data-service';\nimport {configuration} from '@mega/shared/util-constant';\nimport {TranslateModule} from '@ngx-translate/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatIconModule} from '@angular/material/icon';\n\n@Component({\n  selector: 'app-error',\n  templateUrl: './error.component.html',\n  styleUrls: ['./error.component.scss'],\n  standalone: true,\n  imports: [\n    MatIconModule,\n    MatButtonModule,\n    TranslateModule\n  ]\n})\nexport class ErrorComponent implements OnInit {\n\n  errorMessage: string;\n  private redirectUrl: string;\n\n  constructor(\n    private router: Router,\n    private errorService: ErrorService\n  ) {\n  }\n\n  ngOnInit() {\n    this.errorMessage = this.errorService.message;\n    this.redirectUrl = this.errorService.redirectUrl;\n    this.errorService.removeLastErrorData();\n  }\n\n  navigatePreviousPage() {\n    if (!this.redirectUrl) {\n      this.router.navigate([configuration.PAGE_URLS.MONTHLY_REPORT]);\n    } else {\n      this.router.navigate([this.redirectUrl]);\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "mat-icon {\n  font-size: 80px;\n  width: auto;\n  height: auto;\n}\n\n.error_container {\n  height: 80%;\n  display: flex;\n  flex-direction: column;\n  box-sizing: border-box;\n  place-content: center;\n  align-items: center;\n}\n",
                    "styleUrl": "./error.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "errorService",
                        "type": "ErrorService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "errorService",
                        "type": "ErrorService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div\n  class=\"text-center error_container\">\n  <mat-icon color=\"primary\">sentiment_very_dissatisfied</mat-icon>\n  <h1>{{'error.title' | translate}}</h1>\n  <p>{{'error.message' | translate}}: {{errorMessage}}</p>\n  <button\n    (click)=\"navigatePreviousPage()\"\n    color=\"primary\"\n    mat-raised-button>\n    {{'error.reload' | translate}}\n  </button>\n</div>\n"
        },
        {
            "name": "FeatureMonthlyReportComponent",
            "id": "component-FeatureMonthlyReportComponent-076245a156af9c56e66fe112ae3d73de26b1487210957de268f2d8c82540de767f3869df9f5cffcb25b953f8eca1bdd3963e49dd847a9bbb0e990fc88931438b",
            "file": "src/app/domains/monthly-report/feature-monthly-report/feature-monthly-report.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-monthly-report",
            "styleUrls": [
                "./feature-monthly-report.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./feature-monthly-report.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "monthlyReport",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MonthlyReport",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "monthlyReportSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "emitRefreshMonthlyReport",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getAllTimeEntries",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getAllTimeEntriesByDate",
                    "args": [
                        {
                            "name": "year",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "month",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "year",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "month",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "refreshMonthlyReport",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "NgClass"
                },
                {
                    "name": "InformationTopBarComponent",
                    "type": "component"
                },
                {
                    "name": "TimeCheckComponent",
                    "type": "component"
                },
                {
                    "name": "EmployeeCheckComponent",
                    "type": "component"
                },
                {
                    "name": "GeneralInfoComponent",
                    "type": "component"
                },
                {
                    "name": "JourneyCheckComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, OnInit} from '@angular/core';\nimport {MonthlyReport} from '@mega/monthly-report/data-model';\nimport {Subscription} from 'rxjs';\nimport {MonthlyReportService} from '@mega/monthly-report/data-service';\nimport {JourneyCheckComponent} from './journey-check/journey-check.component';\nimport {GeneralInfoComponent} from './general-info/general-info.component';\nimport {EmployeeCheckComponent} from './employee-check/employee-check.component';\nimport {TimeCheckComponent} from './time-check/time-check.component';\nimport {InformationTopBarComponent} from './information-top-bar/information-top-bar.component';\nimport {NgClass} from '@angular/common';\n\n@Component({\n  selector: 'app-monthly-report',\n  templateUrl: './feature-monthly-report.component.html',\n  styleUrls: ['./feature-monthly-report.component.scss'],\n  standalone: true,\n  imports: [\n    NgClass,\n    InformationTopBarComponent,\n    TimeCheckComponent,\n    EmployeeCheckComponent,\n    GeneralInfoComponent,\n    JourneyCheckComponent\n  ]\n})\nexport class FeatureMonthlyReportComponent implements OnInit {\n\n  public monthlyReport: MonthlyReport;\n  private monthlyReportSubscription: Subscription;\n\n  constructor(private monthlyReportService: MonthlyReportService) {\n  }\n\n  emitRefreshMonthlyReport() {\n    this.refreshMonthlyReport();\n  }\n\n  ngOnInit(): void {\n    this.getAllTimeEntries();\n  }\n\n  getAllTimeEntriesByDate(year: number, month: number): void {\n    this.monthlyReportSubscription = this.monthlyReportService.getAllByDate(year, month)\n      .subscribe((monthlyReport: MonthlyReport) => {\n        this.monthlyReport = monthlyReport;\n      });\n  }\n\n  getAllTimeEntries(): void {\n    this.monthlyReportSubscription = this.monthlyReportService.getAll()\n      .subscribe((monthlyReport: MonthlyReport) => {\n        if (monthlyReport) {\n          this.monthlyReport = monthlyReport;\n\n          const date = new Date(monthlyReport.initialDate);\n          this.monthlyReportService.selectedMonth.next(date.getMonth() + 1);\n          this.monthlyReportService.selectedYear.next(date.getFullYear());\n          this.emitRefreshMonthlyReport();\n        }\n      });\n  }\n\n  refreshMonthlyReport(): void {\n    if (this.monthlyReport.initialDate == null) {\n      // trigger skeleton loaders\n      this.monthlyReport = null;\n      this.getAllTimeEntriesByDate(this.monthlyReportService.selectedYear.getValue(), this.monthlyReportService.selectedMonth.getValue());\n    } else {\n      // prevent calling both service methods on initializing\n      this.monthlyReport.initialDate = null;\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".fill-parent {\n  display: inline-block;\n  height: calc(100vh - 70px);\n  width: 100vw;\n}\n\n.mega-dash-grid {\n  --padding-mega-grid: 8px;\n  --mega-grid-gap: 16px;\n\n  //Calc-Info: ViewPort - (Information-Bar-Component + padding around grid + gap)\n  height: calc(100% - (130px + (3 * var(--padding-mega-grid)) + var(--mega-grid-gap)));\n  padding: var(--padding-mega-grid) var(--padding-mega-grid) calc(2 * var(--padding-mega-grid));\n\n  --grid-column-count: 4;\n  --grid-item-min-width: 400px;\n  --grid-item-infinite-width: calc((100vw - 16px - 48px) / var(--grid-column-count));\n\n  display: grid;\n  grid-gap: var(--mega-grid-gap);\n\n  grid-template-columns: repeat(auto-fit, minmax(var(--grid-item-min-width), var(--grid-item-infinite-width)));\n  grid-auto-rows: 50%;\n}\n\n// default layout\n@media screen and (min-width: 1664px) {\n  .employee-check-grid {\n    grid-row: span 2 / auto;\n    grid-column: span 2 / auto;\n  }\n\n  .general-info-grid {\n    grid-row: span 2 / auto;\n  }\n}\n\n// disable infinity-width-columns & mid-layout\n@media (min-width: 1264px) and (max-width: 1664px) {\n  .mega-dash-grid {\n    grid-template-columns: repeat(auto-fit, minmax(var(--grid-item-min-width), 1fr));\n  }\n\n  .employee-check-grid {\n    grid-row: 1 / 3;\n    grid-column: 1 / 3;\n  }\n\n  .general-info-grid {\n    grid-row: 3 / 5;\n    grid-column: 1 / 3;\n    padding-bottom: 8px;\n  }\n\n  .journey-check-grid {\n    grid-row: 3 / 5;\n    grid-column: 3 / 4;\n    padding-bottom: 8px;\n  }\n\n  .time-check-grid {\n    grid-row: 1 / 3;\n    grid-column: 3 / 4;\n  }\n}\n\n// use one column, whole screen & tablet/smartphone mode\n@media screen and (max-width: 1264px) {\n  .mega-dash-grid {\n    grid-template-columns: calc(100vw - var(--padding-mega-grid) * 2);\n  }\n\n  .employee-check-grid {\n    grid-row: 1 / 2;\n  }\n\n  .general-info-grid {\n    grid-row: 4 / 5;\n    padding-bottom: 8px;\n  }\n\n  .journey-check-grid {\n    grid-row: 3 / 4;\n  }\n\n  .time-check-grid {\n    grid-row: 2 / 3;\n  }\n}\n\n@media (max-width: 1264px) and (max-height: 900px) {\n  .mega-dash-grid {\n    grid-auto-rows: min-content;\n  }\n\n}\n\n.invalid-date-card {\n  height: calc(100% - 64px);\n  width: calc(100% - 64px);\n  margin: 16px;\n}\n\n\n\n",
                    "styleUrl": "./feature-monthly-report.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "monthlyReportService",
                        "type": "MonthlyReportService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "monthlyReportService",
                        "type": "MonthlyReportService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div [ngClass]=\"'fill-parent'\">\n  <app-information-top-bar\n    [monthlyReport]=\"monthlyReport\"\n    (refreshMonthlyReport)=\"emitRefreshMonthlyReport()\" />\n\n  <div [ngClass]=\"'mega-dash-grid'\">\n    <app-time-check\n      [monthlyReport]=\"monthlyReport\"\n      [ngClass]=\"'time-check-grid'\" />\n\n    <app-employee-check\n      (refreshMonthlyReport)=\"emitRefreshMonthlyReport()\"\n      [monthlyReport]=\"monthlyReport\"\n      [ngClass]=\"'employee-check-grid'\" />\n\n    <app-general-info\n      [monthlyReport]=\"monthlyReport\"\n      [ngClass]=\"'general-info-grid'\" />\n\n    <app-journey-check\n      [monthlyReport]=\"monthlyReport\"\n      [ngClass]=\"'journey-check-grid'\" />\n  </div>\n</div>\n"
        },
        {
            "name": "FeatureOfficeManagementComponent",
            "id": "component-FeatureOfficeManagementComponent-498d3a88d8ada958bbdd01c06e98e58742eac0ba57db3c3da3da20f6443be233bbdbf84172bc8c74512ddb154405662f82880140b7cb9d7e1c43827bd0573419",
            "file": "src/app/domains/office-management/feature-office-management/feature-office-management.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-office-management",
            "styleUrls": [
                "./feature-office-management.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./feature-office-management.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dateSelectionSub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "maxMonthDate",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "selectedMonth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "selectedYear",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 36
                }
            ],
            "methodsClass": [
                {
                    "name": "dateChanged",
                    "args": [
                        {
                            "name": "date",
                            "type": "Moment",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Moment",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "MatToolbarModule",
                    "type": "module"
                },
                {
                    "name": "DatepickerMonthYearComponent",
                    "type": "component"
                },
                {
                    "name": "EnterpriseCardComponent",
                    "type": "component"
                },
                {
                    "name": "ProjectsWithoutLeadsCardComponent",
                    "type": "component"
                },
                {
                    "name": "ProjectOverviewCardComponent",
                    "type": "component"
                },
                {
                    "name": "EmployeeCardComponent",
                    "type": "component"
                },
                {
                    "name": "TranslateModule",
                    "type": "module"
                },
                {
                    "name": "MatBottomSheetModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, OnDestroy, OnInit} from '@angular/core';\nimport * as _moment from 'moment';\nimport {Moment} from 'moment';\nimport {OfficeManagementService} from '@mega/office-management/data-service';\nimport {Subscription, zip} from 'rxjs';\nimport {tap} from 'rxjs/operators';\nimport {TranslateModule} from '@ngx-translate/core';\nimport {EmployeeCardComponent} from './employee-card/employee-card.component';\nimport {ProjectOverviewCardComponent} from './project-overview-card/project-overview-card.component';\nimport {ProjectsWithoutLeadsCardComponent} from './projects-without-leads-card/projects-without-leads-card.component';\nimport {EnterpriseCardComponent} from './enterprise-card/enterprise-card.component';\nimport {DatepickerMonthYearComponent} from '@mega/shared/ui-common';\nimport {MatToolbarModule} from '@angular/material/toolbar';\nimport {MatBottomSheetModule} from '@angular/material/bottom-sheet';\n\nconst moment = _moment;\n\n@Component({\n  selector: 'app-office-management',\n  templateUrl: './feature-office-management.component.html',\n  styleUrls: ['./feature-office-management.component.scss'],\n  standalone: true,\n  imports: [\n    MatToolbarModule,\n    DatepickerMonthYearComponent,\n    EnterpriseCardComponent,\n    ProjectsWithoutLeadsCardComponent,\n    ProjectOverviewCardComponent,\n    EmployeeCardComponent,\n    TranslateModule,\n    MatBottomSheetModule,\n  ]\n})\nexport class FeatureOfficeManagementComponent implements OnInit, OnDestroy {\n\n  selectedYear: number;\n  selectedMonth: number;\n  dateSelectionSub: Subscription;\n  maxMonthDate: number = 1;\n\n  constructor(private omService: OfficeManagementService) {\n  }\n\n  get date() {\n    return moment()\n      .year(this.selectedYear)\n      .month(this.selectedMonth)\n      .date(1)\n      .startOf('day');\n  }\n\n  ngOnInit(): void {\n    this.dateSelectionSub = zip(this.omService.selectedYear, this.omService.selectedMonth)\n      .pipe(\n        tap(value => {\n          this.selectedYear = value[0];\n          this.selectedMonth = value[1];\n        })\n      ).subscribe();\n  }\n\n  ngOnDestroy(): void {\n    this.omService.selectedYear.next(moment().subtract(1, 'month').year());\n    this.omService.selectedMonth.next(moment().subtract(1, 'month').month() + 1);\n\n    this.dateSelectionSub?.unsubscribe();\n  }\n\n  dateChanged(date: Moment) {\n    this.omService.selectedYear.next(moment(date).year());\n    this.omService.selectedMonth.next(moment(date).month() + 1);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./feature-office-management.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "omService",
                        "type": "OfficeManagementService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 39,
                "jsdoctags": [
                    {
                        "name": "omService",
                        "type": "OfficeManagementService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "date": {
                    "name": "date",
                    "getSignature": {
                        "name": "date",
                        "type": "",
                        "returnType": "",
                        "line": 44
                    }
                }
            },
            "templateData": "<mat-toolbar class=\"mat-elevation-z6 select-date-toolbar-row\" color=\"accent\">\n  <div class=\"select-date-toolbar-column\">\n    <span>{{'global.selectPayrollMonth' | translate}}</span>\n    <app-datepicker-month-year (dateChanged)=\"dateChanged($event)\" [date]=\"date\" [maxMonth]=\"maxMonthDate\"></app-datepicker-month-year>\n  </div>\n</mat-toolbar>\n<app-enterprise-card></app-enterprise-card>\n<app-projects-without-leads-card></app-projects-without-leads-card>\n<app-project-overview-card></app-project-overview-card>\n<app-employee-card></app-employee-card>\n"
        },
        {
            "name": "FeatureProjectManagementComponent",
            "id": "component-FeatureProjectManagementComponent-2b6cd8b1fbee4530762b016c8b2dce883148e94aec32ebd5d649f088198c2218b725eefa38ba92d82b85ab9b013a304c9f5bac7c2112a8acba38e7005dea7d63",
            "file": "src/app/domains/project-management/feature-project-management/feature-project-management.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-project-management",
            "styleUrls": [
                "./feature-project-management.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./feature-project-management.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dateSelectionSub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 101
                },
                {
                    "name": "displayedColumns",
                    "defaultValue": "[\n    'select',\n    'employeeName',\n    'projectCheckState',\n    'employeeCheckState',\n    'internalCheckState',\n    'doneCommentsIndicator',\n    'projectHours'\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 82
                },
                {
                    "name": "forProjectName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 97
                },
                {
                    "name": "maxMonthDate",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 100
                },
                {
                    "name": "officeManagementUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 92
                },
                {
                    "name": "pmEntries",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<ProjectManagementEntryViewModel>",
                    "optional": false,
                    "description": "",
                    "line": 81
                },
                {
                    "name": "pmSelectionModels",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<string | SelectionModel<ManagementEntry>>",
                    "optional": false,
                    "description": "",
                    "line": 93
                },
                {
                    "name": "selectedMonth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 95
                },
                {
                    "name": "selectedYear",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 94
                },
                {
                    "name": "showCommentEditor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 96
                },
                {
                    "name": "State",
                    "defaultValue": "State",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 79,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "tooltipPosition",
                    "defaultValue": "'above' as TooltipPosition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 99
                },
                {
                    "name": "tooltipShowDelay",
                    "defaultValue": "500",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 98
                }
            ],
            "methodsClass": [
                {
                    "name": "areAllSelected",
                    "args": [
                        {
                            "name": "projectName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 181,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "projectName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "checkAllProjectCheckStatesDone",
                    "args": [
                        {
                            "name": "pmEntry",
                            "type": "ProjectManagementEntryViewModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 226,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "pmEntry",
                            "type": "ProjectManagementEntryViewModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "closeProjectCheckForSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 234,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "convertDurationToTime",
                    "args": [
                        {
                            "name": "durationInSeconds",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 381,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "durationInSeconds",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "dateChanged",
                    "args": [
                        {
                            "name": "date",
                            "type": "Moment",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 176,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Moment",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "findEntriesForProject",
                    "args": [
                        {
                            "name": "projectName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 389,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "projectName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFilteredAndSortedPmEntries",
                    "args": [
                        {
                            "name": "pmEntry",
                            "type": "ProjectManagementEntry",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "projectCheckState",
                            "type": "State",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "employeeCheckState",
                            "type": "State",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "internalCheckState",
                            "type": "State",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Array<ManagementEntry>",
                    "typeParameters": [],
                    "line": 273,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "pmEntry",
                            "type": "ProjectManagementEntry",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "projectCheckState",
                            "type": "State",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "employeeCheckState",
                            "type": "State",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "internalCheckState",
                            "type": "State",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFormattedDate",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 395,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getPmEntries",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 385,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isAnySelected",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 219,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isProjectStateNotRelevant",
                    "args": [
                        {
                            "name": "projectState",
                            "type": "ProjectState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 335,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "projectState",
                            "type": "ProjectState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "masterToggle",
                    "args": [
                        {
                            "name": "projectName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 185,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "projectName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 140,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onChangeControlBillingState",
                    "args": [
                        {
                            "name": "$event",
                            "type": "MatSelectChange",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "pmEntry",
                            "type": "ProjectManagementEntry",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "controlBillingStateSelect",
                            "type": "ProjectStateSelectComponent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 299,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "MatSelectChange",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pmEntry",
                            "type": "ProjectManagementEntry",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "controlBillingStateSelect",
                            "type": "ProjectStateSelectComponent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onChangeControlProjectState",
                    "args": [
                        {
                            "name": "$event",
                            "type": "MatSelectChange",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "pmEntry",
                            "type": "ProjectManagementEntry",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "controlProjectStateSelect",
                            "type": "ProjectStateSelectComponent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 282,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "MatSelectChange",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pmEntry",
                            "type": "ProjectManagementEntry",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "controlProjectStateSelect",
                            "type": "ProjectStateSelectComponent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onChangePresetControlBillingState",
                    "args": [
                        {
                            "name": "$event",
                            "type": "MatCheckboxChange",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "pmEntry",
                            "type": "ProjectManagementEntry",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 325,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "MatCheckboxChange",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pmEntry",
                            "type": "ProjectManagementEntry",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onChangePresetControlProjectState",
                    "args": [
                        {
                            "name": "$event",
                            "type": "MatCheckboxChange",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "pmEntry",
                            "type": "ProjectManagementEntry",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 315,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "MatCheckboxChange",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pmEntry",
                            "type": "ProjectManagementEntry",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onCommentChange",
                    "args": [
                        {
                            "name": "pmEntry",
                            "type": "ProjectManagementEntry",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "comment",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 344,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "pmEntry",
                            "type": "ProjectManagementEntry",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "comment",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onStartEditing",
                    "args": [
                        {
                            "name": "projectName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 339,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "projectName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openDialog",
                    "args": [
                        {
                            "name": "employee",
                            "type": "Employee",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "project",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 191,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "employee",
                            "type": "Employee",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "project",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "processPmEntries",
                    "args": [],
                    "optional": false,
                    "returnType": "(pmEntries: any) => void",
                    "typeParameters": [],
                    "line": 147,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "updateProjectCheck",
                    "args": [
                        {
                            "name": "$event",
                            "type": "MatSelectChange",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "row",
                            "type": "ManagementEntry",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "project",
                            "type": "ProjectManagementEntryViewModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 263,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "MatSelectChange",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "row",
                            "type": "ManagementEntry",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "project",
                            "type": "ProjectManagementEntryViewModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "MatToolbarModule",
                    "type": "module"
                },
                {
                    "name": "DatepickerMonthYearComponent",
                    "type": "component"
                },
                {
                    "name": "NgIf"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatCardModule",
                    "type": "module"
                },
                {
                    "name": "NgxSkeletonLoaderModule",
                    "type": "module"
                },
                {
                    "name": "MatExpansionModule",
                    "type": "module"
                },
                {
                    "name": "NgFor"
                },
                {
                    "name": "MatTooltipModule",
                    "type": "module"
                },
                {
                    "name": "ProjectStateSelectComponent",
                    "type": "component"
                },
                {
                    "name": "MatCheckboxModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "InlineTextEditorComponent",
                    "type": "component"
                },
                {
                    "name": "NgClass"
                },
                {
                    "name": "MatTableModule",
                    "type": "module"
                },
                {
                    "name": "StateSelectComponent",
                    "type": "component"
                },
                {
                    "name": "StateIndicatorComponent",
                    "type": "component"
                },
                {
                    "name": "DoneCommentsIndicatorComponent",
                    "type": "component"
                },
                {
                    "name": "BillableTimesComponent",
                    "type": "component"
                },
                {
                    "name": "BillableTimesFractionComponent",
                    "type": "component"
                },
                {
                    "name": "TranslateModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, OnDestroy, OnInit} from '@angular/core';\nimport {ProjectManagementEntry, ProjectManagementEntryViewModel} from '@mega/project-management/data-model';\nimport {MatDialog} from '@angular/material/dialog';\nimport {\n  CommentsForEmployeeComponent,\n  DatepickerMonthYearComponent,\n  DoneCommentsIndicatorComponent,\n  InlineTextEditorComponent,\n  ProjectStateSelectComponent,\n  StateIndicatorComponent,\n  StateSelectComponent\n} from '@mega/shared/ui-common';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {Comment, Config, Employee, ManagementEntry, ProjectState, State, Step} from '@mega/shared/data-model';\nimport {ProjectManagementService} from '@mega/project-management/data-service';\nimport {\n  CommentService,\n  ConfigService,\n  ProjectCommentService,\n  ProjectEntriesService,\n  SnackbarService,\n  StepEntriesService\n} from '@mega/shared/data-service';\n\nimport * as _moment from 'moment';\nimport {Moment} from 'moment';\nimport {configuration} from '@mega/shared/util-constant';\nimport {MatSelectChange} from '@angular/material/select';\nimport {MatCheckboxChange, MatCheckboxModule} from '@angular/material/checkbox';\nimport {TranslateModule, TranslateService} from '@ngx-translate/core';\nimport {finalize, forkJoin, mergeMap, Subscription, switchMap, tap, zip} from 'rxjs';\nimport * as ProjectManagementComparator from '@mega/project-management/util';\nimport {MatTooltipModule, TooltipPosition} from '@angular/material/tooltip';\nimport {BillableTimesComponent, BillableTimesFractionComponent} from '@mega/project-management/ui-common';\nimport {MatTableModule} from '@angular/material/table';\nimport {MatIconModule} from '@angular/material/icon';\nimport {FormsModule} from '@angular/forms';\nimport {MatExpansionModule} from '@angular/material/expansion';\nimport {NgxSkeletonLoaderModule} from 'ngx-skeleton-loader';\nimport {MatCardModule} from '@angular/material/card';\nimport {MatButtonModule} from '@angular/material/button';\nimport {NgClass, NgFor, NgIf} from '@angular/common';\nimport {MatToolbarModule} from '@angular/material/toolbar';\n\nconst moment = _moment;\n\n@Component({\n  selector: 'app-project-management',\n  templateUrl: './feature-project-management.component.html',\n  styleUrls: ['./feature-project-management.component.scss'],\n  standalone: true,\n  imports: [\n    MatToolbarModule,\n    DatepickerMonthYearComponent,\n    NgIf,\n    MatButtonModule,\n    MatCardModule,\n    NgxSkeletonLoaderModule,\n    MatExpansionModule,\n    NgFor,\n    MatTooltipModule,\n    ProjectStateSelectComponent,\n    MatCheckboxModule,\n    FormsModule,\n    MatIconModule,\n    InlineTextEditorComponent,\n    NgClass,\n    MatTableModule,\n    StateSelectComponent,\n    StateIndicatorComponent,\n    DoneCommentsIndicatorComponent,\n    BillableTimesComponent,\n    BillableTimesFractionComponent,\n    TranslateModule\n  ]\n})\nexport class FeatureProjectManagementComponent implements OnInit, OnDestroy {\n\n  public State = State;\n\n  pmEntries: Array<ProjectManagementEntryViewModel>;\n  displayedColumns = [\n    'select',\n    'employeeName',\n    'projectCheckState',\n    'employeeCheckState',\n    'internalCheckState',\n    'doneCommentsIndicator',\n    'projectHours'\n  ];\n\n  officeManagementUrl: string;\n  pmSelectionModels: Map<string, SelectionModel<ManagementEntry>>;\n  selectedYear: number;\n  selectedMonth: number;\n  showCommentEditor = false;\n  forProjectName: string;\n  tooltipShowDelay = 500;\n  tooltipPosition = 'above' as TooltipPosition;\n  maxMonthDate = 1;\n  dateSelectionSub: Subscription;\n\n  constructor(private dialog: MatDialog,\n              private pmService: ProjectManagementService,\n              private stepEntryService: StepEntriesService,\n              private commentService: CommentService,\n              private configService: ConfigService,\n              private projectEntryService: ProjectEntriesService,\n              private snackbarService: SnackbarService,\n              private translate: TranslateService,\n              private projectCommentService: ProjectCommentService) {\n  }\n\n  get date() {\n    return moment()\n      .year(this.selectedYear)\n      .month(this.selectedMonth)\n      .date(1)\n      .startOf('day');\n  }\n\n  ngOnInit(): void {\n    this.configService.getConfig().subscribe((config: Config) => {\n      this.officeManagementUrl = config.zepOrigin + '/' + configuration.OFFICE_MANAGEMENT_SEGMENT;\n    });\n\n    this.dateSelectionSub = zip(this.pmService.selectedYear, this.pmService.selectedMonth)\n      .pipe(\n        tap(value => {\n          this.selectedYear = value[0];\n          this.selectedMonth = value[1];\n        }),\n        tap(() => {\n          this.pmEntries = null;\n        }),\n        switchMap(() => this.getPmEntries())\n      ).subscribe(this.processPmEntries());\n  }\n\n  ngOnDestroy(): void {\n    this.pmService.selectedYear.next(moment().subtract(1, 'month').year());\n    this.pmService.selectedMonth.next(moment().subtract(1, 'month').month() + 1);\n\n    this.dateSelectionSub?.unsubscribe();\n  }\n\n  private processPmEntries() {\n    return pmEntries => {\n      this.pmEntries = pmEntries;\n      this.pmSelectionModels = new Map<string, SelectionModel<ManagementEntry>>();\n      this.pmEntries.forEach(pmEntry => {\n          this.pmSelectionModels.set(pmEntry.projectName, new SelectionModel<ManagementEntry>(true, []));\n\n          const allDone = this.getFilteredAndSortedPmEntries(pmEntry, State.DONE, State.DONE, State.DONE);\n          const notAllDone = pmEntry.entries.filter(entry => !allDone.find(done => done.employee.email === entry.employee.email))\n            .sort((a, b) => a.employee.lastname.concat(a.employee.firstname)\n              .localeCompare(b.employee.lastname.concat(b.employee.firstname)));\n\n          pmEntry.entries = notAllDone.concat(allDone);\n\n          // call this method AFTER pmEntry.entries modifcations are done\n          this.checkAllProjectCheckStatesDone(pmEntry);\n\n          this.projectCommentService.get(this.getFormattedDate(), pmEntry.projectName)\n            .subscribe(projectComment => {\n              pmEntry.projectComment = projectComment;\n            });\n        }\n      );\n\n      // reason for reverse: see comparePmEntriesFn doc\n      this.pmEntries.sort(ProjectManagementComparator.comparePmEntriesFn).reverse();\n    };\n  }\n\n  dateChanged(date: Moment): void {\n    this.pmService.selectedYear.next(moment(date).year());\n    this.pmService.selectedMonth.next(moment(date).month() + 1);\n  }\n\n  areAllSelected(projectName: string): boolean {\n    return this.pmSelectionModels.get(projectName).selected.length === this.findEntriesForProject(projectName).length;\n  }\n\n  masterToggle(projectName: string): void {\n    this.areAllSelected(projectName) ?\n      this.pmSelectionModels.get(projectName).clear() :\n      this.findEntriesForProject(projectName).forEach(row => this.pmSelectionModels.get(projectName).select(row));\n  }\n\n  openDialog(employee: Employee, project: string): void {\n    this.commentService.getCommentsForEmployee(employee.email, this.getFormattedDate())\n      .subscribe((comments: Array<Comment>) => {\n        const dialogRef = this.dialog.open(CommentsForEmployeeComponent,\n          {\n            width: '100%',\n            autoFocus: false\n          }\n        );\n\n        dialogRef.componentInstance.employee = employee;\n        dialogRef.componentInstance.comments = comments;\n        dialogRef.componentInstance.step = Step.CONTROL_TIME_EVIDENCES;\n        dialogRef.componentInstance.project = project;\n        dialogRef.componentInstance.currentMonthYear = this.getFormattedDate();\n\n        dialogRef.disableClose = true;\n        dialogRef.componentInstance.commentHasChanged.pipe(\n          tap(() => {\n            this.pmEntries = null;\n          }),\n          mergeMap(() => {\n            return this.getPmEntries();\n          })\n        ).subscribe(this.processPmEntries());\n      });\n  }\n\n  isAnySelected(): boolean {\n    if (this.pmSelectionModels) {\n      return Array.from(this.pmSelectionModels.values())\n        .filter(pmSelectionModel => pmSelectionModel?.selected.length > 0).length > 0;\n    }\n  }\n\n  checkAllProjectCheckStatesDone(pmEntry: ProjectManagementEntryViewModel) {\n    if (!pmEntry) {\n      return;\n    }\n\n    pmEntry.allProjectCheckStatesDone = pmEntry.entries.every(entry => entry.projectCheckState === State.DONE);\n  }\n\n  closeProjectCheckForSelected(): void {\n    const closeState = State.DONE;\n\n    for (const [projectName, selectionModel] of this.pmSelectionModels.entries()) {\n      if (selectionModel.selected.length > 0) {\n        const $requests = selectionModel.selected.map(entry => {\n          return this.stepEntryService.updateEmployeeStateForProject(entry.employee, projectName, this.getFormattedDate(), closeState)\n        });\n\n        // call checkAllProjectCheckStatesDone after all requests are done, because it depends on emplyoee's states\n        forkJoin($requests)\n          .pipe(\n            finalize(() => selectionModel.clear())\n          )\n          .subscribe(results => {\n            results.forEach((success, index) => {\n              if (success) {\n                selectionModel.selected[index].projectCheckState = closeState;\n              }\n\n            });\n\n            this.checkAllProjectCheckStatesDone(this.pmEntries.find(entry => entry.projectName === projectName));\n          });\n\n      }\n    }\n  }\n\n  updateProjectCheck($event: MatSelectChange, row: ManagementEntry, project: ProjectManagementEntryViewModel) {\n    const newState: State = $event.value;\n    this.stepEntryService\n      .updateEmployeeStateForProject(row.employee, project.projectName, this.getFormattedDate(), newState)\n      .subscribe(() => {\n        row.projectCheckState = newState;\n        this.checkAllProjectCheckStatesDone(project);\n      });\n  }\n\n  getFilteredAndSortedPmEntries(pmEntry: ProjectManagementEntry, projectCheckState: State, employeeCheckState: State,\n                                internalCheckState: State): Array<ManagementEntry> {\n    return pmEntry.entries\n      .filter(val => val.projectCheckState === projectCheckState &&\n        val.employeeCheckState === employeeCheckState && val.internalCheckState === internalCheckState)\n      .sort((a, b) => a.employee.lastname.concat(a.employee.firstname)\n        .localeCompare(b.employee.lastname.concat(b.employee.firstname)));\n  }\n\n  onChangeControlProjectState($event: MatSelectChange, pmEntry: ProjectManagementEntry,\n                              controlProjectStateSelect: ProjectStateSelectComponent): void {\n    const newValue = $event.value as ProjectState;\n    const preset = newValue !== 'NOT_RELEVANT' ? false : pmEntry.presetControlProjectState;\n\n    this.projectEntryService.updateProjectEntry(newValue, preset, pmEntry.projectName, 'CONTROL_PROJECT', this.getFormattedDate())\n      .subscribe((success) => {\n        if (success) {\n          pmEntry.controlProjectState = newValue;\n          pmEntry.presetControlProjectState = preset;\n        } else {\n          this.snackbarService.showSnackbarWithMessage(this.translate.instant('project-management.updateStatusError'));\n          controlProjectStateSelect.value = pmEntry.controlProjectState;\n        }\n      });\n  }\n\n  onChangeControlBillingState($event: MatSelectChange, pmEntry: ProjectManagementEntry, controlBillingStateSelect: ProjectStateSelectComponent): void {\n    const newValue = $event.value as ProjectState;\n    const preset = newValue !== 'NOT_RELEVANT' ? false : pmEntry.presetControlBillingState;\n\n    this.projectEntryService.updateProjectEntry(newValue, preset, pmEntry.projectName, 'CONTROL_BILLING', this.getFormattedDate())\n      .subscribe((success) => {\n        if (success) {\n          pmEntry.controlBillingState = newValue;\n          pmEntry.presetControlBillingState = preset;\n        } else {\n          this.snackbarService.showSnackbarWithMessage(this.translate.instant('project-management.updateStatusError'));\n          controlBillingStateSelect.value = pmEntry.controlBillingState;\n        }\n      });\n  }\n\n  onChangePresetControlProjectState($event: MatCheckboxChange, pmEntry: ProjectManagementEntry): void {\n    this.projectEntryService.updateProjectEntry(pmEntry.controlProjectState, pmEntry.presetControlProjectState, pmEntry.projectName, 'CONTROL_PROJECT', this.getFormattedDate())\n      .subscribe(success => {\n        if (!success) {\n          this.snackbarService.showSnackbarWithMessage(this.translate.instant('project-management.updateStatusError'));\n          pmEntry.presetControlProjectState = !$event.checked;\n        }\n      });\n  }\n\n  onChangePresetControlBillingState($event: MatCheckboxChange, pmEntry: ProjectManagementEntry): void {\n    this.projectEntryService.updateProjectEntry(pmEntry.controlBillingState, pmEntry.presetControlBillingState, pmEntry.projectName, 'CONTROL_BILLING', this.getFormattedDate())\n      .subscribe(success => {\n        if (!success) {\n          this.snackbarService.showSnackbarWithMessage(this.translate.instant('project-management.updateStatusError'));\n          pmEntry.presetControlBillingState = !$event.checked;\n        }\n      });\n  }\n\n  isProjectStateNotRelevant(projectState: ProjectState): boolean {\n    return projectState === ProjectState.NOT_RELEVANT;\n  }\n\n  onStartEditing(projectName: string): void {\n    this.forProjectName = projectName;\n    this.showCommentEditor = true;\n  }\n\n  onCommentChange(pmEntry: ProjectManagementEntry, comment: string): void {\n    this.showCommentEditor = false;\n    this.forProjectName = null;\n\n    let returnClicked = false;\n\n    // Avoid reloading of page when the return button was clicked\n    if (pmEntry.projectComment) {\n      if (pmEntry.projectComment.comment !== comment) {\n        const oldComment = pmEntry.projectComment.comment;\n        pmEntry.projectComment.comment = comment;\n        this.projectCommentService.update(pmEntry.projectComment)\n          .subscribe((success) => {\n            if (!success) {\n              this.snackbarService.showSnackbarWithMessage(this.translate.instant('project-management.updateProjectCommentError'));\n              pmEntry.projectComment.comment = oldComment;\n            }\n          });\n      } else {\n        returnClicked = true;\n      }\n    } else {\n      // Avoid reloading of page when the return button was clicked\n      if (comment) {\n        this.projectCommentService.create(comment, this.getFormattedDate(), pmEntry.projectName)\n          .subscribe(projectComment => {\n            pmEntry.projectComment = projectComment;\n          });\n      } else {\n        returnClicked = true;\n      }\n    }\n    if (returnClicked) {\n      this.snackbarService.showSnackbarWithMessage(this.translate.instant('project-management.projectCommentNotUpdated'));\n    }\n  }\n\n  convertDurationToTime(durationInSeconds: number): number {\n    return durationInSeconds / 60 / 60;\n  }\n\n  private getPmEntries() {\n    return this.pmService.getEntries(this.selectedYear, this.selectedMonth, false);\n  }\n\n  private findEntriesForProject(projectName: string) {\n    return this.pmEntries.filter(entry => {\n      return entry.projectName === projectName;\n    })[0].entries;\n  }\n\n  private getFormattedDate() {\n    return moment().year(this.selectedYear).month(this.selectedMonth - 1).date(1).format(configuration.dateFormat);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'styles/colors';\n\n.main_container {\n  height: 100%;\n  min-height: 100%;\n  min-width: 100%;\n  width: 100%;\n  flex-direction: column;\n  box-sizing: border-box;\n  display: flex;\n  gap: 10px;\n}\n\n.actions_container {\n  flex-direction: row;\n  box-sizing: border-box;\n  display: flex;\n  place-content: center space-between;\n  align-items: center;\n}\n\ntable {\n  width: 100%;\n}\n\nth, td {\n  font-size: 17px;\n}\n\na {\n  color: inherit;\n  text-decoration: none;\n}\n\na:hover {\n  color: $mega-success-green;\n}\n\n.headers-align .mat-expansion-panel-header-title,\n.headers-align .mat-expansion-panel-header-description {\n  flex-basis: 0;\n}\n\nmat-panel-title {\n  flex-grow: 0.5;\n}\n\nmat-panel-description {\n  flex-grow: 0.4;\n}\n\n.headers-align mat-expansion-panel-header {\n  margin-left: 10px;\n}\n\n.headers-align .mat-expansion-panel-header-description,\n.headers-align .mat-expansion-panel-header-title {\n  align-items: center;\n}\n\ntable.projectActions {\n  width: auto;\n}\n\ntable.projectActions > th, td {\n  font-size: inherit;\n}\n\ntr.spacing > td {\n  padding-top: 5px;\n}\n\n.preset-next-month {\n  margin-left: 15px;\n}\n\n.label {\n  padding-right: 15px;\n}\n\n.mat-expansion-panel-header-description {\n  display: flex;\n\n  > :nth-child(2) {\n    flex-grow: 1;\n  }\n}\n\n.comment-container {\n  display: flex;\n  padding-left: 15px;\n  white-space: pre-wrap;\n\n  > :nth-child(1) {\n    flex-grow: 1;\n    max-width: 600px;\n  }\n}\n",
                    "styleUrl": "./feature-project-management.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "pmService",
                        "type": "ProjectManagementService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "stepEntryService",
                        "type": "StepEntriesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "commentService",
                        "type": "CommentService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "configService",
                        "type": "ConfigService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "projectEntryService",
                        "type": "ProjectEntriesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "snackbarService",
                        "type": "SnackbarService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "projectCommentService",
                        "type": "ProjectCommentService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 101,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "pmService",
                        "type": "ProjectManagementService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "stepEntryService",
                        "type": "StepEntriesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "commentService",
                        "type": "CommentService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "configService",
                        "type": "ConfigService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "projectEntryService",
                        "type": "ProjectEntriesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackbarService",
                        "type": "SnackbarService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "projectCommentService",
                        "type": "ProjectCommentService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "date": {
                    "name": "date",
                    "getSignature": {
                        "name": "date",
                        "type": "",
                        "returnType": "",
                        "line": 114
                    }
                }
            },
            "templateData": "<div class=\"main_container\">\n  <div>\n    <mat-toolbar class=\"mat-elevation-z6\" color=\"accent\">\n      <mat-toolbar-row class=\"select-date-toolbar-row\">\n        <div class=\"select-date-toolbar-column\">\n          <span>{{'global.selectPayrollMonth' | translate}}</span>\n          <app-datepicker-month-year (dateChanged)=\"dateChanged($event)\" [date]=\"date\" [maxMonth]=\"maxMonthDate\"></app-datepicker-month-year>\n        </div>\n      </mat-toolbar-row>\n\n      <mat-toolbar-row class=\"actions_container\" *ngIf=\"isAnySelected()\">\n        <h2>{{'project-management.actions' | translate}}</h2>\n        <button (click)=\"closeProjectCheckForSelected()\"\n                mat-raised-button>{{'project-management.doneBtn' | translate}}</button>\n      </mat-toolbar-row>\n    </mat-toolbar>\n  </div>\n  <div class=\"mat-elevation-z6\">\n    <mat-card *ngIf=\"!pmEntries; else datatable\">\n      <mat-card-content>\n        <ngx-skeleton-loader [theme]=\"{ height: '125px' }\"\n                             appearance=\"line\"></ngx-skeleton-loader>\n        <ngx-skeleton-loader [theme]=\"{ height: '48px' }\"\n                             count=\"3\"\n                             appearance=\"line\"></ngx-skeleton-loader>\n        <ngx-skeleton-loader [theme]=\"{ height: '125px', 'margin-top': '25px' }\"\n                             appearance=\"line\"></ngx-skeleton-loader>\n        <ngx-skeleton-loader [theme]=\"{ height: '48px' }\"\n                             count=\"3\"\n                             appearance=\"line\"></ngx-skeleton-loader>\n      </mat-card-content>\n    </mat-card>\n\n    <ng-template #datatable>\n      <mat-accordion *ngIf=\"pmEntries?.length > 0; else noPmEntriesFound\" [multi]=\"true\"\n                     class=\"headers-align\">\n        <mat-expansion-panel *ngFor=\"let pmEntry of pmEntries, let i = index\" [expanded]=\"true\"\n                             class=\"mat-elevation-z6\">\n          <mat-expansion-panel-header [collapsedHeight]=\"'fit-content'\"\n                                      [expandedHeight]=\"'fit-content'\"\n                                      style=\"min-height: 125px;\">\n            <mat-panel-title>\n              <strong>{{pmEntry.projectName}}</strong>\n            </mat-panel-title>\n            <div class=\"mat-expansion-panel-header-description\">\n              <table (click)=\"$event.stopPropagation()\" (keydown)=\"$event.stopPropagation()\" class=\"projectActions\">\n                <tbody>\n                <tr>\n                  <td class=\"label\">\n                  <span [matTooltipPosition]=\"tooltipPosition\"\n                        [matTooltipShowDelay]=\"tooltipShowDelay\"\n                        matTooltip=\"{{'project-management.tooltips.projectTimeState' | translate}}\"\n                        matTooltipClass=\"mega-custom-tooltip\">\n              {{'project-management.projectTimeState' | translate}}\n            </span>\n                  </td>\n                  <td>\n                    <app-project-state-select data-cy=\"project-controlling\" #controlProjectStateSelect\n                                              (selectionChange)=\"onChangeControlProjectState($event, pmEntry, controlProjectStateSelect)\"\n                                              [value]=\"pmEntry.controlProjectState\"></app-project-state-select>\n                    <mat-checkbox (change)=\"onChangePresetControlProjectState($event, pmEntry)\"\n                                  *ngIf=\"isProjectStateNotRelevant(pmEntry.controlProjectState)\"\n                                  [(ngModel)]=\"pmEntry.presetControlProjectState\"\n                                  class=\"preset-next-month\">\n                      {{'project-management.presetMonth' | translate}}\n                    </mat-checkbox>\n                  </td>\n                </tr>\n                <tr class=\"spacing\">\n                  <td class=\"label\">\n                  <span [matTooltipPosition]=\"tooltipPosition\"\n                        [matTooltipShowDelay]=\"tooltipShowDelay\"\n                        matTooltip=\"{{'project-management.tooltips.billingState' | translate}}\"\n                        matTooltipClass=\"mega-custom-tooltip\">\n              {{'project-management.billingState' | translate}}\n            </span>\n                  </td>\n                  <td class=\"states\">\n                    <app-project-state-select data-cy=\"billing\" #controlBillingStateSelect\n                                              (selectionChange)=\"onChangeControlBillingState($event, pmEntry, controlBillingStateSelect)\"\n                                              [value]=\"pmEntry.controlBillingState\"></app-project-state-select>\n                    <mat-checkbox (change)=\"onChangePresetControlBillingState($event, pmEntry)\"\n                                  *ngIf=\"isProjectStateNotRelevant(pmEntry.controlBillingState)\"\n                                  [(ngModel)]=\"pmEntry.presetControlBillingState\"\n                                  class=\"preset-next-month\">\n                      {{'project-management.presetMonth' | translate}}\n                    </mat-checkbox>\n                  </td>\n                </tr>\n                </tbody>\n              </table>\n              <div (click)=\"$event.stopPropagation()\" (keydown)=\"$event.stopPropagation()\" class=\"comment-container\">\n                <p (click)=\"onStartEditing(pmEntry.projectName)\"\n                   *ngIf=\"pmEntry.projectComment?.comment && forProjectName !== pmEntry.projectName\"\n                   class=\"action-label\"\n                   style=\"max-width: 800px\">{{ pmEntry.projectComment?.comment }}</p>\n                <button (click)=\"onStartEditing(pmEntry.projectName)\"\n                        *ngIf=\"!pmEntry.projectComment?.comment && forProjectName !== pmEntry.projectName\"\n                        [attr.aria-label]=\"'global.addComment' | translate\"\n                        class=\"btn-addComment gepardec-icon-button\"\n                        mat-icon-button\n                        matTooltip=\"{{'global.addComment' | translate}}\"\n                        matTooltipShowDelay=\"1000\">\n                  <mat-icon>add</mat-icon>\n                </button>\n                <app-inline-text-editor (commentChange)=\"onCommentChange(pmEntry, $event)\"\n                                        *ngIf=\"showCommentEditor && forProjectName === pmEntry.projectName\"\n                                        [comment]=\"pmEntry.projectComment?.comment\"\n                                        style=\"flex-grow: 1; max-width: 600px\"></app-inline-text-editor>\n              </div>\n            </div>\n            <mat-panel-description>\n            <span [ngClass]=\"pmEntry.allProjectCheckStatesDone ? 'green' : 'red'\">\n              {{'project-management.employeeDone' | translate}}\n            </span>\n            </mat-panel-description>\n          </mat-expansion-panel-header>\n\n          <!--        TODO: Do we want an elevated table here, to match styling of OM view?-->\n          <div class=\"table-container\">\n            <mat-table [dataSource]=\"pmEntry.entries\">\n              <ng-container matColumnDef=\"select\">\n                <mat-header-cell *matHeaderCellDef>\n                  <mat-checkbox (change)=\"$event ? masterToggle(pmEntry.projectName) : null\"\n                                [checked]=\"pmSelectionModels.get(pmEntry.projectName)?.hasValue() && areAllSelected(pmEntry.projectName)\"\n                                [indeterminate]=\"pmSelectionModels.get(pmEntry.projectName)?.hasValue() && !areAllSelected(pmEntry.projectName)\">\n                  </mat-checkbox>\n                </mat-header-cell>\n                <mat-cell *matCellDef=\"let row\">\n                  <mat-checkbox (change)=\"$event ? pmSelectionModels.get(pmEntry.projectName).toggle(row) : null\"\n                                (click)=\"$event.stopPropagation()\"\n                                [checked]=\"pmSelectionModels.get(pmEntry.projectName)?.isSelected(row)\">\n                  </mat-checkbox>\n                </mat-cell>\n                <mat-footer-cell *matFooterCellDef></mat-footer-cell>\n              </ng-container>\n\n              <ng-container matColumnDef=\"employeeName\">\n                <mat-header-cell\n                  *matHeaderCellDef>{{'project-management.table.employeeName' | translate}}</mat-header-cell>\n                <mat-cell *matCellDef=\"let row\" class=\"font-weight-bold\">\n                  <span class=\"mobile-label\">{{'project-management.table.employeeName' | translate}}</span>\n                  <a [href]=\"officeManagementUrl + row.employee.userId\"\n                     target=\"_blank\">\n                    <strong>{{row.employee.firstname}} {{row.employee.lastname}}</strong>\n                  </a>\n                </mat-cell>\n                <mat-footer-cell *matFooterCellDef></mat-footer-cell>\n              </ng-container>\n\n              <ng-container matColumnDef=\"projectCheckState\">\n                <mat-header-cell *matHeaderCellDef class=\"text-center\"\n                >{{'project-management.table.projectCheckState' | translate}}</mat-header-cell>\n                <mat-cell *matCellDef=\"let row\" class=\"text-center\">\n                  <span class=\"mobile-label\">{{'project-management.table.projectCheckState' | translate}}</span>\n                  <app-state-select data-cy=\"project-state\"\n                                    (selectionChange)=\"updateProjectCheck($event, row, pmEntry)\"\n                                    [value]=\"row.projectCheckState\"></app-state-select>\n                </mat-cell>\n                <mat-footer-cell *matFooterCellDef></mat-footer-cell>\n              </ng-container>\n\n              <ng-container matColumnDef=\"employeeCheckState\">\n                <mat-header-cell *matHeaderCellDef class=\"text-center\"\n                >{{'project-management.table.employeeCheckState' | translate}}</mat-header-cell>\n                <mat-cell *matCellDef=\"let row\" class=\"text-center\">\n                  <span class=\"mobile-label\">{{'project-management.table.employeeCheckState' | translate}}</span>\n\n                  <div\n                    matTooltipPosition=\"above\"\n                    [matTooltipShowDelay]=\"100\"\n                    [matTooltip]=\"row.employeeCheckStateReason\"\n                    matTooltipClass=\"mega-custom-tooltip\">\n                    <app-state-indicator [state]=\"row.employeeCheckState\" data-cy=\"employee-check\"></app-state-indicator>\n                  </div>\n\n                </mat-cell>\n                <mat-footer-cell *matFooterCellDef></mat-footer-cell>\n              </ng-container>\n\n              <ng-container matColumnDef=\"internalCheckState\">\n                <mat-header-cell *matHeaderCellDef class=\"text-center\"\n                >{{'project-management.table.internalCheckState' | translate}}</mat-header-cell>\n                <mat-cell *matCellDef=\"let row\" class=\"text-center\">\n                  <span class=\"mobile-label\">{{'project-management.table.internalCheckState' | translate}}</span>\n                  <app-state-indicator data-cy=\"internal-check\" [state]=\"row.internalCheckState\"></app-state-indicator>\n                </mat-cell>\n                <mat-footer-cell *matFooterCellDef></mat-footer-cell>\n              </ng-container>\n\n              <ng-container matColumnDef=\"doneCommentsIndicator\">\n                <mat-header-cell *matHeaderCellDef\n                                 class=\"text-center\">{{'project-management.table.comments' | translate}}</mat-header-cell>\n                <mat-cell *matCellDef=\"let row\" class=\"text-center\">\n                  <span class=\"mobile-label\">{{'project-management.table.comments' | translate}}</span>\n                  <button (click)=\"openDialog(row.employee, pmEntry.projectName)\"\n                          data-cy=\"open-comments\"\n                          aria-label=\"comment\"\n                          mat-button>\n                    <mat-icon class=\"done-comments-indicator-icon\">comment</mat-icon>\n                    <app-done-comments-indicator [finishedComments]=\"row.finishedComments\"\n                                                 [totalComments]=\"row.totalComments\"></app-done-comments-indicator>\n                  </button>\n                </mat-cell>\n                <mat-footer-cell *matFooterCellDef></mat-footer-cell>\n              </ng-container>\n\n              <ng-container matColumnDef=\"projectHours\">\n                <mat-header-cell *matHeaderCellDef\n                                 class=\"text-center\">{{'project-management.table.projectHours' | translate}}</mat-header-cell>\n                <mat-cell *matCellDef=\"let row\">\n                  <span class=\"mobile-label\">{{'project-management.table.projectHours' | translate}}</span>\n                  <app-billable-times [billableTimes]=\"row.billableTime\"\n                                      [nonBillableTimes]=\"row.nonBillableTime\"></app-billable-times>\n                </mat-cell>\n\n                <mat-footer-cell *matFooterCellDef>\n                  <strong>\n                    <app-billable-times-fraction\n                      [billableTimes]=\"convertDurationToTime(pmEntry.aggregatedBillableWorkTimeInSeconds)\"\n                      [nonBillableTimes]=\"convertDurationToTime(pmEntry.aggregatedNonBillableWorkTimeInSeconds)\"></app-billable-times-fraction>\n                  </strong>\n                </mat-footer-cell>\n              </ng-container>\n\n              <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\n              <mat-row *matRowDef=\"let row; columns: displayedColumns;\"></mat-row>\n              <mat-footer-row *matFooterRowDef=\"displayedColumns\">Total</mat-footer-row>\n            </mat-table>\n          </div>\n        </mat-expansion-panel>\n      </mat-accordion>\n    </ng-template>\n  </div>\n  <ng-template #noPmEntriesFound>\n    <mat-card>{{'project-management.noPmEntriesFound' | translate}}</mat-card>\n  </ng-template>\n</div>\n\n"
        },
        {
            "name": "GeneralInfoComponent",
            "id": "component-GeneralInfoComponent-c6f8278974abffcc92176e315f387575349c2f114ff12fb1f2e02b10781fb44232c75d528d860e64a101613883ee468df56ac964741316e39ccfdc60cc76af3a",
            "file": "src/app/domains/monthly-report/feature-monthly-report/general-info/general-info.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-general-info",
            "styleUrls": [
                "./general-info.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./general-info.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "monthlyReport",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "MonthlyReport",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dateSelectionSub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "displayedColumns",
                    "defaultValue": "['description', 'value', 'unit']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "monthlyReportService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MonthlyReportService",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "selectedDateStr",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "calculateBillingPercentage",
                    "args": [
                        {
                            "name": "totalWorkingTime",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "billableTime",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "totalWorkingTime",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "billableTime",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "calculateDynamicValue",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toGeneralInfoData",
                    "args": [],
                    "optional": false,
                    "returnType": "GeneralInfoData[]",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "MatCardModule",
                    "type": "module"
                },
                {
                    "name": "NgIf"
                },
                {
                    "name": "NgxSkeletonLoaderModule",
                    "type": "module"
                },
                {
                    "name": "MatTableModule",
                    "type": "module"
                },
                {
                    "name": "DecimalPipe",
                    "type": "pipe"
                },
                {
                    "name": "TranslateModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Inject, Input, LOCALE_ID, OnChanges, OnDestroy, OnInit, SimpleChanges} from '@angular/core';\nimport {GeneralInfoData, MonthlyReport} from '@mega/monthly-report/data-model';\nimport {MonthlyReportService} from '@mega/monthly-report/data-service';\nimport {Subscription, zip} from 'rxjs';\nimport {tap} from 'rxjs/operators';\nimport {toMonthYearString} from '@mega/shared/util-common';\nimport {TranslateModule} from '@ngx-translate/core';\nimport {MatTableModule} from '@angular/material/table';\nimport {NgxSkeletonLoaderModule} from 'ngx-skeleton-loader';\nimport {DecimalPipe, NgIf} from '@angular/common';\nimport {MatCardModule} from '@angular/material/card';\n\n@Component({\n  selector: 'app-general-info',\n  templateUrl: './general-info.component.html',\n  styleUrls: ['./general-info.component.scss'],\n  standalone: true,\n  imports: [\n    MatCardModule,\n    NgIf,\n    NgxSkeletonLoaderModule,\n    MatTableModule,\n    DecimalPipe,\n    TranslateModule\n  ]\n})\nexport class GeneralInfoComponent implements OnInit, OnChanges, OnDestroy {\n\n  @Input() monthlyReport: MonthlyReport;\n\n  displayedColumns = ['description', 'value', 'unit'];\n  public selectedDateStr;\n  private dateSelectionSub: Subscription;\n\n  constructor(public monthlyReportService: MonthlyReportService, @Inject(LOCALE_ID) private locale: string) {\n  }\n\n  ngOnInit() {\n    this.dateSelectionSub = zip(this.monthlyReportService.selectedYear, this.monthlyReportService.selectedMonth)\n      .pipe(\n        tap(value => {\n          this.selectedDateStr = toMonthYearString(value[0], value[1] - 1, this.locale);\n        })\n      ).subscribe();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.monthlyReport) {\n      this.calculateDynamicValue();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.dateSelectionSub?.unsubscribe();\n  }\n\n  calculateBillingPercentage(totalWorkingTime: string, billableTime: string): number {\n    const spTotalWorkingTime: string[] = totalWorkingTime.split(':');\n    const spBillableTime: string[] = billableTime.split(':');\n\n    // if split is not possible return 0\n    if (spTotalWorkingTime.length <= 1 || spBillableTime.length <= 1) {\n      return 0;\n    }\n\n    this.monthlyReportService.totalWorkingTimeHours = ((+spTotalWorkingTime[0] * 60) + (+spTotalWorkingTime[1])) / 60;\n    this.monthlyReportService.billableTimeHours = ((+spBillableTime[0] * 60) + (+spBillableTime[1])) / 60;\n\n    // prevent division by zero\n    if (this.monthlyReportService.totalWorkingTimeHours === 0 || this.monthlyReportService.billableTimeHours === 0) {\n      return 0;\n    }\n\n    return (this.monthlyReportService.billableTimeHours / this.monthlyReportService.totalWorkingTimeHours) * 100;\n  }\n\n  calculateDynamicValue() {\n    if (this.monthlyReport) {\n      this.monthlyReportService.billablePercentage = this.calculateBillingPercentage(this.monthlyReport.totalWorkingTime\n        , this.monthlyReport.billableTime);\n    }\n  }\n\n  toGeneralInfoData(): GeneralInfoData[] {\n    return [\n      {\n        description: 'monthly-report.generalInfo.workingTime',\n        unit: 'monthly-report.generalInfo.hour',\n        value: this.monthlyReportService.totalWorkingTimeHours\n      },\n      {\n        description: 'monthly-report.generalInfo.chargeableHours',\n        unit: 'monthly-report.generalInfo.hour',\n        value: this.monthlyReportService.billableTimeHours\n      },\n      {\n        description: 'monthly-report.generalInfo.chargeability',\n        unit: 'monthly-report.generalInfo.percentage',\n        value: this.monthlyReportService.billablePercentage\n      },\n      {\n        description: 'monthly-report.generalInfo.vacation',\n        unit: 'monthly-report.generalInfo.day',\n        value: this.monthlyReport.vacationDays\n      },\n      {\n        description: 'monthly-report.generalInfo.timeCompensation',\n        unit: 'monthly-report.generalInfo.day',\n        value: this.monthlyReport.compensatoryDays\n      },\n      {\n        description: 'monthly-report.generalInfo.homeoffice',\n        unit: 'monthly-report.generalInfo.day',\n        value: this.monthlyReport.homeofficeDays\n      },\n      {\n        description: 'monthly-report.generalInfo.paidSickLeave',\n        unit: 'monthly-report.generalInfo.day',\n        value: this.monthlyReport.paidSickLeave\n      },\n      //TODO: disabled until Personio API sends the correct data\n      // {\n      //   description: 'monthly-report.generalInfo.vacationDayBalance',\n      //   unit: 'monthly-report.generalInfo.day',\n      //   value: this.monthlyReport.vacationDayBalance\n      // }\n    ];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".mat-column-unit {\n  flex: 0 0 35%;\n}\n\n.mat-column-description {\n  flex: 0 0 50%;\n}\n\n.mat-column-value {\n  flex: 0 0 15%;\n  justify-content: right;\n  padding-right: 8px;\n}\n\n.mat-mdc-table {\n  width: 100%;\n  overflow: hidden;\n  padding-top: 8px;\n}\n\n.mat-mdc-header-cell {\n  height: 0;\n}\n\n.mat-mdc-row:nth-child(3) {\n  border-bottom: solid 1px grey;\n}\n",
                    "styleUrl": "./general-info.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "monthlyReportService",
                        "type": "MonthlyReportService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "locale",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 33,
                "jsdoctags": [
                    {
                        "name": "monthlyReportService",
                        "type": "MonthlyReportService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "locale",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "OnChanges",
                "OnDestroy"
            ],
            "templateData": "<mat-card appearance=\"raised\" class=\"fill-parent\">\n  <mat-card-header>\n    <mat-card-title>\n      <ngx-skeleton-loader *ngIf=\"!monthlyReport else title\"\n                           [theme]=\"{ height: '30px', width: '250px' }\"\n                           appearance=\"line\"></ngx-skeleton-loader>\n\n      <ng-template #title>\n        {{'monthly-report.title.general-info' | translate}} {{selectedDateStr}}\n      </ng-template>\n    </mat-card-title>\n  </mat-card-header>\n\n  <mat-card-content>\n\n    <ngx-skeleton-loader *ngIf=\"!monthlyReport else table\"\n                         appearance=\"line\"\n                         count=\"6\"></ngx-skeleton-loader>\n    <ng-template #table>\n      <mat-table [dataSource]=\"toGeneralInfoData()\" class=\"mat-elevation-z1 table-container\">\n\n        <ng-container matColumnDef=\"description\">\n          <mat-header-cell *matHeaderCellDef></mat-header-cell>\n          <mat-cell *matCellDef=\"let element\"> {{element.description | translate}} </mat-cell>\n        </ng-container>\n\n        <ng-container matColumnDef=\"value\">\n          <mat-header-cell *matHeaderCellDef></mat-header-cell>\n          <mat-cell *matCellDef=\"let element\">\n            <p *ngIf=\"element.unit === 'monthly-report.generalInfo.day'; else elseBlock\">{{element.value}}</p>\n            <ng-template #elseBlock>{{element.value | number: '1.2-2' : 'de-AT'}}</ng-template>\n          </mat-cell>\n        </ng-container>\n\n        <ng-container matColumnDef=\"unit\">\n          <mat-header-cell *matHeaderCellDef></mat-header-cell>\n          <mat-cell *matCellDef=\"let element\">\n            <p *ngIf=\"element.value === 1; else elseBlock\"> {{(element.unit) | translate}}</p>\n            <ng-template #elseBlock> {{element.unit + 's' | translate}}</ng-template>\n          </mat-cell>\n        </ng-container>\n\n        <mat-row class=\"fixed-columns\" *matRowDef=\"let row; columns: displayedColumns;\"></mat-row>\n      </mat-table>\n    </ng-template>\n  </mat-card-content>\n</mat-card>\n\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-1f93e9bb6a81cde899547cdaafad482d5485f5e7173e4b9d2b2305834baf255223ba934a7e130bbfc377c8cc480c2947c9c78e6a945915f671d92ac1c71f9f10",
            "file": "src/app/domains/shared/ui-common/header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-header",
            "styleUrls": [
                "./header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "assetsPath",
                    "defaultValue": "'../../../../../assets/'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "isHandset",
                    "defaultValue": "this.breakpointObserver.observe(Breakpoints.Handset)\n    .pipe(map(result => result.matches))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "links",
                    "defaultValue": "new Array<Link>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "logoMega",
                    "defaultValue": "'logo-MEGA.png'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "userSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "zepLogo",
                    "defaultValue": "'zep-eye.png'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "zepUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 47
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "showLink",
                    "args": [
                        {
                            "name": "link",
                            "type": "Link",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "link",
                            "type": "Link",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "MatSidenavModule",
                    "type": "module"
                },
                {
                    "name": "NgIf"
                },
                {
                    "name": "MatListModule",
                    "type": "module"
                },
                {
                    "name": "UserActionsComponent",
                    "type": "component"
                },
                {
                    "name": "NgFor"
                },
                {
                    "name": "RouterLinkActive"
                },
                {
                    "name": "RouterLink"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "MatToolbarModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatTabsModule",
                    "type": "module"
                },
                {
                    "name": "RouterOutlet"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, OnDestroy, OnInit} from '@angular/core';\nimport {ConfigService, RolesService, UserService} from '@mega/shared/data-service';\nimport {Observable, Subscription} from 'rxjs';\nimport {Config, Link, User} from '@mega/shared/data-model';\nimport {TranslateService} from '@ngx-translate/core';\nimport {configuration} from '@mega/shared/util-constant';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {map} from 'rxjs/operators';\nimport {MatTabsModule} from '@angular/material/tabs';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatToolbarModule} from '@angular/material/toolbar';\nimport {MatIconModule} from '@angular/material/icon';\nimport {RouterLink, RouterLinkActive, RouterOutlet} from '@angular/router';\nimport {UserActionsComponent} from '../user-actions/user-actions.component';\nimport {MatListModule} from '@angular/material/list';\nimport {NgFor, NgIf} from '@angular/common';\nimport {MatSidenavModule} from '@angular/material/sidenav';\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.scss'],\n  standalone: true,\n  imports: [\n    MatSidenavModule,\n    NgIf,\n    MatListModule,\n    UserActionsComponent,\n    NgFor,\n    RouterLinkActive,\n    RouterLink,\n    MatIconModule,\n    MatToolbarModule,\n    MatButtonModule,\n    MatTabsModule,\n    RouterOutlet\n  ]\n})\nexport class HeaderComponent implements OnInit, OnDestroy {\n\n  readonly links = new Array<Link>();\n  readonly assetsPath = '../../../../../assets/';\n  readonly logoMega = 'logo-MEGA.png';\n  readonly zepLogo = 'zep-eye.png';\n\n  user: User;\n  zepUrl: string;\n  isHandset: Observable<boolean> = this.breakpointObserver.observe(Breakpoints.Handset)\n    .pipe(map(result => result.matches));\n  private userSubscription: Subscription;\n\n  constructor(private rolesService: RolesService,\n              private userService: UserService,\n              private translate: TranslateService,\n              private breakpointObserver: BreakpointObserver,\n              private configService: ConfigService) {\n    translate.get('PAGE_NAMES').subscribe(PAGE_NAMES => {\n      this.links.push({name: PAGE_NAMES.MONTHLY_REPORT, path: configuration.PAGE_URLS.MONTHLY_REPORT});\n      this.links.push({name: PAGE_NAMES.OFFICE_MANAGEMENT, path: configuration.PAGE_URLS.OFFICE_MANAGEMENT});\n      this.links.push({name: PAGE_NAMES.PROJECT_MANAGEMENT, path: configuration.PAGE_URLS.PROJECT_MANAGEMENT});\n    });\n  }\n\n  ngOnInit() {\n    this.userSubscription = this.userService.user.subscribe((user) => {\n      this.user = user;\n    });\n    this.configService.getConfig().subscribe((config: Config) => {\n      this.zepUrl = config.zepOrigin;\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.userSubscription?.unsubscribe();\n  }\n\n  showLink(link: Link): boolean {\n    return this.rolesService.isAllowed(link.path);\n  }\n\n  onLogout(): void {\n    this.userService.logout();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".header__sidenav_container {\n  height: 100%;\n  min-height: 100%;\n  min-width: 100%;\n  width: 100%;\n}\n\n.nav_container {\n  display: flex;\n  justify-content: space-between;\n  flex-direction: row;\n  width: 100%;\n  box-sizing: border-box;\n}\n\n.zep_and_user_container {\n  flex-direction: row;\n  box-sizing: border-box;\n  display: flex;\n  gap: 15px;\n}\n\n.header_spacing {\n  flex: 1 1 auto;\n  box-sizing: border-box;\n}\n\n.toolbar {\n  position: sticky;\n  top: 0;\n  z-index: 1000;\n  height: 70px;\n}\n\n.router-outlet {\n  height: calc(100vh - 70px);\n}\n\nimg {\n  height: 40px;\n  display:block;\n}\n\n.logo-mega {\n  height: inherit;\n}\n\n.mat-list-item-with-icon {\n  display: flex;\n  align-items: center;\n}\n\n/**\n    lg = 1280px\n */\n@media screen and (max-width: 1279px)  {\n  .show_on_lg {\n    display: none;\n  }\n}\n\n@media screen and (min-width: 1280px) {\n  .remove_on_lg {\n    display:none;\n  }\n}\n",
                    "styleUrl": "./header.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "rolesService",
                        "type": "RolesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "breakpointObserver",
                        "type": "BreakpointObserver",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "configService",
                        "type": "ConfigService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 50,
                "jsdoctags": [
                    {
                        "name": "rolesService",
                        "type": "RolesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "breakpointObserver",
                        "type": "BreakpointObserver",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "configService",
                        "type": "ConfigService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<mat-sidenav-container class=\"header__sidenav_container\">\n  <mat-sidenav #sidenav mode=\"over\" opened=\"false\">\n    <mat-nav-list *ngIf=\"user\">\n      <a mat-list-item>\n        <app-user-actions (logout)=\"onLogout(); sidenav.close()\" [user]=\"user\"></app-user-actions>\n      </a>\n      <ng-container *ngFor=\"let link of links\">\n        <a (click)=\"sidenav.close()\" *ngIf=\"showLink(link)\"\n           [routerLink]=\"link.path\"\n           href=\"#\"\n           mat-list-item\n           routerLinkActive>\n          {{ link.name }}\n        </a>\n      </ng-container>\n      <a [href]=\"zepUrl\" mat-list-item target=\"_blank\">\n        <div class=\"mat-list-item-with-icon\">\n          <mat-icon>open_in_new</mat-icon>\n          <span>ZEP</span>\n        </div>\n      </a>\n    </mat-nav-list>\n  </mat-sidenav>\n\n  <mat-sidenav-content>\n    <mat-toolbar class=\"toolbar mat-elevation-z10\">\n      <div *ngIf=\"user\" class=\"remove_on_lg\">\n        <button (click)=\"sidenav.toggle()\" aria-label=\"menu\" mat-icon-button>\n          <mat-icon>menu</mat-icon>\n        </button>\n      </div>\n\n      <img [src]=\"assetsPath + logoMega\" alt=\"Logo MEGA\" class=\"logo-mega mr-3\">\n\n      <div *ngIf=\"user\" class=\"show_on_lg nav_container ml-20\">\n        <nav mat-tab-nav-bar [tabPanel]=\"tabPanel\">\n          <ng-container *ngFor=\"let link of links\">\n            <div #rla=\"routerLinkActive\" *ngIf=\"showLink(link)\" [active]=\"rla.isActive\" [routerLink]=\"link.path\"\n                 mat-tab-link\n                 routerLinkActive>\n              {{ link.name }}\n            </div>\n          </ng-container>\n        </nav>\n        <mat-tab-nav-panel #tabPanel></mat-tab-nav-panel>\n\n        <div class=\"zep_and_user_container\">\n          <a\n            [href]=\"zepUrl\"\n            mat-mini-fab\n            target=\"_blank\">\n            <img [src]=\"assetsPath + zepLogo\" alt=\"ZEP Link\">\n          </a>\n\n          <div *ngIf=\"user\">\n            <app-user-actions (logout)=\"onLogout()\" [user]=\"user\"></app-user-actions>\n          </div>\n        </div>\n      </div>\n    </mat-toolbar>\n\n    <div class=\"router-outlet\">\n      <router-outlet></router-outlet>\n    </div>\n\n  </mat-sidenav-content>\n</mat-sidenav-container>\n"
        },
        {
            "name": "InfoComponent",
            "id": "component-InfoComponent-3a5721d89dc4a5c2b3e5619a44b4b7b65cf4d302f758eddb79f928d28cedb2cddbb25804e8de33522e32298963e843609436655b16cb217494623961d5afe65b",
            "file": "src/app/domains/shared/ui-common/info/info.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-info",
            "styleUrls": [
                "./info.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./info.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "version",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "NgIf"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, OnInit} from '@angular/core';\nimport {InfoService} from '@mega/shared/data-service';\nimport {NgIf} from '@angular/common';\n\n@Component({\n  selector: 'app-info',\n  templateUrl: './info.component.html',\n  styleUrls: ['./info.component.scss'],\n  standalone: true,\n  imports: [\n    NgIf\n  ]\n})\nexport class InfoComponent implements OnInit {\n\n  version: string;\n\n  constructor(private infoService: InfoService) {\n  }\n\n  ngOnInit(): void {\n    this.infoService.getInfo().subscribe(info => this.version = info.version);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".info {\n  position: fixed;\n  right: 0;\n  bottom: 0;\n  background: white;\n  color: gray;\n  z-index: 1000000;\n  padding: 3px;\n  border-radius: 3px 0 0 0;\n}\n",
                    "styleUrl": "./info.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "infoService",
                        "type": "InfoService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "infoService",
                        "type": "InfoService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div *ngIf=\"version\" class=\"info\">\n  <small class=\"info\">v{{version}}</small>\n</div>\n"
        },
        {
            "name": "InfoDialogComponent",
            "id": "component-InfoDialogComponent-029a869080257ac3a787140bf958e01d44379f8600798c5433519ca18f85a4c3490de2ba002ce126518ba4f32fd96c964a5b152cacb75af666d87b22d9c48e3b",
            "file": "src/app/domains/shared/ui-common/info-dialog/info-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-info-dialog",
            "styleUrls": [
                "./info-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./info-dialog.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "info",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AppInfo",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "MatDialogModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "TranslateModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, OnInit} from '@angular/core';\nimport {AppInfo} from '@mega/shared/data-model';\nimport {InfoService} from '@mega/shared/data-service';\nimport {TranslateModule} from '@ngx-translate/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\n\n@Component({\n  selector: 'app-info-dialog',\n  templateUrl: './info-dialog.component.html',\n  styleUrls: ['./info-dialog.component.scss'],\n  standalone: true,\n  imports: [\n    MatDialogModule,\n    MatButtonModule,\n    TranslateModule\n  ]\n})\nexport class InfoDialogComponent implements OnInit {\n\n  info: AppInfo;\n\n  constructor(private infoService: InfoService) {\n  }\n\n  ngOnInit(): void {\n    this.infoService.getInfo().subscribe(info => this.info = info);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "td:first-child {\n  text-align: right;\n}\n\ntable {\n  border-collapse: separate;\n  border-spacing: 1em;\n}\n",
                    "styleUrl": "./info-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "infoService",
                        "type": "InfoService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "infoService",
                        "type": "InfoService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<h2 mat-dialog-title>{{'info-dialog.title' | translate}}</h2>\n<mat-dialog-content>\n  <table class=\"margin-auto\">\n    <tr>\n      <td>{{'info-dialog.table.version' | translate}}:</td>\n      <td>{{info?.version}}</td>\n    </tr>\n    <tr>\n      <td>{{'info-dialog.table.commit' | translate}}:</td>\n      <td>{{info?.commit}}</td>\n    </tr>\n    <tr>\n      <td>{{'info-dialog.table.branch' | translate}}:</td>\n      <td>{{info?.branch}}</td>\n    </tr>\n    <tr>\n      <td>{{'info-dialog.table.buildNumber' | translate}}:</td>\n      <td>{{info?.buildNumber}}</td>\n    </tr>\n    <tr>\n      <td>{{'info-dialog.table.buildDate' | translate}}:</td>\n      <td>{{info?.buildDate}}</td>\n    </tr>\n    <tr>\n      <td>{{'info-dialog.table.startedAt' | translate}}:</td>\n      <td>{{info?.startedAt}}</td>\n    </tr>\n    <tr>\n      <td>{{'info-dialog.table.upTime' | translate}}:</td>\n      <td>{{info?.upTime}}</td>\n    </tr>\n  </table>\n</mat-dialog-content>\n<mat-dialog-actions align=\"end\">\n  <button mat-dialog-close mat-raised-button>{{'info-dialog.close' | translate}}</button>\n</mat-dialog-actions>\n"
        },
        {
            "name": "InformationTopBarComponent",
            "id": "component-InformationTopBarComponent-33de731bc5e743a1925e68aac45cfd747fd72dd474ad8ca544306f2f4ab626ad86bfa9082cb79215a66c1e703bd9f9329b39f75036e112dbb4483571579a3ff2",
            "file": "src/app/domains/monthly-report/feature-monthly-report/information-top-bar/information-top-bar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-information-top-bar",
            "styleUrls": [
                "./information-top-bar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./information-top-bar.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "monthlyReport",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "MonthlyReport",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "refreshMonthlyReport",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "EventEmitter<void>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "dateSelectionSub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "employeeFunctions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "maxMonthDate",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "selectedMonth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "selectedYear",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 37
                }
            ],
            "methodsClass": [
                {
                    "name": "dateChanged",
                    "args": [
                        {
                            "name": "date",
                            "type": "Moment",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Moment",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "emitRefreshMonthlyReport",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "MatCardModule",
                    "type": "module"
                },
                {
                    "name": "NgIf"
                },
                {
                    "name": "NgxSkeletonLoaderModule",
                    "type": "module"
                },
                {
                    "name": "DatepickerMonthYearComponent",
                    "type": "component"
                },
                {
                    "name": "TranslateModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {MonthlyReport} from '@mega/monthly-report/data-model';\nimport {TranslateModule, TranslateService} from '@ngx-translate/core';\nimport {Moment} from 'moment/moment';\nimport {MonthlyReportService} from '@mega/monthly-report/data-service';\nimport * as _moment from 'moment';\nimport {Subscription, zip} from 'rxjs';\nimport {tap} from 'rxjs/operators';\nimport {DatepickerMonthYearComponent} from '@mega/shared/ui-common';\nimport {NgxSkeletonLoaderModule} from 'ngx-skeleton-loader';\nimport {NgIf} from '@angular/common';\nimport {MatCardModule} from '@angular/material/card';\n\nconst moment = _moment;\n\n@Component({\n  selector: 'app-information-top-bar',\n  templateUrl: './information-top-bar.component.html',\n  styleUrls: ['./information-top-bar.component.scss'],\n  standalone: true,\n  imports: [\n    MatCardModule,\n    NgIf,\n    NgxSkeletonLoaderModule,\n    DatepickerMonthYearComponent,\n    TranslateModule\n  ]\n})\nexport class InformationTopBarComponent implements OnInit {\n\n  @Input() monthlyReport: MonthlyReport;\n  @Output() refreshMonthlyReport: EventEmitter<void> = new EventEmitter<void>();\n\n  employeeFunctions: string;\n\n  maxMonthDate = 0;\n  selectedYear: number;\n  selectedMonth: number;\n  dateSelectionSub: Subscription;\n\n  constructor(private translateService: TranslateService,\n              private monthlyReportService: MonthlyReportService) {\n  }\n\n  ngOnInit(): void {\n    this.translateService.get('EMPLOYEE_FUNCTIONS').subscribe(funcs => this.employeeFunctions = funcs);\n\n    this.dateSelectionSub = zip(this.monthlyReportService.selectedYear, this.monthlyReportService.selectedMonth)\n      .pipe(\n        tap(value => {\n          this.selectedYear = value[0];\n          this.selectedMonth = value[1];\n        })\n      ).subscribe();\n  }\n\n  dateChanged(date: Moment) {\n    this.monthlyReportService.selectedYear.next(date.year());\n    this.monthlyReportService.selectedMonth.next(date.month() + 1);\n    this.emitRefreshMonthlyReport();\n  }\n\n  get date() {\n    return moment()\n      .year(this.selectedYear)\n      .month(this.selectedMonth)\n      .date(1)\n      .startOf('day');\n  }\n\n  emitRefreshMonthlyReport() {\n    this.refreshMonthlyReport.emit();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: inline-block;\n  width: calc(100% - 16px);\n  padding: 8px 8px 0;\n}\n\n.information-top-bar__content_container {\n  flex-direction: row;\n  box-sizing: border-box;\n  display: flex;\n  place-content: center space-between;\n  align-items: center;\n}\n\n#idname {\n  margin-bottom: 0;\n}\n\n.datepicker_container {\n  display: flex;\n  align-items: baseline;\n}\n\n.employeeName_container {\n  flex: 1 1 100%;\n  box-sizing: border-box;\n  max-width: 30%;\n}\n\n//Mobile Optimizations\n.mobile__subtitle {\n  display: none;\n}\n\n@media screen and (max-width: 765px) {\n  .mobile__subtitle {\n    display: inline;\n  }\n\n  .subtitle {\n    display: none;\n  }\n\n  .employeeName_container {\n    display: none;\n  }\n\n  .datepicker_container {\n    flex-direction: column;\n    gap: 20px;\n  }\n}\n",
                    "styleUrl": "./information-top-bar.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "translateService",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "monthlyReportService",
                        "type": "MonthlyReportService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 39,
                "jsdoctags": [
                    {
                        "name": "translateService",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "monthlyReportService",
                        "type": "MonthlyReportService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "date": {
                    "name": "date",
                    "getSignature": {
                        "name": "date",
                        "type": "",
                        "returnType": "",
                        "line": 63
                    }
                }
            },
            "templateData": "<mat-card appearance=\"raised\" class=\"fill-parent\">\n\n  <mat-card-header>\n    <mat-card-subtitle id=\"idname\">\n      <ngx-skeleton-loader *ngIf=\"!monthlyReport else workDescription\"\n                           [theme]=\"{ width: '200px' }\"\n                           appearance=\"line\"></ngx-skeleton-loader>\n      <ng-template #workDescription>\n      <span class=\"subtitle\">\n        {{employeeFunctions[monthlyReport?.employee?.workDescription]}}\n      </span>\n        <span class=\"mobile__subtitle\">\n        {{monthlyReport?.employee?.firstname}} {{monthlyReport?.employee?.lastname}} - {{employeeFunctions[monthlyReport?.employee?.workDescription]}}\n      </span>\n      </ng-template>\n    </mat-card-subtitle>\n  </mat-card-header>\n  <mat-card-content>\n\n    <div class=\"information-top-bar__content_container\">\n\n        <!-- Hidden on mobile-->\n        <span class=\"employeeName_container\">\n          <ngx-skeleton-loader *ngIf=\"!monthlyReport else employeeName\"\n                               [theme]=\"{ height: '25px', width: '250px' }\"\n                               appearance=\"line\"></ngx-skeleton-loader>\n          <ng-template #employeeName>\n            {{monthlyReport?.employee?.firstname}} {{monthlyReport?.employee?.lastname}}\n          </ng-template>\n        </span>\n\n      <div>\n        <ngx-skeleton-loader *ngIf=\"!monthlyReport else datepicker\"\n                             [theme]=\"{ height: '60px', width: '500px'}\"></ngx-skeleton-loader>\n        <ng-template #datepicker>\n          <div class=\"datepicker_container\">\n            <strong class=\"mr-10 mt-10\">\n              <span>{{'global.selectPayrollMonth' | translate}}</span>\n            </strong>\n\n            <app-datepicker-month-year (dateChanged)=\"dateChanged($event)\" [date]=\"date\"\n                                       [maxMonth]=\"maxMonthDate\"></app-datepicker-month-year>\n          </div>\n        </ng-template>\n      </div>\n    </div>\n  </mat-card-content>\n</mat-card>\n"
        },
        {
            "name": "InlineTextEditorComponent",
            "id": "component-InlineTextEditorComponent-8b977131bf5a7424b9ed93c1d32a6b1c367917a0dc4983138d2c167f788bfdf112bc0dbadff2c3414d90cbfbb48d4c5e971de067f6546864420e4b6cdaebacf6",
            "file": "src/app/domains/shared/ui-common/inline-text-editor/inline-text-editor.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-inline-text-editor",
            "styleUrls": [
                "./inline-text-editor.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./inline-text-editor.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "comment",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "commentChange",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "autosize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CdkTextareaAutosize",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'autosize'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "MAXIMUM_LETTERS",
                    "defaultValue": "500",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "textarea",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'textarea'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onCancel",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "inputElement",
                            "type": "HTMLTextAreaElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "inputElement",
                            "type": "HTMLTextAreaElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSave",
                    "args": [
                        {
                            "name": "inputElement",
                            "type": "HTMLTextAreaElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "inputElement",
                            "type": "HTMLTextAreaElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "triggerResize",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "MatFormFieldModule",
                    "type": "module"
                },
                {
                    "name": "TextFieldModule",
                    "type": "module"
                },
                {
                    "name": "MatInputModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  NgZone,\n  Output,\n  ViewChild\n} from '@angular/core';\nimport {CdkTextareaAutosize, TextFieldModule} from '@angular/cdk/text-field';\nimport {take} from 'rxjs/operators';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatInputModule} from '@angular/material/input';\nimport {MatFormFieldModule} from '@angular/material/form-field';\n\n@Component({\n  selector: 'app-inline-text-editor',\n  templateUrl: './inline-text-editor.component.html',\n  styleUrls: ['./inline-text-editor.component.scss'],\n  standalone: true,\n  imports: [\n    MatFormFieldModule,\n    TextFieldModule,\n    MatInputModule,\n    MatButtonModule,\n    MatIconModule\n  ]\n})\nexport class InlineTextEditorComponent implements AfterViewInit {\n\n  @Input() comment: string\n  @Output() commentChange = new EventEmitter<string>();\n  @ViewChild('autosize') autosize: CdkTextareaAutosize;\n  @ViewChild('textarea') textarea: ElementRef;\n\n  MAXIMUM_LETTERS = 500;\n\n  constructor(private _ngZone: NgZone,\n              private changeDectectorRef: ChangeDetectorRef) {\n  }\n\n  ngAfterViewInit(): void {\n    this.textarea.nativeElement.focus();\n    this.triggerResize();\n    this.changeDectectorRef.detectChanges();\n  }\n\n  triggerResize() {\n    this._ngZone.onStable.pipe(take(1))\n      .subscribe(() => {\n        this.autosize.resizeToFitContent(true);\n      });\n  }\n\n  onCancel(event, inputElement: HTMLTextAreaElement) {\n    if (!event.relatedTarget || event.relatedTarget.id !== 'savebutton') {\n      this.commentChange.emit(this.comment);\n    } else {\n      this.onSave(inputElement);\n    }\n  }\n\n  onSave(inputElement: HTMLTextAreaElement) {\n    this.commentChange.emit(inputElement.value.trim());\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"styles/colors\";\n\n.mat-mdc-mini-fab {\n  color: white;\n}\n\n.mat-mdc-mini-fab.cancel {\n  background-color: dimgrey;\n  margin-left: 10px;\n}\n\n.mat-mdc-mini-fab.save {\n  background-color: dodgerblue;\n  margin-left: 10px;\n}\n\n:host {\n  display: flex;\n  align-items: center;\n}\n\n.mat-mdc-form-field {\n  flex-grow: 1;\n}\n",
                    "styleUrl": "./inline-text-editor.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_ngZone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "changeDectectorRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 39,
                "jsdoctags": [
                    {
                        "name": "_ngZone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "changeDectectorRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "AfterViewInit"
            ],
            "templateData": "<mat-form-field>\n    <textarea #autosize=\"cdkTextareaAutosize\"\n              #textarea\n              (focusout)=\"onCancel($event, textarea)\"\n              [maxLength]=\"MAXIMUM_LETTERS\"\n              [value]=\"comment ? comment : ''\"\n              cdkAutosizeMaxRows=\"3\"\n              cdkAutosizeMinRows=\"1\"\n              cdkTextareaAutosize\n              matInput>\n    </textarea>\n  <mat-hint align=\"end\">{{textarea.value.length}} / {{MAXIMUM_LETTERS}}</mat-hint>\n</mat-form-field>\n<button (click)=\"onCancel($event, textarea)\" aria-label=\"arrow-back\" class=\"cancel\" mat-mini-fab>\n  <mat-icon>arrow_back</mat-icon>\n</button>\n<button (click)=\"onSave(textarea)\" aria-label=\"save\" class=\"save\" id=\"savebutton\" mat-mini-fab>\n  <mat-icon>save</mat-icon>\n</button>\n"
        },
        {
            "name": "JourneyCheckComponent",
            "id": "component-JourneyCheckComponent-04e39651f10f8cbb654bd8252618207eff523080326d206d34435b4f82b25492455c007a8b7c37f16dcc1a85dc7aab640eb2ff897212147e7cf6e0dc47a4dbcf",
            "file": "src/app/domains/monthly-report/feature-monthly-report/journey-check/journey-check.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-journey-check",
            "styleUrls": [
                "./journey-check.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./journey-check.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "monthlyReport",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "MonthlyReport",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "displayedColumns",
                    "defaultValue": "['dateJourney', 'warningJourney']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "State",
                    "defaultValue": "State",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                }
            ],
            "methodsClass": [
                {
                    "name": "getJourneyWarningString",
                    "args": [
                        {
                            "name": "warnings",
                            "type": "Array<string>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "warnings",
                            "type": "Array<string>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "MatCardModule",
                    "type": "module"
                },
                {
                    "name": "NgIf"
                },
                {
                    "name": "NgxSkeletonLoaderModule",
                    "type": "module"
                },
                {
                    "name": "StateIndicatorComponent",
                    "type": "component"
                },
                {
                    "name": "MatTableModule",
                    "type": "module"
                },
                {
                    "name": "DatePipe",
                    "type": "pipe"
                },
                {
                    "name": "TranslateModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input} from '@angular/core';\nimport {MonthlyReport} from '@mega/monthly-report/data-model';\nimport {State} from '@mega/shared/data-model';\nimport {TranslateModule} from '@ngx-translate/core';\nimport {MatTableModule} from '@angular/material/table';\nimport {StateIndicatorComponent} from '@mega/shared/ui-common';\nimport {NgxSkeletonLoaderModule} from 'ngx-skeleton-loader';\nimport {DatePipe, NgIf} from '@angular/common';\nimport {MatCardModule} from '@angular/material/card';\n\n@Component({\n  selector: 'app-journey-check',\n  templateUrl: './journey-check.component.html',\n  styleUrls: ['./journey-check.component.scss'],\n  standalone: true,\n  imports: [\n    MatCardModule,\n    NgIf,\n    NgxSkeletonLoaderModule,\n    StateIndicatorComponent,\n    MatTableModule,\n    DatePipe,\n    TranslateModule\n  ]\n})\nexport class JourneyCheckComponent {\n\n  State = State;\n\n  @Input() monthlyReport: MonthlyReport;\n\n  displayedColumns = ['dateJourney', 'warningJourney'];\n\n  getJourneyWarningString(warnings: Array<string>): string {\n    let warningString = '';\n\n    warnings.forEach((value) => warningString += value + '. ');\n\n    return warningString;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".no-warnings {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center\n}\n",
                    "styleUrl": "./journey-check.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<mat-card appearance=\"raised\" class=\"fill-parent\">\n  <mat-card-header>\n    <mat-card-title>\n      {{'monthly-report.title.journey' | translate}}\n    </mat-card-title>\n  </mat-card-header>\n\n  <mat-card-content [class.no-warnings]=\"!monthlyReport || monthlyReport?.journeyWarnings?.length === 0\" style=\"padding-top: 20px;\">\n    <ng-container *ngIf=\"!monthlyReport\">\n      <ngx-skeleton-loader [theme]=\"{ height: '80px', width: '80px' }\" appearance=\"circle\"></ngx-skeleton-loader>\n      <ngx-skeleton-loader [theme]=\"{ width: '250px', 'margin-top': '20px' }\" appearance=\"line\"></ngx-skeleton-loader>\n    </ng-container>\n\n    <ng-container *ngIf=\"monthlyReport?.journeyWarnings?.length === 0\">\n      <app-state-indicator [state]=\"State.DONE\" size=\"large\"></app-state-indicator>\n      <p>{{'monthly-report.ok' | translate}}</p>\n    </ng-container>\n\n    <ng-container *ngIf=\"monthlyReport?.journeyWarnings?.length > 0\">\n      <mat-table [dataSource]=\"monthlyReport.journeyWarnings\">\n        <ng-container matColumnDef=\"dateJourney\">\n          <mat-header-cell *matHeaderCellDef>\n            {{'monthly-report.table.journey.day' | translate}}\n          </mat-header-cell>\n          <mat-cell *matCellDef=\"let journeyEntry\">\n            <span class=\"mobile-label\">{{'monthly-report.table.journey.day' | translate}}</span>\n            {{journeyEntry.date | date:'E dd.MM.yyyy' : null : 'de-AT'}}\n          </mat-cell>\n        </ng-container>\n\n        <ng-container matColumnDef=\"warningJourney\">\n          <mat-header-cell *matHeaderCellDef>\n            {{'monthly-report.table.journey.warning' | translate}}\n          </mat-header-cell>\n          <mat-cell *matCellDef=\"let journeyEntry\">\n            <span class=\"mobile-label\">{{'monthly-report.table.journey.warning' | translate}}</span>\n            {{getJourneyWarningString(journeyEntry.warnings)}}\n          </mat-cell>\n        </ng-container>\n\n        <mat-row\n          *matRowDef=\"let row; columns: displayedColumns;\">\n        </mat-row>\n\n        <mat-header-row\n          *matHeaderRowDef=\"displayedColumns; sticky: true\"\n          mat-header-row>\n        </mat-header-row>\n      </mat-table>\n    </ng-container>\n  </mat-card-content>\n</mat-card>\n"
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-5c3ba48e9a388754c7a8193248a1580bb7f21c936b8aa2fa6f3a719681e24625eddcc912298dba3d3cee4febac22abd009865ba4f598efaaaaa943163e8a1afd",
            "file": "src/app/domains/shared/ui-common/login/login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login",
            "styleUrls": [
                "./login.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./login.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "loggedIn",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "login",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "NgIf"
                },
                {
                    "name": "MatCardModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "TranslateModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component} from '@angular/core';\nimport {OAuthService} from 'angular-oauth2-oidc';\nimport {UserService} from '@mega/shared/data-service';\nimport {TranslateModule} from '@ngx-translate/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatCardModule} from '@angular/material/card';\nimport {NgIf} from '@angular/common';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss'],\n  standalone: true,\n  imports: [\n    NgIf,\n    MatCardModule,\n    MatButtonModule,\n    TranslateModule\n  ]\n})\nexport class LoginComponent {\n\n  constructor(private oAuthService: OAuthService,\n              private userService: UserService) {\n  }\n\n  login(): void {\n    this.oAuthService.initLoginFlow();\n  }\n\n  loggedIn(): boolean {\n    return this.userService.loggedInWithGoogle();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".text {\n  font-size: 18px;\n}\n\n.login-container {\n  height: 80%;\n  text-align: center;\n\n  display: flex;\n  flex-direction: column;\n  box-sizing: border-box;\n  place-content: center;\n  align-items: center;\n}\n\n.login__content_container {\n  flex-direction: column;\n  box-sizing: border-box;\n  display: flex;\n  place-content: stretch center;\n  align-items: stretch;\n  gap: 5px;\n}\n\n.login-header {\n  text-align: center;\n  display: flex;\n  justify-content: center;\n}\n",
                    "styleUrl": "./login.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "oAuthService",
                        "type": "OAuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "oAuthService",
                        "type": "OAuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div\n  *ngIf=\"!loggedIn()\"\n  class=\"login-container\">\n  <mat-card class=\"mat-elevation-z8\">\n\n    <mat-card-header class=\"login-header\">\n      <mat-card-title>\n        {{'login.cardTitle' | translate}}\n      </mat-card-title>\n    </mat-card-header>\n\n    <mat-card-content class=\"login__content_container\">\n      <span class=\"text\">\n        {{'login.promptText' | translate }}\n      </span>\n\n      <button\n        (click)=\"login()\"\n        color=\"primary\"\n        mat-raised-button>\n        {{'login.btnText' | translate}}\n      </button>\n    </mat-card-content>\n  </mat-card>\n</div>\n"
        },
        {
            "name": "PmProgressComponent",
            "id": "component-PmProgressComponent-3411df84f644ea23737fd3b658da02f248958c05ffcf61b82e1bfb43b261ca376573825fd1cdbd0d7db8e6dca9766b6d62da93fdb561ae59f11b9836eb1232e8",
            "file": "src/app/domains/shared/ui-common/pm-progress/pm-progress.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-employee-progress",
            "styleUrls": [
                "./pm-progress.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./pm-progress.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_BOTTOM_SHEET_DATA"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                },
                {
                    "name": "displayedColumns",
                    "defaultValue": "['in-charge', 'checked']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "displayedEmployees",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<DisplayedEmployees>",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "internalCheckState",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "State",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "pmProgresses",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<PmProgress>",
                    "optional": false,
                    "description": "",
                    "line": 31
                }
            ],
            "methodsClass": [
                {
                    "name": "buildDisplayedEmployees",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "MatTableModule",
                    "type": "module"
                },
                {
                    "name": "StateIndicatorComponent",
                    "type": "component"
                },
                {
                    "name": "TranslateModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Inject, OnInit} from '@angular/core';\nimport {PmProgress, State} from '@mega/shared/data-model';\nimport {MAT_BOTTOM_SHEET_DATA} from '@angular/material/bottom-sheet';\nimport {TranslateModule, TranslateService} from '@ngx-translate/core';\nimport {StateIndicatorComponent} from '../state-indicator/state-indicator.component';\nimport {MatTableModule} from '@angular/material/table';\n\nclass DisplayedEmployees {\n  name: string;\n  state: State;\n\n  constructor(name: string, state: State) {\n    this.name = name;\n    this.state = state;\n  }\n}\n\n@Component({\n  selector: 'app-employee-progress',\n  templateUrl: './pm-progress.component.html',\n  styleUrls: ['./pm-progress.component.scss'],\n  standalone: true,\n  imports: [\n    MatTableModule,\n    StateIndicatorComponent,\n    TranslateModule\n  ]\n})\nexport class PmProgressComponent implements OnInit {\n\n  pmProgresses: Array<PmProgress>;\n  internalCheckState: State;\n  displayedEmployees: Array<DisplayedEmployees>;\n  displayedColumns = ['in-charge', 'checked'];\n\n  constructor(@Inject(MAT_BOTTOM_SHEET_DATA) public data: any, private translateService: TranslateService) {\n    this.pmProgresses = data.employeeProgresses;\n    this.internalCheckState = data.internalCheckState;\n  }\n\n  ngOnInit(): void {\n    this.buildDisplayedEmployees();\n  }\n\n  private buildDisplayedEmployees() {\n    this.displayedEmployees = new Array<DisplayedEmployees>();\n\n    this.translateService.get('monthly-report.pm-progress-bottom-sheet.office-management').subscribe(translation => {\n      this.displayedEmployees.push(new DisplayedEmployees(translation, this.internalCheckState));\n    });\n\n    const map: Map<string, Array<State>> = new Map<string, Array<State>>();\n    this.pmProgresses.forEach(pmProgress => {\n      const name = pmProgress.firstname + ' ' + pmProgress.lastname;\n      if (map.has(name)) {\n        map.get(name).push(pmProgress.state);\n      } else {\n        map.set(name, new Array<State>(pmProgress.state));\n      }\n    });\n\n    map.forEach(((value, key) => {\n      const allDone: boolean = value.every(state => state === State.DONE);\n      this.displayedEmployees.push(new DisplayedEmployees(\n        key,\n        allDone ? State.DONE : State.OPEN\n      ));\n    }));\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".mat-mdc-table {\n  width: 100%;\n}\n\n// ng-deep because bottom-sheet isn't part of the components HTML, it only gets attached\n::ng-deep .mat-bottom-sheet-container{\n  padding: 16px;\n}\n\n.mat-mdc-row:nth-child(2) {\n  border-bottom: solid 1px grey;\n}\n\n.mat-column-checked{\n  justify-content: end;\n}\n",
                    "styleUrl": "./pm-progress.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "translateService",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 34,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "translateService",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-table [dataSource]=\"displayedEmployees\" class=\"mat-elevation-z1 table-container\">\n  <ng-container matColumnDef=\"in-charge\">\n    <mat-header-cell *matHeaderCellDef>{{'monthly-report.pm-progress-bottom-sheet.in-charge' | translate}}</mat-header-cell>\n    <mat-cell *matCellDef=\"let element\"> {{element.name}} </mat-cell>\n  </ng-container>\n\n  <ng-container matColumnDef=\"checked\">\n    <mat-header-cell *matHeaderCellDef>{{'monthly-report.pm-progress-bottom-sheet.finished' | translate}}</mat-header-cell>\n    <mat-cell *matCellDef=\"let element\">\n      <app-state-indicator [state]=\"element.state\" size=\"small\"></app-state-indicator>\n    </mat-cell>\n  </ng-container>\n\n  <mat-header-row *matHeaderRowDef=\"displayedColumns;\"></mat-header-row>\n  <mat-row *matRowDef=\"let row; columns: displayedColumns;\"></mat-row>\n</mat-table>\n\n\n"
        },
        {
            "name": "ProjectOverviewCardComponent",
            "id": "component-ProjectOverviewCardComponent-3c16259e6dbbc7d7fb5fd76378414c30557e6deb40951537630c6979f69eda933f4cd3016cb2df7df314015a9e828635e5ef557682afeb136ae0a000010bc7ad",
            "file": "src/app/domains/office-management/feature-office-management/project-overview-card/project-overview-card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-project-overview-card",
            "styleUrls": [
                "./project-overview-card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./project-overview-card.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "configuration",
                    "defaultValue": "configuration",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "dateSelectionSub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "displayedColumns",
                    "defaultValue": "['name', 'controlEmployeesState', 'controlProjectState', 'controlBillingState', 'comment']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "forProjectName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "pmEntries",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<ProjectManagementEntry>",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "selectedMonth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "selectedYear",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "showCommentEditor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "State",
                    "defaultValue": "State",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "tooltipPosition",
                    "defaultValue": "'above' as TooltipPosition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "tooltipShowDelay",
                    "defaultValue": "500",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 63
                }
            ],
            "methodsClass": [
                {
                    "name": "areAllEmployeeChecksDone",
                    "args": [
                        {
                            "name": "pmEntry",
                            "type": "ProjectManagementEntry",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ProjectState",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "pmEntry",
                            "type": "ProjectManagementEntry",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFormattedDate",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 148,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getPmEntries",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 152,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getTooltipText",
                    "args": [
                        {
                            "name": "projectState",
                            "type": "ProjectState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 144,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "projectState",
                            "type": "ProjectState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onCommentChange",
                    "args": [
                        {
                            "name": "pmEntry",
                            "type": "ProjectManagementEntry",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "comment",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "pmEntry",
                            "type": "ProjectManagementEntry",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "comment",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onStartEditing",
                    "args": [
                        {
                            "name": "projectName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "projectName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sortPmEntries",
                    "args": [
                        {
                            "name": "pmEntries",
                            "type": "Array<ProjectManagementEntry>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 156,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "pmEntries",
                            "type": "Array<ProjectManagementEntry>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "MatCardModule",
                    "type": "module"
                },
                {
                    "name": "NgIf"
                },
                {
                    "name": "NgxSkeletonLoaderModule",
                    "type": "module"
                },
                {
                    "name": "MatTableModule",
                    "type": "module"
                },
                {
                    "name": "ProjektNameWithZepLinkComponent",
                    "type": "component"
                },
                {
                    "name": "StateIndicatorComponent",
                    "type": "component"
                },
                {
                    "name": "MatTooltipModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "InlineTextEditorComponent",
                    "type": "component"
                },
                {
                    "name": "TranslateModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, OnDestroy, OnInit} from '@angular/core';\nimport * as _moment from 'moment';\nimport {MatBottomSheet} from '@angular/material/bottom-sheet';\nimport {configuration} from '@mega/shared/util-constant';\nimport {OfficeManagementService} from '@mega/office-management/data-service';\nimport {\n  CommentService,\n  NotificationService,\n  ProjectCommentService,\n  SnackbarService,\n  StepEntriesService\n} from '@mega/shared/data-service';\nimport {TranslateModule, TranslateService} from '@ngx-translate/core';\nimport {ProjectState, State} from '@mega/shared/data-model';\nimport {ProjectManagementEntry} from '@mega/project-management/data-model';\nimport {ProjectManagementService} from '@mega/project-management/data-service';\nimport {Subscription, switchMap, zip} from 'rxjs';\nimport {tap} from 'rxjs/operators';\nimport {MatTooltipModule, TooltipPosition} from '@angular/material/tooltip';\nimport {InlineTextEditorComponent, StateIndicatorComponent} from '@mega/shared/ui-common';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ProjektNameWithZepLinkComponent} from '@mega/office-management/ui-common';\nimport {MatTableModule} from '@angular/material/table';\nimport {NgxSkeletonLoaderModule} from 'ngx-skeleton-loader';\nimport {NgIf} from '@angular/common';\nimport {MatCardModule} from '@angular/material/card';\n\nconst moment = _moment;\n\n\n@Component({\n  selector: 'app-project-overview-card',\n  templateUrl: './project-overview-card.component.html',\n  styleUrls: ['./project-overview-card.component.scss'],\n  standalone: true,\n  imports: [\n    MatCardModule,\n    NgIf,\n    NgxSkeletonLoaderModule,\n    MatTableModule,\n    ProjektNameWithZepLinkComponent,\n    StateIndicatorComponent,\n    MatTooltipModule,\n    MatButtonModule,\n    MatIconModule,\n    InlineTextEditorComponent,\n    TranslateModule\n  ]\n})\nexport class ProjectOverviewCardComponent implements OnInit, OnDestroy {\n  State = State;\n\n  displayedColumns = ['name', 'controlEmployeesState', 'controlProjectState', 'controlBillingState', 'comment'];\n\n  pmEntries: Array<ProjectManagementEntry>;\n  configuration = configuration;\n  selectedYear: number;\n  selectedMonth: number;\n  dateSelectionSub: Subscription;\n  showCommentEditor = false;\n  forProjectName: string;\n  tooltipShowDelay = 500;\n  tooltipPosition = 'above' as TooltipPosition;\n\n  constructor(private omService: OfficeManagementService, private pmService: ProjectManagementService,\n              private notificationService: NotificationService, private translate: TranslateService, private commentService: CommentService,\n              private stepEntryService: StepEntriesService, private _bottomSheet: MatBottomSheet, private projectCommentService: ProjectCommentService,\n              private snackbarService: SnackbarService) {\n  }\n\n  ngOnInit(): void {\n    this.dateSelectionSub = zip(this.omService.selectedYear, this.omService.selectedMonth)\n      .pipe(tap(value => {\n        this.selectedYear = value[0];\n        this.selectedMonth = value[1];\n      }), tap(() => {\n        this.pmEntries = null;\n      }), switchMap(() => this.getPmEntries())).subscribe(pmEntries => {\n        console.warn(pmEntries);\n        this.pmEntries = this.sortPmEntries(pmEntries);\n        this.pmEntries.forEach(pmEntry => {\n          this.projectCommentService.get(this.getFormattedDate(), pmEntry.projectName)\n            .subscribe(projectComment => {\n              pmEntry.projectComment = projectComment;\n            });\n        });\n      });\n  }\n\n  ngOnDestroy(): void {\n    this.dateSelectionSub?.unsubscribe();\n  }\n\n  areAllEmployeeChecksDone(pmEntry: ProjectManagementEntry): ProjectState {\n    if (pmEntry.entries.every(value => value.projectCheckState === State.DONE)) {\n      return ProjectState.DONE;\n    }\n    return ProjectState.OPEN;\n  }\n\n  onStartEditing(projectName: string) {\n    this.forProjectName = projectName;\n    this.showCommentEditor = true;\n  }\n\n  onCommentChange(pmEntry: ProjectManagementEntry, comment: string) {\n    this.showCommentEditor = false;\n    this.forProjectName = null;\n\n    let returnClicked = false;\n\n    // Avoid reloading of page when the return button was clicked\n    if (pmEntry.projectComment) {\n      if (pmEntry.projectComment.comment !== comment) {\n        let oldComment = pmEntry.projectComment.comment;\n        pmEntry.projectComment.comment = comment;\n        this.projectCommentService.update(pmEntry.projectComment)\n          .subscribe((success) => {\n            if (!success) {\n              this.snackbarService.showSnackbarWithMessage(this.translate.instant('project-management.updateProjectCommentError'));\n              pmEntry.projectComment.comment = oldComment;\n            }\n          });\n      } else {\n        returnClicked = true;\n      }\n    } else {\n      // Avoid reloading of page when the return button was clicked\n      if (comment) {\n        this.projectCommentService.create(comment, this.getFormattedDate(), pmEntry.projectName)\n          .subscribe(projectComment => {\n            pmEntry.projectComment = projectComment;\n          });\n      } else {\n        returnClicked = true;\n      }\n    }\n    if (returnClicked) {\n      this.snackbarService.showSnackbarWithMessage(this.translate.instant('project-management.projectCommentNotUpdated'));\n    }\n  }\n\n  getTooltipText(projectState: ProjectState): string {\n    return this.translate.instant('STATE.' + projectState);\n  }\n\n  private getFormattedDate() {\n    return moment().year(this.selectedYear).month(this.selectedMonth - 1).date(1).format(configuration.dateFormat);\n  }\n\n  private getPmEntries() {\n    return this.pmService.getEntries(this.selectedYear, this.selectedMonth, true);\n  }\n\n  private sortPmEntries(pmEntries: Array<ProjectManagementEntry>) {\n    if (!pmEntries) {\n      return pmEntries;\n    }\n\n    return pmEntries.sort((a, b) => a.projectName.localeCompare(b.projectName));\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'styles/colors';\n\n.project-overview__content_container {\n  height: 100%;\n  min-height: 100%;\n  min-width: 100%;\n  width: 100%;\n  flex-direction: column;\n  box-sizing: border-box;\n  display: flex;\n  gap: 10px;\n}\n\n.release {\n  color: black !important;\n  border-radius: 5px;\n  padding: 5px;\n  width: fit-content;\n  margin-top: 8px;\n}\n\n.done {\n  background-color: $mega-success-green-transparent;\n}\n\n.open {\n  background-color: $mega-danger-red-transparent;\n}\n\n.wip {\n  background-color: $mega-warning-yellow-transparent;\n}\n\nth, td {\n  font-size: 17px;\n}\n\ntable {\n  margin-bottom: 30px;\n}\n\n.action-label {\n  cursor: pointer;\n  white-space: pre-wrap;\n}\n\n.mat-column-name {\n  flex: 0 0 20%;\n}\n\n.mat-column-controlEmployeesState {\n  flex: 0 0 10%;\n}\n\n.mat-column-controlProjectState {\n  flex: 0 0 10%;\n}\n\n.mat-column-controlBillingState {\n  flex: 0 0 10%;\n}\n\n.mat-column-comment {\n  > :nth-child(2) {\n    flex-grow: 1;\n    max-width: 600px;\n  }\n}\n",
                    "styleUrl": "./project-overview-card.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "omService",
                        "type": "OfficeManagementService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "pmService",
                        "type": "ProjectManagementService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "notificationService",
                        "type": "NotificationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "commentService",
                        "type": "CommentService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "stepEntryService",
                        "type": "StepEntriesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_bottomSheet",
                        "type": "MatBottomSheet",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "projectCommentService",
                        "type": "ProjectCommentService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "snackbarService",
                        "type": "SnackbarService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 64,
                "jsdoctags": [
                    {
                        "name": "omService",
                        "type": "OfficeManagementService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "pmService",
                        "type": "ProjectManagementService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "notificationService",
                        "type": "NotificationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "commentService",
                        "type": "CommentService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "stepEntryService",
                        "type": "StepEntriesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_bottomSheet",
                        "type": "MatBottomSheet",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "projectCommentService",
                        "type": "ProjectCommentService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackbarService",
                        "type": "SnackbarService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<mat-card data-cy=\"project-card\" class=\"mat-elevation-z6 mt-10\">\n  <mat-card-header>\n    <mat-card-title>{{'office-management.projects' | translate}}</mat-card-title>\n  </mat-card-header>\n  <mat-card-content class=\"project-overview__content_container\">\n    <ng-container *ngIf=\"!pmEntries; else datatable\">\n      <ngx-skeleton-loader [theme]=\"{ height: '56px' }\"\n                           appearance=\"line\"></ngx-skeleton-loader>\n      <ngx-skeleton-loader [theme]=\"{ height: '75px' }\"\n                           appearance=\"line\"></ngx-skeleton-loader>\n    </ng-container>\n\n    <ng-template #datatable>\n      <div class=\"mat-elevation-z10 table-container\">\n        <mat-table *ngIf=\"pmEntries.length > 0; else noProjectsFound\" [dataSource]=\"pmEntries\"\n                   style=\"width: 100%;\"\n                   data-cy=\"project-table\">\n\n          <ng-container matColumnDef=\"name\">\n            <mat-header-cell *matHeaderCellDef>{{'project-management.projectName' | translate}}</mat-header-cell>\n            <mat-cell *matCellDef=\"let pmEntry\" class=\"font-weight-bold\">\n              <span class=\"mobile-label\">{{'project-management.projectName' | translate}}</span>\n              <app-projekt-name-with-zep-link [projectName]=\"pmEntry.projectName\" [zepId]=\"pmEntry.zepId\"></app-projekt-name-with-zep-link>\n            </mat-cell>\n          </ng-container>\n\n          <ng-container matColumnDef=\"controlEmployeesState\">\n            <mat-header-cell *matHeaderCellDef class=\"text-center\">\n              {{'project-management.employeeDone' | translate}}</mat-header-cell>\n            <mat-cell *matCellDef=\"let pmEntry\" class=\"text-center\">\n              <span class=\"mobile-label\">{{'project-management.employeeDone' | translate}}</span>\n              <app-state-indicator [state]=\"areAllEmployeeChecksDone(pmEntry)\"\n                                   data-cy=\"employees-checked\"></app-state-indicator>\n            </mat-cell>\n          </ng-container>\n\n          <ng-container matColumnDef=\"controlProjectState\">\n            <mat-header-cell *matHeaderCellDef class=\"text-center\">\n            <span [matTooltipPosition]=\"tooltipPosition\"\n                  [matTooltipShowDelay]=\"tooltipShowDelay\"\n                  matTooltip=\"{{'project-management.tooltips.projectTimeState' | translate}}\"\n                  matTooltipClass=\"mega-custom-tooltip\">\n              {{'project-management.projectTimeState' | translate}}\n            </span>\n            </mat-header-cell>\n            <mat-cell *matCellDef=\"let pmEntry\" class=\"text-center\">\n              <span class=\"mobile-label\">{{'project-management.projectTimeState' | translate}}</span>\n              <app-state-indicator [matTooltipShowDelay]=\"tooltipShowDelay\"\n                                   [matTooltip]=\"getTooltipText(pmEntry.controlProjectState)\"\n                                   [state]=\"pmEntry.controlProjectState\"\n                                   data-cy=\"control-project\"></app-state-indicator>\n            </mat-cell>\n          </ng-container>\n\n          <ng-container matColumnDef=\"controlBillingState\">\n            <mat-header-cell *matHeaderCellDef class=\"text-center\">\n            <span [matTooltipPosition]=\"tooltipPosition\"\n                  [matTooltipShowDelay]=\"tooltipShowDelay\"\n                  matTooltip=\"{{'project-management.tooltips.billingState' | translate}}\"\n                  matTooltipClass=\"mega-custom-tooltip\">\n              {{'project-management.billingState' | translate}}\n            </span>\n            </mat-header-cell>\n            <mat-cell *matCellDef=\"let pmEntry\" class=\"text-center\">\n              <span class=\"mobile-label\">{{'project-management.billingState' | translate}}</span>\n              <app-state-indicator [matTooltipShowDelay]=\"tooltipShowDelay\"\n                                   [matTooltip]=\"getTooltipText(pmEntry.controlBillingState)\"\n                                   [state]=\"pmEntry.controlBillingState\"\n                                   data-cy=\"project-billing\"></app-state-indicator>\n            </mat-cell>\n          </ng-container>\n\n          <ng-container matColumnDef=\"comment\">\n            <mat-header-cell *matHeaderCellDef class=\"text-center\">\n              {{'comments-for-employee.table.comment' | translate}}</mat-header-cell>\n            <mat-cell *matCellDef=\"let pmEntry\">\n              <span class=\"mobile-label\">{{'comments-for-employee.table.comment' | translate}}</span>\n              <p (click)=\"onStartEditing(pmEntry.projectName)\"\n                 *ngIf=\"pmEntry.projectComment?.comment && forProjectName !== pmEntry.projectName\"\n                 class=\"action-label\"\n                 style=\"max-width: 850px\">{{ pmEntry.projectComment?.comment }}</p>\n              <button (click)=\"onStartEditing(pmEntry.projectName)\"\n                      *ngIf=\"!pmEntry.projectComment?.comment && forProjectName !== pmEntry.projectName\"\n                      [attr.aria-label]=\"'global.addComment' | translate\"\n                      class=\"btn-addComment gepardec-icon-button\"\n                      mat-icon-button\n                      matTooltip=\"{{'global.addComment' | translate}}\"\n                      matTooltipShowDelay=\"1000\">\n                <mat-icon>add</mat-icon>\n              </button>\n              <app-inline-text-editor (commentChange)=\"onCommentChange(pmEntry, $event)\"\n                                      *ngIf=\"showCommentEditor && forProjectName === pmEntry.projectName\"\n                                      [comment]=\"pmEntry.projectComment?.comment\"></app-inline-text-editor>\n            </mat-cell>\n          </ng-container>\n\n          <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\n          <mat-row *matRowDef=\"let row; columns: displayedColumns;\" class=\"office_management__table-row\"></mat-row>\n        </mat-table>\n      </div>\n    </ng-template>\n\n    <ng-template #noProjectsFound>\n      <mat-card>{{'office-management.noOmEntriesFound' | translate}}</mat-card>\n    </ng-template>\n  </mat-card-content>\n</mat-card>\n"
        },
        {
            "name": "ProjectStateSelectComponent",
            "id": "component-ProjectStateSelectComponent-4c2844993b4d47481dde3263f678db1f0604c621c10d0befb183437d8a45ee977f499dbc2a9161c9f625da856e2575c04adaf76c2105a081cd2d8677204b5e50",
            "file": "src/app/domains/shared/ui-common/project-state-select/project-state-select.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-project-state-select",
            "styleUrls": [
                "./project-state-select.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./project-state-select.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "ProjectState",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "selectionChange",
                    "defaultValue": "new EventEmitter<MatSelectChange>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "ProjectState",
                    "defaultValue": "ProjectState",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "select",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatSelect",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'select'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewChecked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSelectionChange",
                    "args": [
                        {
                            "name": "selectChange",
                            "type": "MatSelectChange",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "selectChange",
                            "type": "MatSelectChange",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "MatSelectModule",
                    "type": "module"
                },
                {
                    "name": "MatOptionModule",
                    "type": "module"
                },
                {
                    "name": "TranslateModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {AfterViewChecked, ChangeDetectorRef, Component, EventEmitter, Input, Output, ViewChild} from '@angular/core';\nimport {MatSelect, MatSelectChange, MatSelectModule} from '@angular/material/select';\nimport {ProjectState} from '@mega/shared/data-model';\nimport {TranslateModule} from '@ngx-translate/core';\nimport {MatOptionModule} from '@angular/material/core';\n\n@Component({\n  selector: 'app-project-state-select',\n  templateUrl: './project-state-select.component.html',\n  styleUrls: ['./project-state-select.component.scss'],\n  standalone: true,\n  imports: [\n    MatSelectModule,\n    MatOptionModule,\n    TranslateModule\n  ]\n})\nexport class ProjectStateSelectComponent implements AfterViewChecked {\n\n  ProjectState = ProjectState;\n\n  @Input() value: ProjectState;\n  @Output() selectionChange = new EventEmitter<MatSelectChange>();\n  @ViewChild('select') select: MatSelect;\n\n  constructor(private cdr: ChangeDetectorRef) {\n  }\n\n  get isInProgressSelected(): boolean {\n    return this.value === ProjectState.WORK_IN_PROGRESS;\n  }\n\n  get isNotRelevantSelected(): boolean {\n    return this.value === ProjectState.NOT_RELEVANT;\n  }\n\n  get isDoneSelected(): boolean {\n    return this.value === ProjectState.DONE;\n  }\n\n  ngAfterViewChecked() {\n    this.cdr.detectChanges();\n  }\n\n  onSelectionChange(selectChange: MatSelectChange): void {\n    this.selectionChange.emit(selectChange);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'styles/colors';\n\nmat-select {\n  padding: 5px;\n  border-radius: 3px;\n  width: 125px;\n}\n\n.select-red {\n  background: $mega-danger-red-transparent;\n}\n\n.select-green {\n  background: $mega-success-green-transparent;\n}\n\n.select-yellow {\n  background: $mega-warning-yellow-transparent;\n}\n",
                    "styleUrl": "./project-state-select.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "AfterViewChecked"
            ],
            "accessors": {
                "isInProgressSelected": {
                    "name": "isInProgressSelected",
                    "getSignature": {
                        "name": "isInProgressSelected",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 29
                    }
                },
                "isNotRelevantSelected": {
                    "name": "isNotRelevantSelected",
                    "getSignature": {
                        "name": "isNotRelevantSelected",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 33
                    }
                },
                "isDoneSelected": {
                    "name": "isDoneSelected",
                    "getSignature": {
                        "name": "isDoneSelected",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 37
                    }
                }
            },
            "templateData": "<mat-select #select\n            (selectionChange)=\"onSelectionChange($event)\"\n            [(value)]=\"value\"\n            [class.select-green]=\"select.value === ProjectState.DONE || select.value === ProjectState.NOT_RELEVANT\"\n            [class.select-red]=\"select.value === ProjectState.OPEN\"\n            [class.select-yellow]=\"select.value === ProjectState.WORK_IN_PROGRESS\">\n  <mat-option [disabled]=\"isInProgressSelected\"\n              [value]=\"ProjectState.OPEN\"\n              data-cy=\"option-open\">{{'STATE.OPEN' | translate}}</mat-option>\n  <mat-option [disabled]=\"isNotRelevantSelected\"\n              [value]=\"ProjectState.WORK_IN_PROGRESS\"\n              data-cy=\"option-in-progress\">{{'STATE.WORK_IN_PROGRESS' | translate}}</mat-option>\n  <mat-option [disabled]=\"isNotRelevantSelected\"\n              [value]=\"ProjectState.DONE\"\n              data-cy=\"option-done\">{{'STATE.DONE' | translate}}</mat-option>\n  <mat-option [value]=\"ProjectState.NOT_RELEVANT\"\n              data-cy=\"option-not-relevant\">{{'STATE.NOT_RELEVANT' | translate}}</mat-option>\n</mat-select>\n"
        },
        {
            "name": "ProjectsWithoutLeadsCardComponent",
            "id": "component-ProjectsWithoutLeadsCardComponent-ed1ff7644cc649cd02a064a9b7b0d158649c4e0c8b98b5744057d5fd451629b39bdfbd5bd00a37bba2f622f489c6138cf933fb310fe0492e782e8a3d03d10288",
            "file": "src/app/domains/office-management/feature-office-management/projects-without-leads-card/projects-without-leads-card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-projects-without-leads-card",
            "styleUrls": [
                "./projects-without-leads-card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./projects-without-leads-card.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "displayedColumns",
                    "defaultValue": "['name', 'comment']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "loaded",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "projectsWithoutLeads",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CustomerProjectWithoutLeads[]",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "NgIf"
                },
                {
                    "name": "MatCardModule",
                    "type": "module"
                },
                {
                    "name": "MatTooltipModule",
                    "type": "module"
                },
                {
                    "name": "StateIndicatorComponent",
                    "type": "component"
                },
                {
                    "name": "NgxSkeletonLoaderModule",
                    "type": "module"
                },
                {
                    "name": "MatTableModule",
                    "type": "module"
                },
                {
                    "name": "ProjektNameWithZepLinkComponent",
                    "type": "component"
                },
                {
                    "name": "TranslateModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, OnInit} from '@angular/core';\nimport {ProjectManagementService} from '@mega/project-management/data-service';\nimport {finalize} from 'rxjs';\nimport {CustomerProjectWithoutLeads} from '@mega/shared/data-model';\nimport {TranslateModule} from '@ngx-translate/core';\nimport {ProjektNameWithZepLinkComponent} from '@mega/office-management/ui-common';\nimport {MatTableModule} from '@angular/material/table';\nimport {NgxSkeletonLoaderModule} from 'ngx-skeleton-loader';\nimport {StateIndicatorComponent} from '@mega/shared/ui-common';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatCardModule} from '@angular/material/card';\nimport {NgIf} from '@angular/common';\n\n@Component({\n  selector: 'app-projects-without-leads-card',\n  templateUrl: './projects-without-leads-card.component.html',\n  styleUrls: ['./projects-without-leads-card.component.scss'],\n  standalone: true,\n  imports: [\n    NgIf,\n    MatCardModule,\n    MatTooltipModule,\n    StateIndicatorComponent,\n    NgxSkeletonLoaderModule,\n    MatTableModule,\n    ProjektNameWithZepLinkComponent,\n    TranslateModule\n  ]\n})\nexport class ProjectsWithoutLeadsCardComponent implements OnInit {\n\n  constructor(private pmService: ProjectManagementService) {\n  }\n\n  public projectsWithoutLeads: CustomerProjectWithoutLeads[];\n  public loaded = false;\n  public displayedColumns = ['name', 'comment'];\n\n  ngOnInit(): void {\n    this.pmService.getProjectsWithoutLeads()\n      .pipe(\n        finalize(() => this.loaded = true)\n      )\n      .subscribe(projects => this.projectsWithoutLeads = projects);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".projects-without-leads__card-title {\n  display: flex;\n  align-items: center;\n  gap: 10px;\n}\n\n.projects-without-leads__mat-card-content {\n  display: flex;\n  flex-direction: column;\n}\n",
                    "styleUrl": "./projects-without-leads-card.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "pmService",
                        "type": "ProjectManagementService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": "pmService",
                        "type": "ProjectManagementService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-card class=\"mat-elevation-z6 mt-10\" *ngIf=\"!loaded || projectsWithoutLeads?.length > 0\">\n  <mat-card-header>\n    <mat-card-title class=\"projects-without-leads__card-title\"\n                    matTooltipPosition=\"above\"\n                    [matTooltipShowDelay]=\"500\"\n                    matTooltip=\"{{'office-management.tooltips.projectsWithoutLeads' | translate}}\"\n                    matTooltipClass=\"mega-custom-tooltip\"\n    >\n      <app-state-indicator size=\"small\"></app-state-indicator>\n      {{'office-management.projectsWithoutLeads' | translate}}\n\n    </mat-card-title>\n  </mat-card-header>\n  <mat-card-content class=\"projects-without-leads__mat-card-content\">\n    <ng-container *ngIf=\"!loaded; else datatable\">\n      <ngx-skeleton-loader [theme]=\"{ height: '56px' }\"\n                           appearance=\"line\"></ngx-skeleton-loader>\n      <ngx-skeleton-loader [theme]=\"{ height: '75px' }\"\n                           appearance=\"line\"></ngx-skeleton-loader>\n    </ng-container>\n\n    <ng-template #datatable>\n      <div class=\"mat-elevation-z10 table-container\">\n        <mat-table [dataSource]=\"projectsWithoutLeads\">\n\n          <ng-container matColumnDef=\"name\">\n            <mat-header-cell *matHeaderCellDef>{{'project-management.projectName' | translate}}</mat-header-cell>\n            <mat-cell *matCellDef=\"let project\" class=\"font-weight-bold\">\n              <span class=\"mobile-label\">{{'project-management.projectName' | translate}}</span>\n              <app-projekt-name-with-zep-link [projectName]=\"project.projectName\" [zepId]=\"project.zepId\"></app-projekt-name-with-zep-link>\n            </mat-cell>\n          </ng-container>\n\n          <ng-container matColumnDef=\"comment\">\n            <mat-header-cell *matHeaderCellDef class=\"text-center\">\n              {{'comments-for-employee.table.comment' | translate}}</mat-header-cell>\n            <mat-cell *matCellDef=\"let project\">\n              <span class=\"mobile-label\">{{'comments-for-employee.table.comment' | translate}}</span>\n              <p class=\"action-label\">{{ project.comment }}</p>\n            </mat-cell>\n          </ng-container>\n\n          <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\n          <mat-row *matRowDef=\"let row; columns: displayedColumns;\" class=\"office_management__table-row\"></mat-row>\n        </mat-table>\n      </div>\n    </ng-template>\n  </mat-card-content>\n</mat-card>\n"
        },
        {
            "name": "ProjektNameWithZepLinkComponent",
            "id": "component-ProjektNameWithZepLinkComponent-c4fd94c3c3684b978a05b255ca5be0aad4ab463f41498fbfcbaead543787a64281eda906c5b4e9973061ad82599af168916cebd66a2f0c1032e64d4dc9c15ad4",
            "file": "src/app/domains/office-management/ui-common/projekt-name-with-zep-link/projekt-name-with-zep-link.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-projekt-name-with-zep-link",
            "styleUrls": [
                "./projekt-name-with-zep-link.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./projekt-name-with-zep-link.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "projectName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "zepId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "configServiceSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "projectManagementUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "MatTooltipModule",
                    "type": "module"
                },
                {
                    "name": "NgIf"
                },
                {
                    "name": "TranslateModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input, OnDestroy, OnInit} from '@angular/core';\nimport {Config} from '@mega/shared/data-model';\nimport {ConfigService} from '@mega/shared/data-service';\nimport {configuration} from '@mega/shared/util-constant';\nimport {Subscription} from 'rxjs';\nimport {TranslateModule} from '@ngx-translate/core';\nimport {NgIf} from '@angular/common';\nimport {MatTooltipModule} from '@angular/material/tooltip';\n\n@Component({\n  selector: 'app-projekt-name-with-zep-link',\n  templateUrl: './projekt-name-with-zep-link.component.html',\n  styleUrls: ['./projekt-name-with-zep-link.component.scss'],\n  standalone: true,\n  imports: [\n    MatTooltipModule,\n    NgIf,\n    TranslateModule\n  ]\n})\nexport class ProjektNameWithZepLinkComponent implements OnInit, OnDestroy {\n  @Input() projectName: string;\n  @Input() zepId: number;\n\n  projectManagementUrl: string;\n  private configServiceSubscription: Subscription;\n\n  constructor(private configService: ConfigService) {\n  }\n\n  ngOnInit(): void {\n    this.configServiceSubscription = this.configService.getConfig().subscribe((config: Config) => {\n      this.projectManagementUrl = config.zepOrigin + '/' + configuration.PROJECT_MANAGEMENT_SEGMENT;\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.configServiceSubscription.unsubscribe();\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'styles/colors';\n\na {\n  color: inherit;\n  text-decoration: none;\n}\n\na:hover {\n  color: $mega-success-green;\n}\n",
                    "styleUrl": "./projekt-name-with-zep-link.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "configService",
                        "type": "ConfigService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "configService",
                        "type": "ConfigService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<ng-template #noZepId>\n  <strong\n    matTooltipPosition=\"above\"\n    [matTooltipShowDelay]=\"500\"\n    matTooltip=\"{{'project-management.tooltips.noZepId' | translate}}\"\n    matTooltipClass=\"mega-custom-tooltip\"\n  >\n    {{projectName}}\n  </strong>\n\n</ng-template>\n\n<a *ngIf=\"zepId else noZepId\" [href]=\"projectManagementUrl + zepId\" target=\"_blank\">\n  <strong>{{projectName}}</strong>\n</a>\n"
        },
        {
            "name": "StateIndicatorComponent",
            "id": "component-StateIndicatorComponent-75104175feb980fcdad4ff3aec4fe0793031685d74b1cd3923fd4989cf8bf61ac85965ba4e3d9161ff93bf966b6494dfd761b7aa44bb3606b1c98aac64614e4d",
            "file": "src/app/domains/shared/ui-common/state-indicator/state-indicator.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-state-indicator",
            "styleUrls": [
                "./state-indicator.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./state-indicator.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "size",
                    "defaultValue": "'small'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "ProjectState",
                    "defaultValue": "ProjectState",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "State",
                    "defaultValue": "State",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "NgSwitch"
                },
                {
                    "name": "NgSwitchCase"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "NgSwitchDefault"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input} from '@angular/core';\nimport {ProjectState, State} from '@mega/shared/data-model';\nimport {MatIconModule} from '@angular/material/icon';\nimport {NgSwitch, NgSwitchCase, NgSwitchDefault} from '@angular/common';\n\n@Component({\n  selector: 'app-state-indicator',\n  templateUrl: './state-indicator.component.html',\n  styleUrls: ['./state-indicator.component.scss'],\n  standalone: true,\n  imports: [\n    NgSwitch,\n    NgSwitchCase,\n    MatIconModule,\n    NgSwitchDefault\n  ]\n})\nexport class StateIndicatorComponent {\n\n  State = State;\n  ProjectState = ProjectState;\n\n  @Input() state: string;\n  @Input() size: 'small' | 'medium' | 'large' = 'small';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "mat-icon {\n  width: auto;\n}\n\n.small mat-icon {\n  height: 30px;\n  font-size: 30px;\n}\n\n.medium mat-icon {\n  height: 55px;\n  font-size: 55px;\n}\n\n.large mat-icon {\n  height: 80px;\n  font-size: 80px;\n}\n\n\n",
                    "styleUrl": "./state-indicator.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<span [class]=\"size\" [ngSwitch]=\"state\">\n  <mat-icon *ngSwitchCase=\"State.OPEN\" class=\"red\">cancel</mat-icon>\n  <mat-icon *ngSwitchCase=\"State.DONE\" class=\"green\">check_circle</mat-icon>\n  <mat-icon *ngSwitchCase=\"ProjectState.WORK_IN_PROGRESS\" class=\"red\">cancel</mat-icon>\n  <mat-icon *ngSwitchCase=\"ProjectState.NOT_RELEVANT\" class=\"green\">check_circle</mat-icon>\n  <mat-icon *ngSwitchDefault class=\"yellow\">error</mat-icon>\n</span>\n"
        },
        {
            "name": "StateSelectComponent",
            "id": "component-StateSelectComponent-a29d9ab7deffc116e510bce7b8385eec761ad9b72e8dfc647869610f5c0adf29b6df52e0378b6f897a1a151b82032206640e82dd05421c4d387700b5b421251d",
            "file": "src/app/domains/shared/ui-common/state-select/state-select.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-state-select",
            "styleUrls": [
                "./state-select.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./state-select.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "State",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "selectionChange",
                    "defaultValue": "new EventEmitter<MatSelectChange>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "State",
                    "defaultValue": "State",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewChecked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSelectionChange",
                    "args": [
                        {
                            "name": "selectChange",
                            "type": "MatSelectChange",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "selectChange",
                            "type": "MatSelectChange",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "MatSelectModule",
                    "type": "module"
                },
                {
                    "name": "MatOptionModule",
                    "type": "module"
                },
                {
                    "name": "TranslateModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {AfterViewChecked, ChangeDetectorRef, Component, EventEmitter, Input, Output} from '@angular/core';\nimport {State} from '@mega/shared/data-model';\nimport {MatSelectChange, MatSelectModule} from '@angular/material/select';\nimport {TranslateModule} from '@ngx-translate/core';\nimport {MatOptionModule} from '@angular/material/core';\n\n@Component({\n  selector: 'app-state-select',\n  templateUrl: './state-select.component.html',\n  styleUrls: ['./state-select.component.scss'],\n  standalone: true,\n  imports: [\n    MatSelectModule,\n    MatOptionModule,\n    TranslateModule\n  ]\n})\nexport class StateSelectComponent implements AfterViewChecked {\n\n  State = State;\n\n  @Input() value: State;\n  @Output() selectionChange = new EventEmitter<MatSelectChange>();\n\n  constructor(private cdr: ChangeDetectorRef) {\n  }\n\n  ngAfterViewChecked() {\n    this.cdr.detectChanges();\n  }\n\n  onSelectionChange(selectChange: MatSelectChange): void {\n    this.selectionChange.emit(selectChange);\n    this.value = selectChange.value;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'styles/colors';\n\nmat-select {\n  padding: 5px;\n  border-radius: 3px;\n  width: 100px;\n}\n\n.select-red {\n  background: $mega-danger-red-transparent;\n}\n\n.select-green {\n  background: $mega-success-green-transparent;\n}\n",
                    "styleUrl": "./state-select.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "AfterViewChecked"
            ],
            "templateData": "<mat-select #select\n            (selectionChange)=\"onSelectionChange($event)\"\n            [class.select-green]=\"select.value === State.DONE\"\n            [class.select-red]=\"select.value === State.OPEN\"\n            [value]=\"value\">\n  <mat-option [value]=\"State.OPEN\" data-cy=\"option-open\">{{'STATE.OPEN' | translate}}</mat-option>\n  <mat-option [value]=\"State.DONE\" data-cy=\"option-done\">{{'STATE.DONE' | translate}}</mat-option>\n</mat-select>\n"
        },
        {
            "name": "TimeCheckComponent",
            "id": "component-TimeCheckComponent-8664e3bea7b2ed9de786e21a481a271ccebd1a5e9389332ea74779fb95ada13ed125bc3e4f2d5fdb4f0f5d37fb06070098120ef25d5e7ebd47d73e53db1e350a",
            "file": "src/app/domains/monthly-report/feature-monthly-report/time-check/time-check.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-time-check",
            "styleUrls": [
                "./time-check.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./time-check.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "monthlyReport",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "MonthlyReport",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "displayedColumns",
                    "defaultValue": "['warningIcon', 'date', 'description']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "emptyTimeWarnings",
                    "defaultValue": "{\n    date: '',\n    description: ['Keine Einträge']\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TimeWarning",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "State",
                    "defaultValue": "State",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                }
            ],
            "methodsClass": [
                {
                    "name": "getSortedTimeWarnings",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "MatCardModule",
                    "type": "module"
                },
                {
                    "name": "NgIf"
                },
                {
                    "name": "NgxSkeletonLoaderModule",
                    "type": "module"
                },
                {
                    "name": "StateIndicatorComponent",
                    "type": "component"
                },
                {
                    "name": "MatTableModule",
                    "type": "module"
                },
                {
                    "name": "DatePipe",
                    "type": "pipe"
                },
                {
                    "name": "TranslateModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input} from '@angular/core';\nimport {MonthlyReport, TimeWarning} from '@mega/monthly-report/data-model';\nimport {State} from '@mega/shared/data-model';\nimport {TranslateModule} from '@ngx-translate/core';\nimport {MatTableModule} from '@angular/material/table';\nimport {StateIndicatorComponent} from '@mega/shared/ui-common';\nimport {NgxSkeletonLoaderModule} from 'ngx-skeleton-loader';\nimport {DatePipe, NgIf} from '@angular/common';\nimport {MatCardModule} from '@angular/material/card';\n\n@Component({\n  selector: 'app-time-check',\n  templateUrl: './time-check.component.html',\n  styleUrls: ['./time-check.component.scss'],\n  standalone: true,\n  imports: [\n    MatCardModule,\n    NgIf,\n    NgxSkeletonLoaderModule,\n    StateIndicatorComponent,\n    MatTableModule,\n    DatePipe,\n    TranslateModule\n  ]\n})\nexport class TimeCheckComponent {\n\n  State = State;\n\n  @Input() monthlyReport: MonthlyReport;\n\n  displayedColumns = ['warningIcon', 'date', 'description'];\n\n  emptyTimeWarnings: TimeWarning = {\n    date: '',\n    description: ['Keine Einträge']\n  };\n\n  getSortedTimeWarnings() {\n    if (this.monthlyReport.timeWarnings.length === 0) {\n      return [this.emptyTimeWarnings];\n    }\n\n    return this.monthlyReport.timeWarnings.sort((a, b) => Date.parse(a.date).valueOf() - Date.parse(b.date).valueOf());\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\n// Damit das Icon nicht abgeschnitten wird\nmat-cell, mat-header-cell {\n  //box-sizing: content-box !important;\n}\n\n.mat-column-date {\n  flex: 0 0 35%;\n}\n\n.mat-column-warningIcon {\n  display: flex;\n  justify-content: center;\n  flex: 0;\n}\n\n.no-warnings {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center\n}\n",
                    "styleUrl": "./time-check.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<mat-card appearance=\"raised\" class=\"fill-parent\">\n\n  <mat-card-header>\n    <mat-card-title>{{'monthly-report.title.time' | translate}}</mat-card-title>\n  </mat-card-header>\n\n  <mat-card-content [class.no-warnings]=\"!monthlyReport || monthlyReport?.timeWarnings?.length === 0\">\n    <ng-container *ngIf=\"!monthlyReport\">\n      <ngx-skeleton-loader [theme]=\"{ height: '80px', width: '80px' }\" appearance=\"circle\"></ngx-skeleton-loader>\n      <ngx-skeleton-loader [theme]=\"{ width: '250px', 'margin-top': '20px' }\" appearance=\"line\"></ngx-skeleton-loader>\n    </ng-container>\n\n    <ng-container *ngIf=\"monthlyReport?.timeWarnings?.length === 0\">\n      <app-state-indicator [state]=\"State.DONE\" size=\"large\"></app-state-indicator>\n      <p>{{'monthly-report.ok' | translate}}</p>\n    </ng-container>\n\n    <ng-container *ngIf=\"monthlyReport?.timeWarnings?.length > 0\">\n      <mat-table [dataSource]=\"getSortedTimeWarnings()\" class=\"mat-elevation-z1 table-container\">\n\n        <ng-container matColumnDef=\"warningIcon\">\n          <mat-header-cell *matHeaderCellDef></mat-header-cell>\n          <mat-cell *matCellDef=\"let element\">\n            <div>\n              <app-state-indicator size=\"small\"></app-state-indicator>\n            </div>\n          </mat-cell>\n        </ng-container>\n\n        <ng-container matColumnDef=\"date\">\n          <mat-header-cell *matHeaderCellDef> {{'monthly-report.table.time.date' | translate}}</mat-header-cell>\n          <mat-cell *matCellDef=\"let element\"> {{element.date | date:'E dd.MM.yyyy' : null : 'de-AT'}} </mat-cell>\n        </ng-container>\n\n        <ng-container matColumnDef=\"description\">\n          <mat-header-cell *matHeaderCellDef>{{'monthly-report.table.time.description' | translate}}</mat-header-cell>\n          <mat-cell *matCellDef=\"let element\"> {{element.description}} </mat-cell>\n        </ng-container>\n\n        <mat-header-row *matHeaderRowDef=\"displayedColumns; sticky: true\"></mat-header-row>\n        <mat-row class=\"fixed-columns\" *matRowDef=\"let row; columns: displayedColumns;\"></mat-row>\n      </mat-table>\n    </ng-container>\n  </mat-card-content>\n</mat-card>\n"
        },
        {
            "name": "UserActionsComponent",
            "id": "component-UserActionsComponent-e1783334a82937153d083c6e677f11fcf37cbbf4ae37e7adbfd5fd2a864fe2e2af0d1ed1514981a71073959b8aa2c0c437bbac15861879aa256c438ced760bdc",
            "file": "src/app/domains/shared/ui-common/user-actions/user-actions.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-user-actions",
            "styleUrls": [
                "./user-actions.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./user-actions.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "User",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "logout",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "EventEmitter<void>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "menuTrigger",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatMenuTrigger",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MatMenuTrigger"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "pictureUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31
                }
            ],
            "methodsClass": [
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openInfoDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatMenuModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "NgIf"
                },
                {
                    "name": "TranslateModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, OnInit, Output, ViewChild} from '@angular/core';\nimport {MatDialog} from '@angular/material/dialog';\nimport {User, UserInfo} from '@mega/shared/data-model';\nimport {InfoDialogComponent} from '../info-dialog/info-dialog.component';\nimport {OAuthService} from 'angular-oauth2-oidc';\nimport {MatMenuModule, MatMenuTrigger} from '@angular/material/menu';\nimport {TranslateModule} from '@ngx-translate/core';\nimport {NgIf} from '@angular/common';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatButtonModule} from '@angular/material/button';\n\n@Component({\n  selector: 'app-user-actions',\n  templateUrl: './user-actions.component.html',\n  styleUrls: ['./user-actions.component.scss'],\n  standalone: true,\n  imports: [\n    MatButtonModule,\n    MatMenuModule,\n    MatIconModule,\n    NgIf,\n    TranslateModule\n  ]\n})\nexport class UserActionsComponent implements OnInit {\n\n  @Input() user: User;\n  @Output() logout: EventEmitter<void> = new EventEmitter();\n  @ViewChild(MatMenuTrigger) menuTrigger: MatMenuTrigger;\n\n  pictureUrl: string;\n\n  constructor(private dialog: MatDialog,\n              private oAuthService: OAuthService) {\n  }\n\n  ngOnInit(): void {\n    this.oAuthService.loadUserProfile().then((userInfo: UserInfo) => {\n      this.pictureUrl = userInfo?.picture;\n    });\n  }\n\n  doLogout() {\n    this.logout.emit();\n  }\n\n  openInfoDialog(): void {\n    this.dialog.open(InfoDialogComponent, {minWidth: '50%', autoFocus: false});\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".avatar {\n  border-radius: 50%;\n  width: 20%;\n}\n\n* {\n  vertical-align: middle;\n}\n\n:host {\n  display: flex;\n  align-items: center;\n  gap: 5px;\n  height: 100%;\n}\n",
                    "styleUrl": "./user-actions.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "oAuthService",
                        "type": "OAuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 31,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "oAuthService",
                        "type": "OAuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<button [matMenuTriggerFor]=\"menu\" id=\"userBtn\" mat-button>\n  {{user?.firstname + \" \" + user?.lastname}}\n  <mat-icon iconPositionEnd>keyboard_arrow_down</mat-icon>\n</button>\n\n<img *ngIf=\"pictureUrl\" [src]=\"pictureUrl\" alt=\"avatar\" class=\"avatar\" />\n\n<mat-menu #menu id=\"menu\">\n  <button (click)=\"openInfoDialog()\" mat-menu-item>\n    {{'user-actions.info' | translate}}\n  </button>\n  <button (click)=\"doLogout()\" id=\"logoutBtn\" mat-menu-item>\n    {{'user-actions.logout' | translate}}\n  </button>\n</mat-menu>\n"
        }
    ],
    "modules": [
        {
            "name": "StorybookMinimalSetupModule",
            "id": "module-StorybookMinimalSetupModule-9cb5e565e9a7bcb20469d4098acd4b40710bb2d208728633557e6e81142ab2038e5a04003357b21219a273a6a538eba4cbf63f9c02554eb4027eff93f072d32b",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/stories/modules/storybook-minimalsetup.module.ts",
            "methods": [],
            "sourceCode": "import {TranslateLoader, TranslateModule} from '@ngx-translate/core';\nimport {importProvidersFrom, NgModule} from '@angular/core';\nimport {HttpClient, provideHttpClient} from '@angular/common/http';\nimport {httpTranslateLoader} from '../../app/app.config';\nimport {MAT_DIALOG_DATA, MatDialogModule, MatDialogRef} from '@angular/material/dialog';\nimport {provideAnimations} from '@angular/platform-browser/animations';\nimport {MatNativeDateModule} from '@angular/material/core';\nimport {MAT_BOTTOM_SHEET_DATA, MatBottomSheetModule, MatBottomSheetRef} from '@angular/material/bottom-sheet';\nimport {OAuthModule} from 'angular-oauth2-oidc';\nimport {MatSnackBarModule} from '@angular/material/snack-bar';\n\n@NgModule({\n  imports: [TranslateModule.forRoot(\n    {\n      loader: {\n        provide: TranslateLoader,\n        useFactory: httpTranslateLoader,\n        deps: [HttpClient]\n      },\n      defaultLanguage: 'de',\n      useDefaultLang: true\n    }\n  ),\n    MatNativeDateModule,\n    MatDialogModule,\n    MatBottomSheetModule\n  ],\n  providers: [\n    provideHttpClient(),\n    provideAnimations(),\n    {provide: MatDialogRef, useValue: {}},\n    {\n      provide: MAT_BOTTOM_SHEET_DATA,\n      useValue: {}\n    },\n    {provide: MatBottomSheetRef, useValue: {}},\n    {\n      provide: MAT_DIALOG_DATA,\n      useValue: {}\n    },\n    importProvidersFrom(OAuthModule.forRoot()),\n    importProvidersFrom(MatSnackBarModule)],\n  exports: []\n})\nexport class StorybookMinimalSetupModule {\n\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "AllDone",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/monthly-report/employee-check.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    monthlyReport: {\n      ...monthlyReport,\n      employeeCheckState: 'DONE',\n      internalCheckState: State.DONE\n    }\n  }\n}"
            },
            {
                "name": "AllError",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/monthly-report/employee-check.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    monthlyReport: {\n      ...monthlyReport,\n      assigned: true,\n      employeeCheckState: 'OPEN'\n    }\n  }\n}"
            },
            {
                "name": "appConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ApplicationConfig",
                "defaultValue": "{\n  providers: [\n    importProvidersFrom(\n      BrowserModule,\n      MatMomentDateModule,\n      MatSnackBarModule,\n      NgxSkeletonLoaderModule,\n      MatDialogModule,\n      OAuthModule.forRoot(),\n      TranslateModule.forRoot({\n          loader: {\n            provide: TranslateLoader,\n            useFactory: httpTranslateLoader,\n            deps: [HttpClient]\n          }\n        }\n      )\n    ),\n    {provide: LOCALE_ID, useValue: 'de-AT'},\n    {provide: APP_BASE_HREF, useValue: '/'},\n    {provide: ErrorHandler, useClass: ErrorHandlerService},\n    {provide: OAuthModuleConfig, useFactory: authConfigFactory, deps: [ConfigService]},\n    provideHttpClient(withInterceptorsFromDi()),\n    provideAnimations(),\n    provideRouter(routes)\n  ]\n}"
            },
            {
                "name": "authConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/domains/shared/util-auth/auth.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "AuthConfig",
                "defaultValue": "{\n  redirectUri: window.location.origin,\n  strictDiscoveryDocumentValidation: false,\n  showDebugInformation: false,\n  sessionChecksEnabled: false,\n  responseType: 'code'\n}"
            },
            {
                "name": "ButtonClickEvents",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/domains/shared/util-testing/click-simulator.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  left: {button: 0},\n  right: {button: 2}\n}"
            },
            {
                "name": "Comment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/shared/inline-text-editor.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    comment: 'I am a comment :)'\n  }\n}"
            },
            {
                "name": "Comments",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/shared/comments-for-employee.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    comments: [{\n      authorEmail: 'max@mustermann',\n      authorName: 'Max Mustermann',\n      id: 1,\n      isEditing: false,\n      message: 'Ein Testkommentar',\n      state: 'DONE',\n      updateDate: '2023/05/03'\n    }],\n    employee: {\n      active: true,\n      email: 'max@muster',\n      firstname: 'Max',\n      lastname: 'Muster',\n      releaseDate: '2022-03-03',\n      salutation: 'salutation string',\n      title: 'Mr.',\n      userId: '3',\n      workDescription: 'super developer'\n    },\n    user: {\n      email: 'max@muster',\n      firstname: 'Maxi',\n      lastname: 'Musti',\n      roles: [Role.EMPLOYEE, Role.OFFICE_MANAGEMENT, Role.PROJECT_LEAD],\n      userId: '4'\n    }\n  }\n}"
            },
            {
                "name": "configuration",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/domains/shared/util-constant/configuration.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  PAGE_URLS: {\n    MONTHLY_REPORT: 'monthlyReport',\n    OFFICE_MANAGEMENT: 'officeManagement',\n    PROJECT_MANAGEMENT: 'projectManagement',\n    LOGIN: 'login',\n    ERROR: 'error'\n  },\n\n  OFFICE_MANAGEMENT_SEGMENT: `view/index.php?menu=MitarbeiterVerwaltungMgr&\n  modelContentMenu=true&mgr=MitarbeiterProjektzeitMgr&contentModelId=`,\n  PROJECT_MANAGEMENT_SEGMENT: `view/index.php?menu=ProjektVerwaltungMgr&modelContentMenu=true&contentModelId=`,\n\n  dateFormat: 'YYYY-MM-DD',\n  dateFormatNg: 'yyyy-MM-dd',\n\n  LogLevel: {\n    All: 0,\n    Debug: 1,\n    Info: 2,\n    Warn: 3,\n    Error: 4,\n    Fatal: 5,\n    Off: 6\n  },\n\n  logWithDate: true,\n\n  snackbar: {\n    horizontalPosition: 'center',\n    verticalPosition: 'top',\n    duration: 5000\n  }\n}"
            },
            {
                "name": "ConfirmDialog",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/monthly-report/employee-check-confirm-comment-dialog.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{}"
            },
            {
                "name": "ConfirmDialog",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/shared/confirm-dialog.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryObj<ConfirmDialogComponent>",
                "defaultValue": "{}"
            },
            {
                "name": "cypressAuthConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/domains/shared/util-auth/auth.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "AuthConfig",
                "defaultValue": "{\n  ...authConfig,\n  oidc: false\n}"
            },
            {
                "name": "DemoStory",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/office-management/employee-card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    omEntries,\n    filteredOmEntries: omEntries\n  }\n}"
            },
            {
                "name": "DemoStory",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/office-management/enterprise-card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    enterpriseEntry\n  }\n}"
            },
            {
                "name": "DemoStory",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/office-management/project-overview-card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    pmEntries\n  }\n}"
            },
            {
                "name": "DemoStory",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/office-management/projects-without-leads-card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    projectsWithoutLeads\n  }\n}"
            },
            {
                "name": "DemoStory",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/office-management/projekt-name-with-zep-link.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    projectManagementUrl: 'https://sample.com',\n    projectName: 'sampleName'\n  }\n}"
            },
            {
                "name": "DemoStory",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/project-management/billable-times-fraction.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    billableTimes: 10,\n    nonBillableTimes: 20\n  }\n}"
            },
            {
                "name": "DemoStory",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/project-management/billable-times.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    billableTimes: '10',\n    nonBillableTimes: '20'\n  }\n}"
            },
            {
                "name": "DemoStory",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/shared/datepicker-month-year.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    maxDate: '2022-06-05',\n    maxMonth: 10\n  }\n}"
            },
            {
                "name": "DemoStory",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/shared/datepicker.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    selectedDate: '2023-09-05'\n  }\n}"
            },
            {
                "name": "DemoStory",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/shared/done-comments-indicator.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    totalComments: 10,\n    finishedComments: 10\n  }\n}"
            },
            {
                "name": "Done",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/shared/pm-progress.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    pmProgresses: [{\n      firstname: 'max',\n      lastname: 'mustermann',\n      state: State.DONE,\n      project: 'amazing-project',\n      stepId: 12,\n      assigneeEmail: 'max@mustermann'\n    }],\n    internalCheckState: State.DONE,\n    displayedEmployees: []\n  }\n}"
            },
            {
                "name": "Done",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/shared/project-state-select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    value: ProjectState.DONE\n  }\n}"
            },
            {
                "name": "Done",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/shared/state-select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    value: State.DONE\n  }\n}"
            },
            {
                "name": "DONE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/shared/state-indicator.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    state: State.DONE,\n    size: 'large'\n  }\n}"
            },
            {
                "name": "enterpriseEntry",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/office-management/office-management-args.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "EnterpriseEntry",
                "defaultValue": "{\n  chargeabilityExternalEmployeesRecorded: ProjectState.WORK_IN_PROGRESS,\n  currentMonthYear: '10',\n  payrollAccountingSent: ProjectState.WORK_IN_PROGRESS,\n  zepTimesReleased: ProjectState.WORK_IN_PROGRESS\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true,\n  // Base url\n  frontendOriginSegment: 'mega-frontend',\n  backendOriginSegment: 'mega-backend'\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false,\n  // Base url\n  frontendOriginSegment: '4200',\n  backendOriginSegment: '8080'\n}"
            },
            {
                "name": "Error",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/monthly-report/employee-check.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    monthlyReport: {\n      ...monthlyReport,\n      assigned: true\n    }\n  }\n}"
            },
            {
                "name": "Error",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/shared/error.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{}"
            },
            {
                "name": "GeneralInfo",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/monthly-report/general-info.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    monthlyReport\n  }\n}"
            },
            {
                "name": "Header",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/shared/header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{}"
            },
            {
                "name": "IN_PROGRESS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/shared/state-indicator.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    state: State.IN_PROGRESS,\n    size: 'medium'\n  }\n}"
            },
            {
                "name": "Info",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/shared/info.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{}"
            },
            {
                "name": "InfoDialo",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/shared/info-dialog.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{}"
            },
            {
                "name": "journeyCorrect",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/monthly-report/journey-check.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    monthlyReport\n  },\n  parameters: {\n    design: {\n      type: 'figma',\n      url: 'https://www.figma.com/file/LKQ4FJ4bTnCSjedbRpk931/Sample-File',\n    },\n  },\n}"
            },
            {
                "name": "journeyError",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/monthly-report/journey-check.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    monthlyReport: {\n      ...monthlyReport,\n      journeyWarnings: [{warnings: ['Error'], date: '2023-09-08'}]\n    }\n  }\n}"
            },
            {
                "name": "Login",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/shared/login.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{}"
            },
            {
                "name": "loginGuard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/domains/shared/util-guard/login/login.guard.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "CanActivateFn",
                "defaultValue": "(route, state): boolean => {\n  const router = inject(Router);\n  const userService = inject(UserService);\n\n  if (userService.loggedInWithGoogle() && userService.user.value) {\n    return true;\n  } else {\n    userService.setStartpageOverride(state.url);\n    router.navigate([configuration.PAGE_URLS.LOGIN]);\n    return false;\n  }\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/monthly-report/employee-check-confirm-comment-dialog.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<EmployeeCheckConfirmCommentDialogComponent>",
                "defaultValue": "{\n  component: EmployeeCheckConfirmCommentDialogComponent\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/monthly-report/employee-check.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<EmployeeCheckComponent>",
                "defaultValue": "{\n  component: EmployeeCheckComponent,\n  decorators: [\n    applicationConfig({\n      providers: [provideHttpClient()]\n    })\n  ],\n  argTypes: {\n    monthlyReport: {\n      control: 'object'\n    }\n  }\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/monthly-report/general-info.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<GeneralInfoComponent>",
                "defaultValue": "{\n  component: GeneralInfoComponent,\n  decorators: [\n    applicationConfig({\n      providers: [provideHttpClient()]\n    })\n  ],\n  argTypes: {\n    monthlyReport: {\n      control: 'object'\n    }\n  }\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/monthly-report/information-top-bar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<InformationTopBarComponent>",
                "defaultValue": "{\n  component: InformationTopBarComponent,\n  decorators: [\n    applicationConfig({\n      providers: [provideHttpClient()]\n    })\n  ],\n  argTypes: {\n    monthlyReport: {\n      control: 'object'\n    }\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/monthly-report/journey-check.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<JourneyCheckComponent>",
                "defaultValue": "{\n  component: JourneyCheckComponent,\n  argTypes: {\n    monthlyReport: {\n      control: 'object'\n    }\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/monthly-report/time-check.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<TimeCheckComponent>",
                "defaultValue": "{\n  component: TimeCheckComponent,\n  argTypes: {\n    monthlyReport: {\n      control: 'object'\n    }\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/office-management/employee-card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<EmployeeCardComponent>",
                "defaultValue": "{\n  component: EmployeeCardComponent,\n  decorators: [\n    applicationConfig({\n      providers: [provideHttpClient(), importProvidersFrom(MatSnackBarModule)]\n    })\n  ],\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/office-management/enterprise-card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<EnterpriseCardComponent>",
                "defaultValue": "{\n  component: EnterpriseCardComponent,\n  decorators: [\n    applicationConfig({\n      providers: [provideHttpClient()]\n    })\n  ],\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/office-management/project-overview-card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<ProjectOverviewCardComponent>",
                "defaultValue": "{\n  component: ProjectOverviewCardComponent,\n  decorators: [\n    applicationConfig({\n      providers: [provideHttpClient(), importProvidersFrom(MatSnackBarModule), importProvidersFrom(TranslateModule.forRoot())]\n    })\n  ],\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/office-management/projects-without-leads-card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<ProjectsWithoutLeadsCardComponent>",
                "defaultValue": "{\n  component: ProjectsWithoutLeadsCardComponent,\n  decorators: [\n    applicationConfig({\n      providers: [provideHttpClient()]\n    })\n  ],\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/office-management/projekt-name-with-zep-link.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<ProjektNameWithZepLinkComponent>",
                "defaultValue": "{\n  component: ProjektNameWithZepLinkComponent,\n  decorators: [\n    applicationConfig({\n      providers: [provideHttpClient()]\n    })\n  ],\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/project-management/billable-times-fraction.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<BillableTimesFractionComponent>",
                "defaultValue": "{\n  component: BillableTimesFractionComponent,\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/project-management/billable-times.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<BillableTimesComponent>",
                "defaultValue": "{\n  component: BillableTimesComponent,\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/shared/comments-for-employee.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<CommentsForEmployeeComponent>",
                "defaultValue": "{\n  component: CommentsForEmployeeComponent,\n  decorators: [\n    applicationConfig({\n      providers: [provideHttpClient(), importProvidersFrom(OAuthModule.forRoot())]\n    })\n  ],\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/shared/confirm-dialog.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<ConfirmDialogComponent>",
                "defaultValue": "{\n  component: ConfirmDialogComponent,\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/shared/datepicker-month-year.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<DatepickerMonthYearComponent>",
                "defaultValue": "{\n  component: DatepickerMonthYearComponent,\n  argTypes: {\n    maxDate: {control: 'date'},\n    maxMonth: {control: 'number'}\n  }\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/shared/datepicker.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<DatepickerComponent>",
                "defaultValue": "{\n  component: DatepickerComponent,\n  argTypes: {\n    selectedDate: {\n      control: 'date'\n    }\n  }\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/shared/done-comments-indicator.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<DoneCommentsIndicatorComponent>",
                "defaultValue": "{\n  component: DoneCommentsIndicatorComponent,\n  argTypes: {\n    totalComments: {\n      control: 'number'\n    },\n    finishedComments: {\n      control: 'number'\n    }\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/shared/error.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<ErrorComponent>",
                "defaultValue": "{\n  component: ErrorComponent,\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/shared/header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<HeaderComponent>",
                "defaultValue": "{\n  component: HeaderComponent,\n  decorators: [\n    applicationConfig({\n      providers: [provideHttpClient(), importProvidersFrom(OAuthModule.forRoot())]\n    })\n  ],\n  parameters: {\n    msw: [\n      rest.get('http://localhost:6006/config', (req, res, context) => {\n        return res(\n          context.json({\n            clientId: 'test-client-id',\n            issuer: 'test-issuer',\n            scope: 'test-scope',\n            version: '12.0.0.1.1',\n            budgetCalculationExcelUrl: 'https://google.com',\n            zepOrigin: 'https://google.com',\n          })\n        );\n      })\n    ]\n  }\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/shared/info-dialog.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<InfoDialogComponent>",
                "defaultValue": "{\n  component: InfoDialogComponent,\n  decorators: [\n    applicationConfig({\n      providers: [provideHttpClient()]\n    })\n  ],\n  parameters: {\n    msw: [\n      rest.get('http://localhost:6006/info', (req, res, context) => {\n        return res(\n          context.json({\n            branch: 'storybook-branch',\n            buildDate: '2022-01-01',\n            buildNumber: 12,\n            commit: 'axa123dasdf',\n            startedAt: '2022-01-01',\n            upTime: '25',\n            version: '12.0.01',\n          })\n        );\n      })\n    ]\n  }\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/shared/info.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<InfoComponent>",
                "defaultValue": "{\n  component: InfoComponent,\n  decorators: [\n    applicationConfig({\n      providers: [provideHttpClient()]\n    })\n  ],\n  parameters: {\n    msw: [\n      rest.get('http://localhost:6006/info', (req, res, context) => {\n        return res(\n          context.json({\n            branch: 'storybook-branch',\n            buildDate: '2022-01-01',\n            buildNumber: 12,\n            commit: 'axa123dasdf',\n            startedAt: '2022-01-01',\n            upTime: '25',\n            version: '12.0.01',\n          })\n        );\n      })\n    ]\n  }\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/shared/inline-text-editor.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<InlineTextEditorComponent>",
                "defaultValue": "{\n  component: InlineTextEditorComponent,\n  argTypes: {\n    comment: {\n      control: 'string'\n    }\n  }\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/shared/login.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<LoginComponent>",
                "defaultValue": "{\n  component: LoginComponent,\n  decorators: [\n    applicationConfig({\n      providers: [provideHttpClient(), importProvidersFrom(OAuthModule.forRoot())]\n    })\n  ]\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/shared/pm-progress.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<PmProgressComponent>",
                "defaultValue": "{\n  component: PmProgressComponent\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/shared/project-state-select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<ProjectStateSelectComponent>",
                "defaultValue": "{\n  component: ProjectStateSelectComponent,\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/shared/state-indicator.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<StateIndicatorComponent>",
                "defaultValue": "{\n  component: StateIndicatorComponent\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/shared/state-select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<StateSelectComponent>",
                "defaultValue": "{\n  component: StateSelectComponent,\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/shared/user-actions.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<UserActionsComponent>",
                "defaultValue": "{\n  component: UserActionsComponent,\n  decorators: [\n    applicationConfig({\n      providers: [provideHttpClient(), provideAnimations()]\n    })\n  ],\n  argTypes: {\n    user: {\n      control: 'object'\n    }\n  }\n}"
            },
            {
                "name": "moment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/domains/office-management/feature-office-management/feature-office-management.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "_moment"
            },
            {
                "name": "moment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/domains/project-management/feature-project-management/feature-project-management.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "_moment"
            },
            {
                "name": "moment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/domains/shared/util-common/dateUtils.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "_moment"
            },
            {
                "name": "moment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/domains/monthly-report/data-service/monthly-report/monthly-report.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "_moment"
            },
            {
                "name": "moment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/domains/monthly-report/feature-monthly-report/information-top-bar/information-top-bar.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "_moment"
            },
            {
                "name": "moment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/domains/office-management/data-service/office-management/office-management.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "_moment"
            },
            {
                "name": "moment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/domains/office-management/feature-office-management/employee-card/employee-card.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "_moment"
            },
            {
                "name": "moment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/domains/office-management/feature-office-management/enterprise-card/enterprise-card.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "_moment"
            },
            {
                "name": "moment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/domains/office-management/feature-office-management/project-overview-card/project-overview-card.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "_moment"
            },
            {
                "name": "moment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/domains/project-management/data-service/project-management/project-management.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "_moment"
            },
            {
                "name": "moment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/domains/shared/ui-common/datepicker/datepicker.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "_moment"
            },
            {
                "name": "moment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/domains/shared/ui-common/datepicker-month-year/datepicker-month-year.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "_moment"
            },
            {
                "name": "monthlyReport",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/monthly-report/monthly-reports-args.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MonthlyReport",
                "defaultValue": "{\n  employee: {\n    userId: '066-mleitner',\n    email: 'michael.leitner@gepardec.com',\n    title: null,\n    firstname: 'Michael',\n    lastname: 'Leitner',\n    salutation: null,\n    releaseDate: '2022-06-30',\n    workDescription: '07',\n    // language: 'de',\n    // regularWorkingHours: {WEDNESDAY: 8, TUESDAY: 8, THURSDAY: 8, MONDAY: 0, FRIDAY: 6.5},\n    active: true,\n    // exitDate: null\n  },\n  initialDate: null,\n  timeWarnings: [{date: '2023-09-14', description: ['Du hast keine Zeit-Buchung vorgenommen!']}, {\n    date: '2023-09-20',\n    description: ['Du hast keine Zeit-Buchung vorgenommen!']\n  }, {date: '2023-09-01', description: ['Du hast keine Zeit-Buchung vorgenommen!']}, {\n    date: '2023-09-08',\n    description: ['Du hast keine Zeit-Buchung vorgenommen!']\n  }, {date: '2023-09-29', description: ['Du hast keine Zeit-Buchung vorgenommen!']}, {\n    date: '2023-09-13',\n    description: ['Du hast keine Zeit-Buchung vorgenommen!']\n  }, {date: '2023-09-05', description: ['Du hast keine Zeit-Buchung vorgenommen!']}],\n  journeyWarnings: [],\n  comments: [],\n  employeeCheckState: 'OPEN',\n  employeeCheckStateReason: null,\n  internalCheckState: State.OPEN,\n  // isAssigned: false,\n  employeeProgresses: [],\n  otherChecksDone: true,\n  vacationDays: 0,\n  homeofficeDays: 0,\n  compensatoryDays: 0,\n  // nursingDays: 0,\n  // maternityLeaveDays: 0,\n  // externalTrainingDays: 0,\n  // conferenceDays: 0,\n  // maternityProtectionDays: 0,\n  // fatherMonthDays: 0,\n  // paidSpecialLeaveDays: 0,\n  // nonPaidVacationDays: 0,\n  vacationDayBalance: 6,\n  billableTime: '08:15',\n  totalWorkingTime: '08:15',\n  paidSickLeave: 0,\n  assigned: false\n}"
            },
            {
                "name": "monthlyReportArgs",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/monthly-report/time-check.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MonthlyReport",
                "defaultValue": "{\n  employee: {\n    userId: '066-mleitner',\n    email: 'michael.leitner@gepardec.com',\n    title: null,\n    firstname: 'Michael',\n    lastname: 'Leitner',\n    salutation: null,\n    releaseDate: '2022-06-30',\n    workDescription: '07',\n    // language: 'de',\n    // regularWorkingHours: {WEDNESDAY: 8, TUESDAY: 8, THURSDAY: 8, MONDAY: 0, FRIDAY: 6.5},\n    active: true,\n    // exitDate: null\n  },\n  initialDate: null,\n  timeWarnings: [{date: '2023-09-14', description: ['Du hast keine Zeit-Buchung vorgenommen!']}, {\n    date: '2023-09-20',\n    description: ['Du hast keine Zeit-Buchung vorgenommen!']\n  }, {date: '2023-09-01', description: ['Du hast keine Zeit-Buchung vorgenommen!']}, {\n    date: '2023-09-08',\n    description: ['Du hast keine Zeit-Buchung vorgenommen!']\n  }, {date: '2023-09-29', description: ['Du hast keine Zeit-Buchung vorgenommen!']}, {\n    date: '2023-09-13',\n    description: ['Du hast keine Zeit-Buchung vorgenommen!']\n  }, {date: '2023-09-05', description: ['Du hast keine Zeit-Buchung vorgenommen!']}],\n  journeyWarnings: [],\n  comments: [],\n  employeeCheckState: 'OPEN',\n  employeeCheckStateReason: null,\n  internalCheckState: State.OPEN,\n  // isAssigned: false,\n  employeeProgresses: [],\n  otherChecksDone: true,\n  vacationDays: 0,\n  homeofficeDays: 0,\n  compensatoryDays: 0,\n  // nursingDays: 0,\n  // maternityLeaveDays: 0,\n  // externalTrainingDays: 0,\n  // conferenceDays: 0,\n  // maternityProtectionDays: 0,\n  // fatherMonthDays: 0,\n  // paidSpecialLeaveDays: 0,\n  // nonPaidVacationDays: 0,\n  vacationDayBalance: 6,\n  billableTime: '08:15',\n  totalWorkingTime: '08:15',\n  paidSickLeave: 0,\n  assigned: false\n}"
            },
            {
                "name": "MY_FORMATS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/domains/shared/ui-common/datepicker-month-year/datepicker-month-year.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  parse: {\n    dateInput: 'YYYY-MM',\n  },\n  display: {\n    dateInput: 'MMMM YYYY',\n    monthYearLabel: 'MMM YYYY',\n    dateA11yLabel: 'LL',\n    monthYearA11yLabel: 'MMMM YYYY',\n  },\n}"
            },
            {
                "name": "NotAvailable",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/monthly-report/employee-check.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  parameters: {\n    design: {\n      type: 'figma',\n      url: 'https://www.figma.com/file/LKQ4FJ4bTnCSjedbRpk931/Sample-File',\n    },\n  },\n  args: {\n    monthlyReport\n  }\n}"
            },
            {
                "name": "omEntries",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/office-management/office-management-args.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Array<ManagementEntry>",
                "defaultValue": "[\n  {\n    billableTime: '10',\n    employee: {\n      userId: '1',\n      firstname: 'Max',\n      lastname: 'Muster',\n      email: 'max@muster',\n      title: 'Supermax',\n      releaseDate: '2022-04-01',\n      workDescription: 'Super max',\n      salutation: 'salutation',\n      active: true\n    },\n    employeeCheckState: State.IN_PROGRESS,\n    employeeCheckStateReason: 'Some Reason',\n    employeeProgresses: [{\n      assigneeEmail: 'max@mustermann',\n      firstname: 'Max',\n      lastname: 'Mustermann',\n      project: 'Testproject',\n      state: State.IN_PROGRESS,\n      stepId: 0\n    }],\n    entryDate: '2023-05-05',\n    finishedComments: 2,\n    internalCheckState: State.IN_PROGRESS,\n    nonBillableTime: '10',\n    projectCheckState: State.IN_PROGRESS,\n    totalComments: 5\n  }\n]"
            },
            {
                "name": "Open",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/shared/pm-progress.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    pmProgresses: [{\n      firstname: 'max',\n      lastname: 'mustermann',\n      state: State.DONE,\n      project: 'amazing-project',\n      stepId: 12,\n      assigneeEmail: 'max@mustermann'\n    }],\n    internalCheckState: State.OPEN,\n    displayedEmployees: []\n  }\n}"
            },
            {
                "name": "OPEN",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/shared/state-indicator.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    state: State.OPEN,\n    size: 'small'\n  }\n}"
            },
            {
                "name": "pmEntries",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/office-management/office-management-args.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Array<ProjectManagementEntry>",
                "defaultValue": "[\n  {\n    aggregatedBillableWorkTimeInSeconds: 7200,\n    aggregatedNonBillableWorkTimeInSeconds: 3600,\n    controlBillingState: ProjectState.WORK_IN_PROGRESS,\n    controlProjectState: ProjectState.WORK_IN_PROGRESS,\n    entries: omEntries,\n    presetControlBillingState: true,\n    presetControlProjectState: true,\n    projectComment: {comment: 'thisIsAComment', date: '2022-01-01', id: 1, projectName: 'sampleProject'},\n    projectName: 'sampleProject',\n    zepId: 2\n  }\n]"
            },
            {
                "name": "pmProgress",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/shared/pm-progress.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{}"
            },
            {
                "name": "preview",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": ".storybook/preview.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Preview",
                "defaultValue": "{\n  parameters: {\n    actions: {argTypesRegex: '^on[A-Z].*'},\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/i,\n      },\n    },\n  },\n  decorators: [\n    moduleMetadata({\n      imports: [StorybookMinimalSetupModule],\n    }),\n  ],\n  loaders: [mswLoader]\n}"
            },
            {
                "name": "projectsWithoutLeads",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/office-management/office-management-args.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Array<CustomerProjectWithoutLeads>",
                "defaultValue": "[{\n  comment: 'this is a comment',\n  fetchDate: '2023-05-03',\n  projectName: 'sampleProject',\n  zepId: 2\n}]"
            },
            {
                "name": "rolesGuard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/domains/shared/util-guard/roles/roles.guard.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "CanActivateFn",
                "defaultValue": "(route): boolean => {\n  return inject(RolesService).isAllowed(route.routeConfig.path);\n}"
            },
            {
                "name": "timeError",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/monthly-report/time-check.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    monthlyReport: {\n      ...monthlyReportArgs,\n    }\n  }\n}"
            },
            {
                "name": "timeSucess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/monthly-report/time-check.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    monthlyReport: {\n      ...monthlyReportArgs,\n      timeWarnings: []\n    }\n  }\n}"
            },
            {
                "name": "todoProjectStates",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/domains/project-management/util/project-management-comparator.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[ProjectState.OPEN, ProjectState.WORK_IN_PROGRESS]"
            },
            {
                "name": "TopBar",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/monthly-report/information-top-bar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    monthlyReport\n  }\n}"
            },
            {
                "name": "user",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/shared/user-actions.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "User",
                "defaultValue": "{\n  email: 'max@mustermann', firstname: 'max', lastname: 'mustermann', roles: [Role.EMPLOYEE], userId: '10'\n\n}"
            },
            {
                "name": "UserActions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/shared/user-actions.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    user: {\n      ...user,\n    }\n  }\n}"
            }
        ],
        "functions": [
            {
                "name": "authConfigFactory",
                "file": "src/app/domains/shared/util-auth/auth.config.factory.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "configService",
                        "type": "ConfigService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "OAuthModuleConfig",
                "jsdoctags": [
                    {
                        "name": "configService",
                        "type": "ConfigService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "booleanCompare",
                "file": "src/app/domains/shared/util-common/compareUtils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "a",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "b",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "a",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "b",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "click",
                "file": "src/app/domains/shared/util-testing/click-simulator.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "el",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "eventObj",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "ButtonClickEvents.left"
                    }
                ],
                "returnType": "void",
                "jsdoctags": [
                    {
                        "name": "el",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "eventObj",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "ButtonClickEvents.left",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "comparePmEntriesFn",
                "file": "src/app/domains/project-management/util/project-management-comparator.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Die Projekte sollen wie folgt sortiert werden:\nProjekte, bei denen etwas zutun ist, sollen vor projekte, bei denen nichts zutun ist, sein, sprich &quot;TodoProject&quot; &gt; &quot;Project&quot;\nEin Project ist ein &quot;TodoProject&quot;, sobald eines der folgenden Kriterien zutrifft:\n    - Mitarbeiter Überprüfung nicht fertig\n    - Projectcontrolling Status ist &#39;Offen&#39; oder &#39;In Arbeit&#39;\n    - Projectbilling Status ist &#39;Offen&#39; oder &#39;In Arbeit&#39;\nDanach soll erst nach den Projektnamen alphabetisch aufsteigend sortiert werden (AAA vor BBB)</p>\n<p>!!! AUFRUFER MUSS SORT().REVERSE aufrufen, weil javascript standardmäßig asc sortiert und hier die logik quasi invertiert ist !!!</p>\n",
                "args": [
                    {
                        "name": "a",
                        "type": "ProjectManagementEntryViewModel",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "b",
                        "type": "ProjectManagementEntryViewModel",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "a",
                        "type": "ProjectManagementEntryViewModel",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "b",
                        "type": "ProjectManagementEntryViewModel",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "convertMomentToString",
                "file": "src/app/domains/shared/util-common/dateUtils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "date",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "date",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "httpTranslateLoader",
                "file": "src/app/app.config.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "isTodoProject",
                "file": "src/app/domains/project-management/util/project-management-comparator.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "project",
                        "type": "ProjectManagementEntryViewModel",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "project",
                        "type": "ProjectManagementEntryViewModel",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "stringCompare",
                "file": "src/app/domains/shared/util-common/compareUtils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "a",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "b",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "a",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "b",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "toMonthStr",
                "file": "src/app/domains/shared/util-common/dateUtils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "month",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "locale",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "string",
                "jsdoctags": [
                    {
                        "name": "month",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "locale",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "toMonthYearString",
                "file": "src/app/domains/shared/util-common/dateUtils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>month 1, year 2023 results to [month-name by locale settings] 2023\ne.g. Jänner 2023 in &#39;de-At&#39;</p>\n",
                "args": [
                    {
                        "name": "year",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "month",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "locale",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "year",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "month",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "locale",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "ProjectStepQualifier",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"CONTROL_PROJECT\" | \"CONTROL_BILLING\" | \"CREATE_COMPANY_CONTROLLING\"",
                "file": "src/app/domains/shared/data-model/ProjectEntry.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "SnackbarConfig",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/domains/shared/data-service/snackbar/snackbar.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<EmployeeCheckConfirmCommentDialogComponent>",
                "file": "src/stories/monthly-report/employee-check-confirm-comment-dialog.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<EmployeeCheckComponent>",
                "file": "src/stories/monthly-report/employee-check.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<GeneralInfoComponent>",
                "file": "src/stories/monthly-report/general-info.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<InformationTopBarComponent>",
                "file": "src/stories/monthly-report/information-top-bar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<JourneyCheckComponent>",
                "file": "src/stories/monthly-report/journey-check.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<TimeCheckComponent>",
                "file": "src/stories/monthly-report/time-check.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<EmployeeCardComponent>",
                "file": "src/stories/office-management/employee-card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<EnterpriseCardComponent>",
                "file": "src/stories/office-management/enterprise-card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<ProjectOverviewCardComponent>",
                "file": "src/stories/office-management/project-overview-card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<ProjectsWithoutLeadsCardComponent>",
                "file": "src/stories/office-management/projects-without-leads-card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<ProjektNameWithZepLinkComponent>",
                "file": "src/stories/office-management/projekt-name-with-zep-link.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<BillableTimesFractionComponent>",
                "file": "src/stories/project-management/billable-times-fraction.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<BillableTimesComponent>",
                "file": "src/stories/project-management/billable-times.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<CommentsForEmployeeComponent>",
                "file": "src/stories/shared/comments-for-employee.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<DatepickerMonthYearComponent>",
                "file": "src/stories/shared/datepicker-month-year.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<DatepickerComponent>",
                "file": "src/stories/shared/datepicker.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<DoneCommentsIndicatorComponent>",
                "file": "src/stories/shared/done-comments-indicator.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<ErrorComponent>",
                "file": "src/stories/shared/error.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<HeaderComponent>",
                "file": "src/stories/shared/header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<InfoDialogComponent>",
                "file": "src/stories/shared/info-dialog.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<InfoComponent>",
                "file": "src/stories/shared/info.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<InlineTextEditorComponent>",
                "file": "src/stories/shared/inline-text-editor.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<LoginComponent>",
                "file": "src/stories/shared/login.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<PmProgressComponent>",
                "file": "src/stories/shared/pm-progress.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<ProjectStateSelectComponent>",
                "file": "src/stories/shared/project-state-select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<StateIndicatorComponent>",
                "file": "src/stories/shared/state-indicator.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<StateSelectComponent>",
                "file": "src/stories/shared/state-select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<UserActionsComponent>",
                "file": "src/stories/shared/user-actions.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            }
        ],
        "enumerations": [
            {
                "name": "EmployeeCheckConfirmDialogActionType",
                "childs": [
                    {
                        "name": "SAVE",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "CANCEL",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/domains/monthly-report/feature-monthly-report/employee-check-confirm-comment-dialog/model/EmployeeCheckConfirmDialogAction.ts"
            },
            {
                "name": "EnterpriseStep",
                "childs": [
                    {
                        "name": "ZEP_TIMES_RELEASED",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "zepTimesReleased"
                    },
                    {
                        "name": "CHARGEABILITY_EXTERNAL_EMPLOYEES_RECORDED",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "chargeabilityExternalEmployeesRecorded"
                    },
                    {
                        "name": "PAYROLL_ACCOUNTING_SENT",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "payrollAccountingSent"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/domains/office-management/data-model/EnterpriseStep.ts"
            },
            {
                "name": "ProjectState",
                "childs": [
                    {
                        "name": "OPEN",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "OPEN"
                    },
                    {
                        "name": "WORK_IN_PROGRESS",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "WORK_IN_PROGRESS"
                    },
                    {
                        "name": "DONE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "DONE"
                    },
                    {
                        "name": "NOT_RELEVANT",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "NOT_RELEVANT"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/domains/shared/data-model/ProjectState.ts"
            },
            {
                "name": "Role",
                "childs": [
                    {
                        "name": "EMPLOYEE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "EMPLOYEE"
                    },
                    {
                        "name": "OFFICE_MANAGEMENT",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "OFFICE_MANAGEMENT"
                    },
                    {
                        "name": "PROJECT_LEAD",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "PROJECT_LEAD"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/domains/shared/data-model/Role.ts"
            },
            {
                "name": "State",
                "childs": [
                    {
                        "name": "OPEN",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "OPEN"
                    },
                    {
                        "name": "DONE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "DONE"
                    },
                    {
                        "name": "IN_PROGRESS",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "IN_PROGRESS"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/domains/shared/data-model/State.ts"
            },
            {
                "name": "Step",
                "childs": [
                    {
                        "name": "CONTROL_TIMES",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 1
                    },
                    {
                        "name": "CONTROL_INTERNAL_TIMES",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 2
                    },
                    {
                        "name": "CONTROL_TIME_EVIDENCES",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 3
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/domains/shared/data-model/Step.ts"
            }
        ],
        "groupedVariables": {
            "src/stories/monthly-report/employee-check.stories.ts": [
                {
                    "name": "AllDone",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/monthly-report/employee-check.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    monthlyReport: {\n      ...monthlyReport,\n      employeeCheckState: 'DONE',\n      internalCheckState: State.DONE\n    }\n  }\n}"
                },
                {
                    "name": "AllError",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/monthly-report/employee-check.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    monthlyReport: {\n      ...monthlyReport,\n      assigned: true,\n      employeeCheckState: 'OPEN'\n    }\n  }\n}"
                },
                {
                    "name": "Error",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/monthly-report/employee-check.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    monthlyReport: {\n      ...monthlyReport,\n      assigned: true\n    }\n  }\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/monthly-report/employee-check.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<EmployeeCheckComponent>",
                    "defaultValue": "{\n  component: EmployeeCheckComponent,\n  decorators: [\n    applicationConfig({\n      providers: [provideHttpClient()]\n    })\n  ],\n  argTypes: {\n    monthlyReport: {\n      control: 'object'\n    }\n  }\n}"
                },
                {
                    "name": "NotAvailable",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/monthly-report/employee-check.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  parameters: {\n    design: {\n      type: 'figma',\n      url: 'https://www.figma.com/file/LKQ4FJ4bTnCSjedbRpk931/Sample-File',\n    },\n  },\n  args: {\n    monthlyReport\n  }\n}"
                }
            ],
            "src/app/app.config.ts": [
                {
                    "name": "appConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationConfig",
                    "defaultValue": "{\n  providers: [\n    importProvidersFrom(\n      BrowserModule,\n      MatMomentDateModule,\n      MatSnackBarModule,\n      NgxSkeletonLoaderModule,\n      MatDialogModule,\n      OAuthModule.forRoot(),\n      TranslateModule.forRoot({\n          loader: {\n            provide: TranslateLoader,\n            useFactory: httpTranslateLoader,\n            deps: [HttpClient]\n          }\n        }\n      )\n    ),\n    {provide: LOCALE_ID, useValue: 'de-AT'},\n    {provide: APP_BASE_HREF, useValue: '/'},\n    {provide: ErrorHandler, useClass: ErrorHandlerService},\n    {provide: OAuthModuleConfig, useFactory: authConfigFactory, deps: [ConfigService]},\n    provideHttpClient(withInterceptorsFromDi()),\n    provideAnimations(),\n    provideRouter(routes)\n  ]\n}"
                }
            ],
            "src/app/domains/shared/util-auth/auth.config.ts": [
                {
                    "name": "authConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/domains/shared/util-auth/auth.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AuthConfig",
                    "defaultValue": "{\n  redirectUri: window.location.origin,\n  strictDiscoveryDocumentValidation: false,\n  showDebugInformation: false,\n  sessionChecksEnabled: false,\n  responseType: 'code'\n}"
                },
                {
                    "name": "cypressAuthConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/domains/shared/util-auth/auth.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AuthConfig",
                    "defaultValue": "{\n  ...authConfig,\n  oidc: false\n}"
                }
            ],
            "src/app/domains/shared/util-testing/click-simulator.ts": [
                {
                    "name": "ButtonClickEvents",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/domains/shared/util-testing/click-simulator.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  left: {button: 0},\n  right: {button: 2}\n}"
                }
            ],
            "src/stories/shared/inline-text-editor.stories.ts": [
                {
                    "name": "Comment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/shared/inline-text-editor.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    comment: 'I am a comment :)'\n  }\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/shared/inline-text-editor.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<InlineTextEditorComponent>",
                    "defaultValue": "{\n  component: InlineTextEditorComponent,\n  argTypes: {\n    comment: {\n      control: 'string'\n    }\n  }\n}"
                }
            ],
            "src/stories/shared/comments-for-employee.stories.ts": [
                {
                    "name": "Comments",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/shared/comments-for-employee.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    comments: [{\n      authorEmail: 'max@mustermann',\n      authorName: 'Max Mustermann',\n      id: 1,\n      isEditing: false,\n      message: 'Ein Testkommentar',\n      state: 'DONE',\n      updateDate: '2023/05/03'\n    }],\n    employee: {\n      active: true,\n      email: 'max@muster',\n      firstname: 'Max',\n      lastname: 'Muster',\n      releaseDate: '2022-03-03',\n      salutation: 'salutation string',\n      title: 'Mr.',\n      userId: '3',\n      workDescription: 'super developer'\n    },\n    user: {\n      email: 'max@muster',\n      firstname: 'Maxi',\n      lastname: 'Musti',\n      roles: [Role.EMPLOYEE, Role.OFFICE_MANAGEMENT, Role.PROJECT_LEAD],\n      userId: '4'\n    }\n  }\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/shared/comments-for-employee.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<CommentsForEmployeeComponent>",
                    "defaultValue": "{\n  component: CommentsForEmployeeComponent,\n  decorators: [\n    applicationConfig({\n      providers: [provideHttpClient(), importProvidersFrom(OAuthModule.forRoot())]\n    })\n  ],\n}"
                }
            ],
            "src/app/domains/shared/util-constant/configuration.ts": [
                {
                    "name": "configuration",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/domains/shared/util-constant/configuration.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  PAGE_URLS: {\n    MONTHLY_REPORT: 'monthlyReport',\n    OFFICE_MANAGEMENT: 'officeManagement',\n    PROJECT_MANAGEMENT: 'projectManagement',\n    LOGIN: 'login',\n    ERROR: 'error'\n  },\n\n  OFFICE_MANAGEMENT_SEGMENT: `view/index.php?menu=MitarbeiterVerwaltungMgr&\n  modelContentMenu=true&mgr=MitarbeiterProjektzeitMgr&contentModelId=`,\n  PROJECT_MANAGEMENT_SEGMENT: `view/index.php?menu=ProjektVerwaltungMgr&modelContentMenu=true&contentModelId=`,\n\n  dateFormat: 'YYYY-MM-DD',\n  dateFormatNg: 'yyyy-MM-dd',\n\n  LogLevel: {\n    All: 0,\n    Debug: 1,\n    Info: 2,\n    Warn: 3,\n    Error: 4,\n    Fatal: 5,\n    Off: 6\n  },\n\n  logWithDate: true,\n\n  snackbar: {\n    horizontalPosition: 'center',\n    verticalPosition: 'top',\n    duration: 5000\n  }\n}"
                }
            ],
            "src/stories/monthly-report/employee-check-confirm-comment-dialog.stories.ts": [
                {
                    "name": "ConfirmDialog",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/monthly-report/employee-check-confirm-comment-dialog.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/monthly-report/employee-check-confirm-comment-dialog.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<EmployeeCheckConfirmCommentDialogComponent>",
                    "defaultValue": "{\n  component: EmployeeCheckConfirmCommentDialogComponent\n}"
                }
            ],
            "src/stories/shared/confirm-dialog.stories.ts": [
                {
                    "name": "ConfirmDialog",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/shared/confirm-dialog.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryObj<ConfirmDialogComponent>",
                    "defaultValue": "{}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/shared/confirm-dialog.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<ConfirmDialogComponent>",
                    "defaultValue": "{\n  component: ConfirmDialogComponent,\n}"
                }
            ],
            "src/stories/office-management/employee-card.stories.ts": [
                {
                    "name": "DemoStory",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/office-management/employee-card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    omEntries,\n    filteredOmEntries: omEntries\n  }\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/office-management/employee-card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<EmployeeCardComponent>",
                    "defaultValue": "{\n  component: EmployeeCardComponent,\n  decorators: [\n    applicationConfig({\n      providers: [provideHttpClient(), importProvidersFrom(MatSnackBarModule)]\n    })\n  ],\n}"
                }
            ],
            "src/stories/office-management/enterprise-card.stories.ts": [
                {
                    "name": "DemoStory",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/office-management/enterprise-card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    enterpriseEntry\n  }\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/office-management/enterprise-card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<EnterpriseCardComponent>",
                    "defaultValue": "{\n  component: EnterpriseCardComponent,\n  decorators: [\n    applicationConfig({\n      providers: [provideHttpClient()]\n    })\n  ],\n}"
                }
            ],
            "src/stories/office-management/project-overview-card.stories.ts": [
                {
                    "name": "DemoStory",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/office-management/project-overview-card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    pmEntries\n  }\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/office-management/project-overview-card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<ProjectOverviewCardComponent>",
                    "defaultValue": "{\n  component: ProjectOverviewCardComponent,\n  decorators: [\n    applicationConfig({\n      providers: [provideHttpClient(), importProvidersFrom(MatSnackBarModule), importProvidersFrom(TranslateModule.forRoot())]\n    })\n  ],\n}"
                }
            ],
            "src/stories/office-management/projects-without-leads-card.stories.ts": [
                {
                    "name": "DemoStory",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/office-management/projects-without-leads-card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    projectsWithoutLeads\n  }\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/office-management/projects-without-leads-card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<ProjectsWithoutLeadsCardComponent>",
                    "defaultValue": "{\n  component: ProjectsWithoutLeadsCardComponent,\n  decorators: [\n    applicationConfig({\n      providers: [provideHttpClient()]\n    })\n  ],\n}"
                }
            ],
            "src/stories/office-management/projekt-name-with-zep-link.stories.ts": [
                {
                    "name": "DemoStory",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/office-management/projekt-name-with-zep-link.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    projectManagementUrl: 'https://sample.com',\n    projectName: 'sampleName'\n  }\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/office-management/projekt-name-with-zep-link.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<ProjektNameWithZepLinkComponent>",
                    "defaultValue": "{\n  component: ProjektNameWithZepLinkComponent,\n  decorators: [\n    applicationConfig({\n      providers: [provideHttpClient()]\n    })\n  ],\n}"
                }
            ],
            "src/stories/project-management/billable-times-fraction.stories.ts": [
                {
                    "name": "DemoStory",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/project-management/billable-times-fraction.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    billableTimes: 10,\n    nonBillableTimes: 20\n  }\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/project-management/billable-times-fraction.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<BillableTimesFractionComponent>",
                    "defaultValue": "{\n  component: BillableTimesFractionComponent,\n}"
                }
            ],
            "src/stories/project-management/billable-times.stories.ts": [
                {
                    "name": "DemoStory",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/project-management/billable-times.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    billableTimes: '10',\n    nonBillableTimes: '20'\n  }\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/project-management/billable-times.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<BillableTimesComponent>",
                    "defaultValue": "{\n  component: BillableTimesComponent,\n}"
                }
            ],
            "src/stories/shared/datepicker-month-year.stories.ts": [
                {
                    "name": "DemoStory",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/shared/datepicker-month-year.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    maxDate: '2022-06-05',\n    maxMonth: 10\n  }\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/shared/datepicker-month-year.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<DatepickerMonthYearComponent>",
                    "defaultValue": "{\n  component: DatepickerMonthYearComponent,\n  argTypes: {\n    maxDate: {control: 'date'},\n    maxMonth: {control: 'number'}\n  }\n}"
                }
            ],
            "src/stories/shared/datepicker.stories.ts": [
                {
                    "name": "DemoStory",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/shared/datepicker.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    selectedDate: '2023-09-05'\n  }\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/shared/datepicker.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<DatepickerComponent>",
                    "defaultValue": "{\n  component: DatepickerComponent,\n  argTypes: {\n    selectedDate: {\n      control: 'date'\n    }\n  }\n}"
                }
            ],
            "src/stories/shared/done-comments-indicator.stories.ts": [
                {
                    "name": "DemoStory",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/shared/done-comments-indicator.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    totalComments: 10,\n    finishedComments: 10\n  }\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/shared/done-comments-indicator.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<DoneCommentsIndicatorComponent>",
                    "defaultValue": "{\n  component: DoneCommentsIndicatorComponent,\n  argTypes: {\n    totalComments: {\n      control: 'number'\n    },\n    finishedComments: {\n      control: 'number'\n    }\n  },\n}"
                }
            ],
            "src/stories/shared/pm-progress.stories.ts": [
                {
                    "name": "Done",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/shared/pm-progress.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    pmProgresses: [{\n      firstname: 'max',\n      lastname: 'mustermann',\n      state: State.DONE,\n      project: 'amazing-project',\n      stepId: 12,\n      assigneeEmail: 'max@mustermann'\n    }],\n    internalCheckState: State.DONE,\n    displayedEmployees: []\n  }\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/shared/pm-progress.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<PmProgressComponent>",
                    "defaultValue": "{\n  component: PmProgressComponent\n}"
                },
                {
                    "name": "Open",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/shared/pm-progress.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    pmProgresses: [{\n      firstname: 'max',\n      lastname: 'mustermann',\n      state: State.DONE,\n      project: 'amazing-project',\n      stepId: 12,\n      assigneeEmail: 'max@mustermann'\n    }],\n    internalCheckState: State.OPEN,\n    displayedEmployees: []\n  }\n}"
                },
                {
                    "name": "pmProgress",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/shared/pm-progress.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{}"
                }
            ],
            "src/stories/shared/project-state-select.stories.ts": [
                {
                    "name": "Done",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/shared/project-state-select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    value: ProjectState.DONE\n  }\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/shared/project-state-select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<ProjectStateSelectComponent>",
                    "defaultValue": "{\n  component: ProjectStateSelectComponent,\n}"
                }
            ],
            "src/stories/shared/state-select.stories.ts": [
                {
                    "name": "Done",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/shared/state-select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    value: State.DONE\n  }\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/shared/state-select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<StateSelectComponent>",
                    "defaultValue": "{\n  component: StateSelectComponent,\n}"
                }
            ],
            "src/stories/shared/state-indicator.stories.ts": [
                {
                    "name": "DONE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/shared/state-indicator.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    state: State.DONE,\n    size: 'large'\n  }\n}"
                },
                {
                    "name": "IN_PROGRESS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/shared/state-indicator.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    state: State.IN_PROGRESS,\n    size: 'medium'\n  }\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/shared/state-indicator.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<StateIndicatorComponent>",
                    "defaultValue": "{\n  component: StateIndicatorComponent\n}"
                },
                {
                    "name": "OPEN",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/shared/state-indicator.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    state: State.OPEN,\n    size: 'small'\n  }\n}"
                }
            ],
            "src/stories/office-management/office-management-args.ts": [
                {
                    "name": "enterpriseEntry",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/office-management/office-management-args.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EnterpriseEntry",
                    "defaultValue": "{\n  chargeabilityExternalEmployeesRecorded: ProjectState.WORK_IN_PROGRESS,\n  currentMonthYear: '10',\n  payrollAccountingSent: ProjectState.WORK_IN_PROGRESS,\n  zepTimesReleased: ProjectState.WORK_IN_PROGRESS\n}"
                },
                {
                    "name": "omEntries",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/office-management/office-management-args.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<ManagementEntry>",
                    "defaultValue": "[\n  {\n    billableTime: '10',\n    employee: {\n      userId: '1',\n      firstname: 'Max',\n      lastname: 'Muster',\n      email: 'max@muster',\n      title: 'Supermax',\n      releaseDate: '2022-04-01',\n      workDescription: 'Super max',\n      salutation: 'salutation',\n      active: true\n    },\n    employeeCheckState: State.IN_PROGRESS,\n    employeeCheckStateReason: 'Some Reason',\n    employeeProgresses: [{\n      assigneeEmail: 'max@mustermann',\n      firstname: 'Max',\n      lastname: 'Mustermann',\n      project: 'Testproject',\n      state: State.IN_PROGRESS,\n      stepId: 0\n    }],\n    entryDate: '2023-05-05',\n    finishedComments: 2,\n    internalCheckState: State.IN_PROGRESS,\n    nonBillableTime: '10',\n    projectCheckState: State.IN_PROGRESS,\n    totalComments: 5\n  }\n]"
                },
                {
                    "name": "pmEntries",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/office-management/office-management-args.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<ProjectManagementEntry>",
                    "defaultValue": "[\n  {\n    aggregatedBillableWorkTimeInSeconds: 7200,\n    aggregatedNonBillableWorkTimeInSeconds: 3600,\n    controlBillingState: ProjectState.WORK_IN_PROGRESS,\n    controlProjectState: ProjectState.WORK_IN_PROGRESS,\n    entries: omEntries,\n    presetControlBillingState: true,\n    presetControlProjectState: true,\n    projectComment: {comment: 'thisIsAComment', date: '2022-01-01', id: 1, projectName: 'sampleProject'},\n    projectName: 'sampleProject',\n    zepId: 2\n  }\n]"
                },
                {
                    "name": "projectsWithoutLeads",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/office-management/office-management-args.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<CustomerProjectWithoutLeads>",
                    "defaultValue": "[{\n  comment: 'this is a comment',\n  fetchDate: '2023-05-03',\n  projectName: 'sampleProject',\n  zepId: 2\n}]"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true,\n  // Base url\n  frontendOriginSegment: 'mega-frontend',\n  backendOriginSegment: 'mega-backend'\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n  // Base url\n  frontendOriginSegment: '4200',\n  backendOriginSegment: '8080'\n}"
                }
            ],
            "src/stories/shared/error.stories.ts": [
                {
                    "name": "Error",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/shared/error.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/shared/error.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<ErrorComponent>",
                    "defaultValue": "{\n  component: ErrorComponent,\n}"
                }
            ],
            "src/stories/monthly-report/general-info.stories.ts": [
                {
                    "name": "GeneralInfo",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/monthly-report/general-info.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    monthlyReport\n  }\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/monthly-report/general-info.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<GeneralInfoComponent>",
                    "defaultValue": "{\n  component: GeneralInfoComponent,\n  decorators: [\n    applicationConfig({\n      providers: [provideHttpClient()]\n    })\n  ],\n  argTypes: {\n    monthlyReport: {\n      control: 'object'\n    }\n  }\n}"
                }
            ],
            "src/stories/shared/header.stories.ts": [
                {
                    "name": "Header",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/shared/header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/shared/header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<HeaderComponent>",
                    "defaultValue": "{\n  component: HeaderComponent,\n  decorators: [\n    applicationConfig({\n      providers: [provideHttpClient(), importProvidersFrom(OAuthModule.forRoot())]\n    })\n  ],\n  parameters: {\n    msw: [\n      rest.get('http://localhost:6006/config', (req, res, context) => {\n        return res(\n          context.json({\n            clientId: 'test-client-id',\n            issuer: 'test-issuer',\n            scope: 'test-scope',\n            version: '12.0.0.1.1',\n            budgetCalculationExcelUrl: 'https://google.com',\n            zepOrigin: 'https://google.com',\n          })\n        );\n      })\n    ]\n  }\n}"
                }
            ],
            "src/stories/shared/info.stories.ts": [
                {
                    "name": "Info",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/shared/info.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/shared/info.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<InfoComponent>",
                    "defaultValue": "{\n  component: InfoComponent,\n  decorators: [\n    applicationConfig({\n      providers: [provideHttpClient()]\n    })\n  ],\n  parameters: {\n    msw: [\n      rest.get('http://localhost:6006/info', (req, res, context) => {\n        return res(\n          context.json({\n            branch: 'storybook-branch',\n            buildDate: '2022-01-01',\n            buildNumber: 12,\n            commit: 'axa123dasdf',\n            startedAt: '2022-01-01',\n            upTime: '25',\n            version: '12.0.01',\n          })\n        );\n      })\n    ]\n  }\n}"
                }
            ],
            "src/stories/shared/info-dialog.stories.ts": [
                {
                    "name": "InfoDialo",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/shared/info-dialog.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/shared/info-dialog.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<InfoDialogComponent>",
                    "defaultValue": "{\n  component: InfoDialogComponent,\n  decorators: [\n    applicationConfig({\n      providers: [provideHttpClient()]\n    })\n  ],\n  parameters: {\n    msw: [\n      rest.get('http://localhost:6006/info', (req, res, context) => {\n        return res(\n          context.json({\n            branch: 'storybook-branch',\n            buildDate: '2022-01-01',\n            buildNumber: 12,\n            commit: 'axa123dasdf',\n            startedAt: '2022-01-01',\n            upTime: '25',\n            version: '12.0.01',\n          })\n        );\n      })\n    ]\n  }\n}"
                }
            ],
            "src/stories/monthly-report/journey-check.stories.ts": [
                {
                    "name": "journeyCorrect",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/monthly-report/journey-check.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    monthlyReport\n  },\n  parameters: {\n    design: {\n      type: 'figma',\n      url: 'https://www.figma.com/file/LKQ4FJ4bTnCSjedbRpk931/Sample-File',\n    },\n  },\n}"
                },
                {
                    "name": "journeyError",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/monthly-report/journey-check.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    monthlyReport: {\n      ...monthlyReport,\n      journeyWarnings: [{warnings: ['Error'], date: '2023-09-08'}]\n    }\n  }\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/monthly-report/journey-check.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<JourneyCheckComponent>",
                    "defaultValue": "{\n  component: JourneyCheckComponent,\n  argTypes: {\n    monthlyReport: {\n      control: 'object'\n    }\n  },\n}"
                }
            ],
            "src/stories/shared/login.stories.ts": [
                {
                    "name": "Login",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/shared/login.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/shared/login.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<LoginComponent>",
                    "defaultValue": "{\n  component: LoginComponent,\n  decorators: [\n    applicationConfig({\n      providers: [provideHttpClient(), importProvidersFrom(OAuthModule.forRoot())]\n    })\n  ]\n}"
                }
            ],
            "src/app/domains/shared/util-guard/login/login.guard.ts": [
                {
                    "name": "loginGuard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/domains/shared/util-guard/login/login.guard.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CanActivateFn",
                    "defaultValue": "(route, state): boolean => {\n  const router = inject(Router);\n  const userService = inject(UserService);\n\n  if (userService.loggedInWithGoogle() && userService.user.value) {\n    return true;\n  } else {\n    userService.setStartpageOverride(state.url);\n    router.navigate([configuration.PAGE_URLS.LOGIN]);\n    return false;\n  }\n}"
                }
            ],
            "src/stories/monthly-report/information-top-bar.stories.ts": [
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/monthly-report/information-top-bar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<InformationTopBarComponent>",
                    "defaultValue": "{\n  component: InformationTopBarComponent,\n  decorators: [\n    applicationConfig({\n      providers: [provideHttpClient()]\n    })\n  ],\n  argTypes: {\n    monthlyReport: {\n      control: 'object'\n    }\n  },\n}"
                },
                {
                    "name": "TopBar",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/monthly-report/information-top-bar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    monthlyReport\n  }\n}"
                }
            ],
            "src/stories/monthly-report/time-check.stories.ts": [
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/monthly-report/time-check.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<TimeCheckComponent>",
                    "defaultValue": "{\n  component: TimeCheckComponent,\n  argTypes: {\n    monthlyReport: {\n      control: 'object'\n    }\n  },\n}"
                },
                {
                    "name": "monthlyReportArgs",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/monthly-report/time-check.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MonthlyReport",
                    "defaultValue": "{\n  employee: {\n    userId: '066-mleitner',\n    email: 'michael.leitner@gepardec.com',\n    title: null,\n    firstname: 'Michael',\n    lastname: 'Leitner',\n    salutation: null,\n    releaseDate: '2022-06-30',\n    workDescription: '07',\n    // language: 'de',\n    // regularWorkingHours: {WEDNESDAY: 8, TUESDAY: 8, THURSDAY: 8, MONDAY: 0, FRIDAY: 6.5},\n    active: true,\n    // exitDate: null\n  },\n  initialDate: null,\n  timeWarnings: [{date: '2023-09-14', description: ['Du hast keine Zeit-Buchung vorgenommen!']}, {\n    date: '2023-09-20',\n    description: ['Du hast keine Zeit-Buchung vorgenommen!']\n  }, {date: '2023-09-01', description: ['Du hast keine Zeit-Buchung vorgenommen!']}, {\n    date: '2023-09-08',\n    description: ['Du hast keine Zeit-Buchung vorgenommen!']\n  }, {date: '2023-09-29', description: ['Du hast keine Zeit-Buchung vorgenommen!']}, {\n    date: '2023-09-13',\n    description: ['Du hast keine Zeit-Buchung vorgenommen!']\n  }, {date: '2023-09-05', description: ['Du hast keine Zeit-Buchung vorgenommen!']}],\n  journeyWarnings: [],\n  comments: [],\n  employeeCheckState: 'OPEN',\n  employeeCheckStateReason: null,\n  internalCheckState: State.OPEN,\n  // isAssigned: false,\n  employeeProgresses: [],\n  otherChecksDone: true,\n  vacationDays: 0,\n  homeofficeDays: 0,\n  compensatoryDays: 0,\n  // nursingDays: 0,\n  // maternityLeaveDays: 0,\n  // externalTrainingDays: 0,\n  // conferenceDays: 0,\n  // maternityProtectionDays: 0,\n  // fatherMonthDays: 0,\n  // paidSpecialLeaveDays: 0,\n  // nonPaidVacationDays: 0,\n  vacationDayBalance: 6,\n  billableTime: '08:15',\n  totalWorkingTime: '08:15',\n  paidSickLeave: 0,\n  assigned: false\n}"
                },
                {
                    "name": "timeError",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/monthly-report/time-check.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    monthlyReport: {\n      ...monthlyReportArgs,\n    }\n  }\n}"
                },
                {
                    "name": "timeSucess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/monthly-report/time-check.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    monthlyReport: {\n      ...monthlyReportArgs,\n      timeWarnings: []\n    }\n  }\n}"
                }
            ],
            "src/stories/shared/user-actions.stories.ts": [
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/shared/user-actions.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<UserActionsComponent>",
                    "defaultValue": "{\n  component: UserActionsComponent,\n  decorators: [\n    applicationConfig({\n      providers: [provideHttpClient(), provideAnimations()]\n    })\n  ],\n  argTypes: {\n    user: {\n      control: 'object'\n    }\n  }\n}"
                },
                {
                    "name": "user",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/shared/user-actions.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User",
                    "defaultValue": "{\n  email: 'max@mustermann', firstname: 'max', lastname: 'mustermann', roles: [Role.EMPLOYEE], userId: '10'\n\n}"
                },
                {
                    "name": "UserActions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/shared/user-actions.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    user: {\n      ...user,\n    }\n  }\n}"
                }
            ],
            "src/app/domains/office-management/feature-office-management/feature-office-management.component.ts": [
                {
                    "name": "moment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/domains/office-management/feature-office-management/feature-office-management.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "_moment"
                }
            ],
            "src/app/domains/project-management/feature-project-management/feature-project-management.component.ts": [
                {
                    "name": "moment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/domains/project-management/feature-project-management/feature-project-management.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "_moment"
                }
            ],
            "src/app/domains/shared/util-common/dateUtils.ts": [
                {
                    "name": "moment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/domains/shared/util-common/dateUtils.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "_moment"
                }
            ],
            "src/app/domains/monthly-report/data-service/monthly-report/monthly-report.service.ts": [
                {
                    "name": "moment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/domains/monthly-report/data-service/monthly-report/monthly-report.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "_moment"
                }
            ],
            "src/app/domains/monthly-report/feature-monthly-report/information-top-bar/information-top-bar.component.ts": [
                {
                    "name": "moment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/domains/monthly-report/feature-monthly-report/information-top-bar/information-top-bar.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "_moment"
                }
            ],
            "src/app/domains/office-management/data-service/office-management/office-management.service.ts": [
                {
                    "name": "moment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/domains/office-management/data-service/office-management/office-management.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "_moment"
                }
            ],
            "src/app/domains/office-management/feature-office-management/employee-card/employee-card.component.ts": [
                {
                    "name": "moment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/domains/office-management/feature-office-management/employee-card/employee-card.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "_moment"
                }
            ],
            "src/app/domains/office-management/feature-office-management/enterprise-card/enterprise-card.component.ts": [
                {
                    "name": "moment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/domains/office-management/feature-office-management/enterprise-card/enterprise-card.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "_moment"
                }
            ],
            "src/app/domains/office-management/feature-office-management/project-overview-card/project-overview-card.component.ts": [
                {
                    "name": "moment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/domains/office-management/feature-office-management/project-overview-card/project-overview-card.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "_moment"
                }
            ],
            "src/app/domains/project-management/data-service/project-management/project-management.service.ts": [
                {
                    "name": "moment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/domains/project-management/data-service/project-management/project-management.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "_moment"
                }
            ],
            "src/app/domains/shared/ui-common/datepicker/datepicker.component.ts": [
                {
                    "name": "moment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/domains/shared/ui-common/datepicker/datepicker.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "_moment"
                }
            ],
            "src/app/domains/shared/ui-common/datepicker-month-year/datepicker-month-year.component.ts": [
                {
                    "name": "moment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/domains/shared/ui-common/datepicker-month-year/datepicker-month-year.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "_moment"
                },
                {
                    "name": "MY_FORMATS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/domains/shared/ui-common/datepicker-month-year/datepicker-month-year.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  parse: {\n    dateInput: 'YYYY-MM',\n  },\n  display: {\n    dateInput: 'MMMM YYYY',\n    monthYearLabel: 'MMM YYYY',\n    dateA11yLabel: 'LL',\n    monthYearA11yLabel: 'MMMM YYYY',\n  },\n}"
                }
            ],
            "src/stories/monthly-report/monthly-reports-args.ts": [
                {
                    "name": "monthlyReport",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/monthly-report/monthly-reports-args.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MonthlyReport",
                    "defaultValue": "{\n  employee: {\n    userId: '066-mleitner',\n    email: 'michael.leitner@gepardec.com',\n    title: null,\n    firstname: 'Michael',\n    lastname: 'Leitner',\n    salutation: null,\n    releaseDate: '2022-06-30',\n    workDescription: '07',\n    // language: 'de',\n    // regularWorkingHours: {WEDNESDAY: 8, TUESDAY: 8, THURSDAY: 8, MONDAY: 0, FRIDAY: 6.5},\n    active: true,\n    // exitDate: null\n  },\n  initialDate: null,\n  timeWarnings: [{date: '2023-09-14', description: ['Du hast keine Zeit-Buchung vorgenommen!']}, {\n    date: '2023-09-20',\n    description: ['Du hast keine Zeit-Buchung vorgenommen!']\n  }, {date: '2023-09-01', description: ['Du hast keine Zeit-Buchung vorgenommen!']}, {\n    date: '2023-09-08',\n    description: ['Du hast keine Zeit-Buchung vorgenommen!']\n  }, {date: '2023-09-29', description: ['Du hast keine Zeit-Buchung vorgenommen!']}, {\n    date: '2023-09-13',\n    description: ['Du hast keine Zeit-Buchung vorgenommen!']\n  }, {date: '2023-09-05', description: ['Du hast keine Zeit-Buchung vorgenommen!']}],\n  journeyWarnings: [],\n  comments: [],\n  employeeCheckState: 'OPEN',\n  employeeCheckStateReason: null,\n  internalCheckState: State.OPEN,\n  // isAssigned: false,\n  employeeProgresses: [],\n  otherChecksDone: true,\n  vacationDays: 0,\n  homeofficeDays: 0,\n  compensatoryDays: 0,\n  // nursingDays: 0,\n  // maternityLeaveDays: 0,\n  // externalTrainingDays: 0,\n  // conferenceDays: 0,\n  // maternityProtectionDays: 0,\n  // fatherMonthDays: 0,\n  // paidSpecialLeaveDays: 0,\n  // nonPaidVacationDays: 0,\n  vacationDayBalance: 6,\n  billableTime: '08:15',\n  totalWorkingTime: '08:15',\n  paidSickLeave: 0,\n  assigned: false\n}"
                }
            ],
            ".storybook/preview.ts": [
                {
                    "name": "preview",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": ".storybook/preview.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Preview",
                    "defaultValue": "{\n  parameters: {\n    actions: {argTypesRegex: '^on[A-Z].*'},\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/i,\n      },\n    },\n  },\n  decorators: [\n    moduleMetadata({\n      imports: [StorybookMinimalSetupModule],\n    }),\n  ],\n  loaders: [mswLoader]\n}"
                }
            ],
            "src/app/domains/shared/util-guard/roles/roles.guard.ts": [
                {
                    "name": "rolesGuard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/domains/shared/util-guard/roles/roles.guard.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CanActivateFn",
                    "defaultValue": "(route): boolean => {\n  return inject(RolesService).isAllowed(route.routeConfig.path);\n}"
                }
            ],
            "src/app/domains/project-management/util/project-management-comparator.ts": [
                {
                    "name": "todoProjectStates",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/domains/project-management/util/project-management-comparator.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[ProjectState.OPEN, ProjectState.WORK_IN_PROGRESS]"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/domains/shared/util-auth/auth.config.factory.ts": [
                {
                    "name": "authConfigFactory",
                    "file": "src/app/domains/shared/util-auth/auth.config.factory.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "configService",
                            "type": "ConfigService",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "OAuthModuleConfig",
                    "jsdoctags": [
                        {
                            "name": "configService",
                            "type": "ConfigService",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/domains/shared/util-common/compareUtils.ts": [
                {
                    "name": "booleanCompare",
                    "file": "src/app/domains/shared/util-common/compareUtils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "a",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "b",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "a",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "b",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "stringCompare",
                    "file": "src/app/domains/shared/util-common/compareUtils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "a",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "b",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "a",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "b",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/domains/shared/util-testing/click-simulator.ts": [
                {
                    "name": "click",
                    "file": "src/app/domains/shared/util-testing/click-simulator.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "el",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "eventObj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "ButtonClickEvents.left"
                        }
                    ],
                    "returnType": "void",
                    "jsdoctags": [
                        {
                            "name": "el",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "eventObj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "ButtonClickEvents.left",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/domains/project-management/util/project-management-comparator.ts": [
                {
                    "name": "comparePmEntriesFn",
                    "file": "src/app/domains/project-management/util/project-management-comparator.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Die Projekte sollen wie folgt sortiert werden:\nProjekte, bei denen etwas zutun ist, sollen vor projekte, bei denen nichts zutun ist, sein, sprich &quot;TodoProject&quot; &gt; &quot;Project&quot;\nEin Project ist ein &quot;TodoProject&quot;, sobald eines der folgenden Kriterien zutrifft:\n    - Mitarbeiter Überprüfung nicht fertig\n    - Projectcontrolling Status ist &#39;Offen&#39; oder &#39;In Arbeit&#39;\n    - Projectbilling Status ist &#39;Offen&#39; oder &#39;In Arbeit&#39;\nDanach soll erst nach den Projektnamen alphabetisch aufsteigend sortiert werden (AAA vor BBB)</p>\n<p>!!! AUFRUFER MUSS SORT().REVERSE aufrufen, weil javascript standardmäßig asc sortiert und hier die logik quasi invertiert ist !!!</p>\n",
                    "args": [
                        {
                            "name": "a",
                            "type": "ProjectManagementEntryViewModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "b",
                            "type": "ProjectManagementEntryViewModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "a",
                            "type": "ProjectManagementEntryViewModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "b",
                            "type": "ProjectManagementEntryViewModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isTodoProject",
                    "file": "src/app/domains/project-management/util/project-management-comparator.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "project",
                            "type": "ProjectManagementEntryViewModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "project",
                            "type": "ProjectManagementEntryViewModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/domains/shared/util-common/dateUtils.ts": [
                {
                    "name": "convertMomentToString",
                    "file": "src/app/domains/shared/util-common/dateUtils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toMonthStr",
                    "file": "src/app/domains/shared/util-common/dateUtils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "month",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "locale",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "string",
                    "jsdoctags": [
                        {
                            "name": "month",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "locale",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toMonthYearString",
                    "file": "src/app/domains/shared/util-common/dateUtils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>month 1, year 2023 results to [month-name by locale settings] 2023\ne.g. Jänner 2023 in &#39;de-At&#39;</p>\n",
                    "args": [
                        {
                            "name": "year",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "month",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "locale",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "year",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "month",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "locale",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/app.config.ts": [
                {
                    "name": "httpTranslateLoader",
                    "file": "src/app/app.config.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "http",
                            "type": "HttpClient",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "http",
                            "type": "HttpClient",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "src/app/domains/monthly-report/feature-monthly-report/employee-check-confirm-comment-dialog/model/EmployeeCheckConfirmDialogAction.ts": [
                {
                    "name": "EmployeeCheckConfirmDialogActionType",
                    "childs": [
                        {
                            "name": "SAVE",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "CANCEL",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/domains/monthly-report/feature-monthly-report/employee-check-confirm-comment-dialog/model/EmployeeCheckConfirmDialogAction.ts"
                }
            ],
            "src/app/domains/office-management/data-model/EnterpriseStep.ts": [
                {
                    "name": "EnterpriseStep",
                    "childs": [
                        {
                            "name": "ZEP_TIMES_RELEASED",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "zepTimesReleased"
                        },
                        {
                            "name": "CHARGEABILITY_EXTERNAL_EMPLOYEES_RECORDED",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "chargeabilityExternalEmployeesRecorded"
                        },
                        {
                            "name": "PAYROLL_ACCOUNTING_SENT",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "payrollAccountingSent"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/domains/office-management/data-model/EnterpriseStep.ts"
                }
            ],
            "src/app/domains/shared/data-model/ProjectState.ts": [
                {
                    "name": "ProjectState",
                    "childs": [
                        {
                            "name": "OPEN",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "OPEN"
                        },
                        {
                            "name": "WORK_IN_PROGRESS",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "WORK_IN_PROGRESS"
                        },
                        {
                            "name": "DONE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "DONE"
                        },
                        {
                            "name": "NOT_RELEVANT",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "NOT_RELEVANT"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/domains/shared/data-model/ProjectState.ts"
                }
            ],
            "src/app/domains/shared/data-model/Role.ts": [
                {
                    "name": "Role",
                    "childs": [
                        {
                            "name": "EMPLOYEE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "EMPLOYEE"
                        },
                        {
                            "name": "OFFICE_MANAGEMENT",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "OFFICE_MANAGEMENT"
                        },
                        {
                            "name": "PROJECT_LEAD",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "PROJECT_LEAD"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/domains/shared/data-model/Role.ts"
                }
            ],
            "src/app/domains/shared/data-model/State.ts": [
                {
                    "name": "State",
                    "childs": [
                        {
                            "name": "OPEN",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "OPEN"
                        },
                        {
                            "name": "DONE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "DONE"
                        },
                        {
                            "name": "IN_PROGRESS",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "IN_PROGRESS"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/domains/shared/data-model/State.ts"
                }
            ],
            "src/app/domains/shared/data-model/Step.ts": [
                {
                    "name": "Step",
                    "childs": [
                        {
                            "name": "CONTROL_TIMES",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 1
                        },
                        {
                            "name": "CONTROL_INTERNAL_TIMES",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 2
                        },
                        {
                            "name": "CONTROL_TIME_EVIDENCES",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 3
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/domains/shared/data-model/Step.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "src/app/domains/shared/data-model/ProjectEntry.ts": [
                {
                    "name": "ProjectStepQualifier",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"CONTROL_PROJECT\" | \"CONTROL_BILLING\" | \"CREATE_COMPANY_CONTROLLING\"",
                    "file": "src/app/domains/shared/data-model/ProjectEntry.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "src/app/domains/shared/data-service/snackbar/snackbar.service.ts": [
                {
                    "name": "SnackbarConfig",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/domains/shared/data-service/snackbar/snackbar.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                }
            ],
            "src/stories/monthly-report/employee-check-confirm-comment-dialog.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<EmployeeCheckConfirmCommentDialogComponent>",
                    "file": "src/stories/monthly-report/employee-check-confirm-comment-dialog.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/stories/monthly-report/employee-check.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<EmployeeCheckComponent>",
                    "file": "src/stories/monthly-report/employee-check.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/stories/monthly-report/general-info.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<GeneralInfoComponent>",
                    "file": "src/stories/monthly-report/general-info.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/stories/monthly-report/information-top-bar.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<InformationTopBarComponent>",
                    "file": "src/stories/monthly-report/information-top-bar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/stories/monthly-report/journey-check.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<JourneyCheckComponent>",
                    "file": "src/stories/monthly-report/journey-check.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/stories/monthly-report/time-check.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<TimeCheckComponent>",
                    "file": "src/stories/monthly-report/time-check.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/stories/office-management/employee-card.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<EmployeeCardComponent>",
                    "file": "src/stories/office-management/employee-card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/stories/office-management/enterprise-card.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<EnterpriseCardComponent>",
                    "file": "src/stories/office-management/enterprise-card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/stories/office-management/project-overview-card.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<ProjectOverviewCardComponent>",
                    "file": "src/stories/office-management/project-overview-card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/stories/office-management/projects-without-leads-card.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<ProjectsWithoutLeadsCardComponent>",
                    "file": "src/stories/office-management/projects-without-leads-card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/stories/office-management/projekt-name-with-zep-link.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<ProjektNameWithZepLinkComponent>",
                    "file": "src/stories/office-management/projekt-name-with-zep-link.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/stories/project-management/billable-times-fraction.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<BillableTimesFractionComponent>",
                    "file": "src/stories/project-management/billable-times-fraction.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/stories/project-management/billable-times.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<BillableTimesComponent>",
                    "file": "src/stories/project-management/billable-times.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/stories/shared/comments-for-employee.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<CommentsForEmployeeComponent>",
                    "file": "src/stories/shared/comments-for-employee.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/stories/shared/datepicker-month-year.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<DatepickerMonthYearComponent>",
                    "file": "src/stories/shared/datepicker-month-year.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/stories/shared/datepicker.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<DatepickerComponent>",
                    "file": "src/stories/shared/datepicker.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/stories/shared/done-comments-indicator.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<DoneCommentsIndicatorComponent>",
                    "file": "src/stories/shared/done-comments-indicator.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/stories/shared/error.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<ErrorComponent>",
                    "file": "src/stories/shared/error.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/stories/shared/header.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<HeaderComponent>",
                    "file": "src/stories/shared/header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/stories/shared/info-dialog.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<InfoDialogComponent>",
                    "file": "src/stories/shared/info-dialog.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/stories/shared/info.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<InfoComponent>",
                    "file": "src/stories/shared/info.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/stories/shared/inline-text-editor.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<InlineTextEditorComponent>",
                    "file": "src/stories/shared/inline-text-editor.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/stories/shared/login.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<LoginComponent>",
                    "file": "src/stories/shared/login.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/stories/shared/pm-progress.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<PmProgressComponent>",
                    "file": "src/stories/shared/pm-progress.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/stories/shared/project-state-select.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<ProjectStateSelectComponent>",
                    "file": "src/stories/shared/project-state-select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/stories/shared/state-indicator.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<StateIndicatorComponent>",
                    "file": "src/stories/shared/state-indicator.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/stories/shared/state-select.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<StateSelectComponent>",
                    "file": "src/stories/shared/state-select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/stories/shared/user-actions.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<UserActionsComponent>",
                    "file": "src/stories/shared/user-actions.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 1,
        "status": "low",
        "files": [
            {
                "filePath": ".storybook/preview.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "preview",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "httpTranslateLoader",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/domains/monthly-report/data-model/GeneralInfoData.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GeneralInfoData",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/domains/monthly-report/data-model/JourneyWarning.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "JourneyWarning",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/domains/monthly-report/data-model/MonthlyReport.ts",
                "type": "class",
                "linktype": "classe",
                "name": "MonthlyReport",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/app/domains/monthly-report/data-model/TimeWarning.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TimeWarning",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/domains/monthly-report/data-service/monthly-report/monthly-report.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MonthlyReportService",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/domains/monthly-report/data-service/monthly-report/monthly-report.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "moment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/domains/monthly-report/feature-monthly-report/employee-check-confirm-comment-dialog/employee-check-confirm-comment-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EmployeeCheckConfirmCommentDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/domains/monthly-report/feature-monthly-report/employee-check-confirm-comment-dialog/model/EmployeeCheckConfirmDialogAction.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "EmployeeCheckConfirmDialogAction",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/domains/monthly-report/feature-monthly-report/employee-check-confirm-comment-dialog/model/EmployeeCheckConfirmDialogData.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "EmployeeCheckConfirmDialogData",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/domains/monthly-report/feature-monthly-report/employee-check/employee-check.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EmployeeCheckComponent",
                "coveragePercent": 0,
                "coverageCount": "0/27",
                "status": "low"
            },
            {
                "filePath": "src/app/domains/monthly-report/feature-monthly-report/feature-monthly-report.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FeatureMonthlyReportComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/domains/monthly-report/feature-monthly-report/general-info/general-info.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GeneralInfoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/domains/monthly-report/feature-monthly-report/information-top-bar/information-top-bar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InformationTopBarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/domains/monthly-report/feature-monthly-report/information-top-bar/information-top-bar.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "moment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/domains/monthly-report/feature-monthly-report/journey-check/journey-check.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "JourneyCheckComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/domains/monthly-report/feature-monthly-report/time-check/time-check.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TimeCheckComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/domains/office-management/data-model/EnterpriseEntry.ts",
                "type": "class",
                "linktype": "classe",
                "name": "EnterpriseEntry",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/domains/office-management/data-service/enterprise-entries/enterprise-entries.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "EnterpriseEntriesService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/domains/office-management/data-service/office-management/office-management.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "OfficeManagementService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/domains/office-management/data-service/office-management/office-management.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "moment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/domains/office-management/feature-office-management/employee-card/employee-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EmployeeCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/33",
                "status": "low"
            },
            {
                "filePath": "src/app/domains/office-management/feature-office-management/employee-card/employee-card.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "moment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/domains/office-management/feature-office-management/enterprise-card/enterprise-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EnterpriseCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/domains/office-management/feature-office-management/enterprise-card/enterprise-card.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "moment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/domains/office-management/feature-office-management/feature-office-management.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FeatureOfficeManagementComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/domains/office-management/feature-office-management/feature-office-management.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "moment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/domains/office-management/feature-office-management/project-overview-card/project-overview-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProjectOverviewCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/22",
                "status": "low"
            },
            {
                "filePath": "src/app/domains/office-management/feature-office-management/project-overview-card/project-overview-card.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "moment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/domains/office-management/feature-office-management/projects-without-leads-card/projects-without-leads-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProjectsWithoutLeadsCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/domains/office-management/ui-common/projekt-name-with-zep-link/projekt-name-with-zep-link.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProjektNameWithZepLinkComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/domains/project-management/data-model/ProjectManagementEntry.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ProjectManagementEntry",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/domains/project-management/data-model/ProjectManagementEntryViewModel.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ProjectManagementEntryViewModel",
                "coveragePercent": 50,
                "coverageCount": "1/2",
                "status": "medium"
            },
            {
                "filePath": "src/app/domains/project-management/data-service/project-management/project-management.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ProjectManagementService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/domains/project-management/data-service/project-management/project-management.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "moment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/domains/project-management/feature-project-management/feature-project-management.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FeatureProjectManagementComponent",
                "coveragePercent": 0,
                "coverageCount": "0/38",
                "status": "low"
            },
            {
                "filePath": "src/app/domains/project-management/feature-project-management/feature-project-management.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "moment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/domains/project-management/ui-common/billable-times-fraction/billable-times-fraction.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BillableTimesFractionComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/domains/project-management/ui-common/billable-times/billable-times.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BillableTimesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/domains/project-management/util/project-management-comparator.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "comparePmEntriesFn",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/domains/project-management/util/project-management-comparator.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "isTodoProject",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/domains/project-management/util/project-management-comparator.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "todoProjectStates",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/domains/shared/data-model/AppInfo.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AppInfo",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/domains/shared/data-model/Comment.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Comment",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/domains/shared/data-model/Config.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Config",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/domains/shared/data-model/CustomerProjectWithoutLeads.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CustomerProjectWithoutLeads",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/domains/shared/data-model/Employee.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Employee",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/domains/shared/data-model/EmployeeStep.ts",
                "type": "class",
                "linktype": "classe",
                "name": "EmployeeStep",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/domains/shared/data-model/Link.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Link",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/domains/shared/data-model/LogEntry.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LogEntry",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/domains/shared/data-model/ManagementEntry.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ManagementEntry",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/domains/shared/data-model/NewCommentEntry.ts",
                "type": "class",
                "linktype": "classe",
                "name": "NewCommentEntry",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/domains/shared/data-model/PmProgress.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PmProgress",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/domains/shared/data-model/ProjectComment.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ProjectComment",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/domains/shared/data-model/ProjectEntry.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ProjectEntry",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/domains/shared/data-model/ProjectStep.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ProjectStep",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/domains/shared/data-model/UpdateEmployeeStep.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UpdateEmployeeStep",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/domains/shared/data-model/User.ts",
                "type": "class",
                "linktype": "classe",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/domains/shared/data-model/UserInfo.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UserInfo",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/domains/shared/data-service/comment/comment.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CommentService",
                "coveragePercent": 10,
                "coverageCount": "1/10",
                "status": "low"
            },
            {
                "filePath": "src/app/domains/shared/data-service/config/config.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ConfigService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/domains/shared/data-service/error/error-handler.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ErrorHandlerService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/domains/shared/data-service/error/error.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ErrorService",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/domains/shared/data-service/info/info.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "InfoService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/domains/shared/data-service/local-storage/local-storage.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LocalStorageService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/domains/shared/data-service/logging/logging.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LoggingService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/domains/shared/data-service/notification/notification.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "NotificationService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/domains/shared/data-service/project-comment/project-comment.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ProjectCommentService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/domains/shared/data-service/project-entries/project-entries.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ProjectEntriesService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/domains/shared/data-service/roles/roles.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "RolesService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/domains/shared/data-service/snackbar/snackbar.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SnackbarService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/domains/shared/data-service/step-entries/step-entries.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "StepEntriesService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/domains/shared/data-service/user/user.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UserService",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/domains/shared/ui-common/comments-for-employee/comments-for-employee.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CommentsForEmployeeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/24",
                "status": "low"
            },
            {
                "filePath": "src/app/domains/shared/ui-common/confirm-dialog/confirm-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ConfirmDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/domains/shared/ui-common/datepicker-month-year/datepicker-month-year.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DatepickerMonthYearComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/domains/shared/ui-common/datepicker-month-year/datepicker-month-year.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "moment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/domains/shared/ui-common/datepicker-month-year/datepicker-month-year.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MY_FORMATS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/domains/shared/ui-common/datepicker/datepicker.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DatepickerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/domains/shared/ui-common/datepicker/datepicker.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "moment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/domains/shared/ui-common/done-comments-indicator/done-comments-indicator.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DoneCommentsIndicatorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/domains/shared/ui-common/error/error.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ErrorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/domains/shared/ui-common/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/domains/shared/ui-common/info-dialog/info-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InfoDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/domains/shared/ui-common/info/info.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InfoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/domains/shared/ui-common/inline-text-editor/inline-text-editor.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InlineTextEditorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/domains/shared/ui-common/login/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/domains/shared/ui-common/pm-progress/pm-progress.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PmProgressComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/domains/shared/ui-common/pm-progress/pm-progress.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DisplayedEmployees",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/domains/shared/ui-common/project-state-select/project-state-select.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProjectStateSelectComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/domains/shared/ui-common/state-indicator/state-indicator.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StateIndicatorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/domains/shared/ui-common/state-select/state-select.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StateSelectComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/domains/shared/ui-common/user-actions/user-actions.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UserActionsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/domains/shared/util-auth/auth.config.factory.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "authConfigFactory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/domains/shared/util-auth/auth.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "authConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/domains/shared/util-auth/auth.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "cypressAuthConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/domains/shared/util-common/compareUtils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "booleanCompare",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/domains/shared/util-common/compareUtils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "stringCompare",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/domains/shared/util-common/dateUtils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "convertMomentToString",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/domains/shared/util-common/dateUtils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "toMonthStr",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/domains/shared/util-common/dateUtils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "toMonthYearString",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/domains/shared/util-common/dateUtils.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "moment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/domains/shared/util-constant/configuration.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "configuration",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/domains/shared/util-guard/login/login.guard.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loginGuard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/domains/shared/util-guard/roles/roles.guard.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "rolesGuard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/domains/shared/util-testing/click-simulator.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "click",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/domains/shared/util-testing/click-simulator.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ButtonClickEvents",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/monthly-report/employee-check-confirm-comment-dialog.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ConfirmDialog",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/monthly-report/employee-check-confirm-comment-dialog.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/monthly-report/employee-check.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AllDone",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/monthly-report/employee-check.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AllError",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/monthly-report/employee-check.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Error",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/monthly-report/employee-check.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/monthly-report/employee-check.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NotAvailable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/monthly-report/general-info.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GeneralInfo",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/monthly-report/general-info.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/monthly-report/information-top-bar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/monthly-report/information-top-bar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TopBar",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/monthly-report/journey-check.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "journeyCorrect",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/monthly-report/journey-check.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "journeyError",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/monthly-report/journey-check.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/monthly-report/monthly-reports-args.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "monthlyReport",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/monthly-report/time-check.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/monthly-report/time-check.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "monthlyReportArgs",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/monthly-report/time-check.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "timeError",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/monthly-report/time-check.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "timeSucess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/office-management/employee-card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DemoStory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/office-management/employee-card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/office-management/enterprise-card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DemoStory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/office-management/enterprise-card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/office-management/office-management-args.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "enterpriseEntry",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/office-management/office-management-args.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "omEntries",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/office-management/office-management-args.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pmEntries",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/office-management/office-management-args.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "projectsWithoutLeads",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/office-management/project-overview-card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DemoStory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/office-management/project-overview-card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/office-management/projects-without-leads-card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DemoStory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/office-management/projects-without-leads-card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/office-management/projekt-name-with-zep-link.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DemoStory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/office-management/projekt-name-with-zep-link.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/project-management/billable-times-fraction.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DemoStory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/project-management/billable-times-fraction.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/project-management/billable-times.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DemoStory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/project-management/billable-times.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/shared/comments-for-employee.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Comments",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/shared/comments-for-employee.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/shared/confirm-dialog.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ConfirmDialog",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/shared/confirm-dialog.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/shared/datepicker-month-year.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DemoStory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/shared/datepicker-month-year.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/shared/datepicker.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DemoStory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/shared/datepicker.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/shared/done-comments-indicator.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DemoStory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/shared/done-comments-indicator.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/shared/error.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Error",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/shared/error.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/shared/header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Header",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/shared/header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/shared/info-dialog.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "InfoDialo",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/shared/info-dialog.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/shared/info.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Info",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/shared/info.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/shared/inline-text-editor.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Comment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/shared/inline-text-editor.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/shared/login.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Login",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/shared/login.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/shared/pm-progress.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Done",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/shared/pm-progress.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/shared/pm-progress.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Open",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/shared/pm-progress.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pmProgress",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/shared/project-state-select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Done",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/shared/project-state-select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/shared/state-indicator.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DONE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/shared/state-indicator.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IN_PROGRESS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/shared/state-indicator.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/shared/state-indicator.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "OPEN",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/shared/state-select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Done",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/shared/state-select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/shared/user-actions.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/shared/user-actions.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "user",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/shared/user-actions.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "UserActions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}